package defpackage;

import io.reactivex.rxjava3.functions.Function;

/* renamed from: JZ  reason: default package */
/* loaded from: classes.dex */
public final /* synthetic */ class JZ implements Function, InterfaceC0149Aek {
    public static final JZ a = new Object();
    public static final JZ b = new Object();

    @Override // defpackage.InterfaceC0149Aek
    public void B(InterfaceC54340yek interfaceC54340yek, int i, int i2) {
        String str;
        Integer num;
        String str2;
        Integer num2;
        String str3;
        Integer num3;
        String str4;
        String str5;
        String str6;
        Integer num4;
        String str7;
        Integer num5;
        String str8;
        String str9;
        if (i <= 250 && i2 > 250) {
            ((C19506byj) interfaceC54340yek).c(null, "ALTER TABLE CognacAppList\nADD COLUMN hasMajorUpdate INTEGER NOT NULL DEFAULT 0", 0, null);
            ((C19506byj) interfaceC54340yek).c(null, "ALTER TABLE CognacAppList\nADD COLUMN majorUpdateDescription TEXT", 0, null);
            ((C19506byj) interfaceC54340yek).c(null, "ALTER TABLE CognacAppList\nADD COLUMN incompatibilityReason INTEGER NOT NULL DEFAULT 0", 0, null);
        }
        if (i <= 251 && i2 > 251) {
            ((C19506byj) interfaceC54340yek).c(null, "CREATE TABLE IF NOT EXISTS ProfileSavedAttachmentMessage(\n    _id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n\n    -- Identifier of the owner to which this saved message belongs.\n    -- If the owner is a friend (this attachment is saved in a 1:1 conversation),\n    -- this value will be the string representation of the UUID of the friend’s user ID.\n    -- If the owner is a chat group (this attachment is saved in a group conversation),\n    -- this value will be the string representation of the UUID of the chat group’s ID (a.k.a mischief ID).\n    ownerID TEXT NOT NULL,\n\n    -- Identifier of the saved chat message containing attachment.\n    messageID TEXT NOT NULL UNIQUE,\n\n    -- Identifier of the conversation to which this saved attachment belongs.\n    -- This information is used to fetch attachment data.\n    conversationId TEXT NOT NULL,\n\n    -- The Username of the sender who has sent the chat message in which this saved attachment exists.\n    -- This information is used to fetch attachment data.\n    -- NOTICE: Usage of username is consciously and unavoidably introduced here since conversation\n    -- API requires it to fetch attachment.\n    senderUsername TEXT NOT NULL,\n\n    -- Message body type or media card attribute type of the saved attachment message.\n    attachmentType TEXT NOT NULL,\n\n    -- [SerializableParcelContent] generated from the saved chat message represented in this row.\n    serializedParcelContent BLOB,\n\n    -- Sequence number of this saved message.\n    sequenceNumber INTEGER NOT NULL,\n\n    -- Saved states of the saved message.\n    savedStates TEXT NOT NULL,\n\n    -- The timestamp when this message is sent from the sender.\n    sentTimestamp INTEGER NOT NULL,\n\n    -- The primary text to display on each attachment card.\n    displayTitle TEXT NOT NULL,\n\n    -- This will be the thumbnailUrl for a WEBLINK, or a static resource identifier for other types.\n    iconUrl TEXT NOT NULL,\n\n    -- ownerID and messageID form a unique index together.\n    UNIQUE(ownerID, messageID)\n)", 0, null);
            ((C19506byj) interfaceC54340yek).c(null, "CREATE TABLE IF NOT EXISTS ProfileSavedAttachmentMessageFetchMetadata(\n    _id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n\n    -- Identifier of the owner to which this metadata row belongs.\n    -- If the owner is a friend (messages are saved in a 1:1 conversation), this value will be the string representation\n    -- of the UUID of the friend’s user ID.\n    -- If the owner is a chat group (messages are saved in a group conversation), this value will be the string\n    -- representation of the UUID of the chat group’s ID (a.k.a mischief ID).\n    ownerID TEXT NOT NULL UNIQUE,\n\n    -- A server returned opaque checksum that should be sent in next request.\n    checksum TEXT NOT NULL,\n\n    -- Sequence numbers used for pagination.\n    paginationSequenceNumbers TEXT NOT NULL,\n\n    -- Whether there are more saved messages remotely.\n    hasMoreMessages INTEGER  NOT NULL\n)", 0, null);
        }
        if (i <= 252 && i2 > 252) {
            ((C19506byj) interfaceC54340yek).c(null, "DROP TABLE IF EXISTS ProfileSavedAttachmentMessage", 0, null);
            ((C19506byj) interfaceC54340yek).c(null, "CREATE TABLE IF NOT EXISTS ProfileSavedAttachmentMessage(\n    _id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n\n    -- Identifier of the owner to which this saved message belongs.\n    -- If the owner is a friend (this attachment is saved in a 1:1 conversation),\n    -- this value will be the string representation of the UUID of the friend’s user ID.\n    -- If the owner is a chat group (this attachment is saved in a group conversation),\n    -- this value will be the string representation of the UUID of the chat group’s ID (a.k.a mischief ID).\n    ownerID TEXT NOT NULL,\n\n    -- Identifier of the saved chat message containing attachment.\n    messageID TEXT NOT NULL UNIQUE,\n\n    -- Identifier of the conversation to which this saved attachment belongs.\n    -- This information is used to fetch attachment data.\n    conversationId TEXT NOT NULL,\n\n    -- The Username of the sender who has sent the chat message in which this saved attachment exists.\n    -- This information is used to fetch attachment data.\n    -- NOTICE: Usage of username is consciously and unavoidably introduced here since conversation\n    -- API requires it to fetch attachment.\n    senderUsername TEXT NOT NULL,\n\n    -- Message body type or media card attribute type of the saved attachment message.\n    attachmentType TEXT NOT NULL,\n\n    -- [SerializableParcelContent] generated from the saved chat message represented in this row.\n    serializedParcelContent BLOB,\n\n    -- Sequence number of this saved message.\n    sequenceNumber INTEGER NOT NULL,\n\n    -- Saved states of the saved message.\n    savedStates TEXT NOT NULL,\n\n    -- The timestamp when this message is sent from the sender.\n    sentTimestamp INTEGER NOT NULL,\n\n    -- The message text this attachment contains. This will be\n    -- a) phone number for phone attachment\n    -- b) address for address attachment\n    -- c) web url for weblink attachment\n    -- d) username for snapchatter attachment\n    messageText TEXT NOT NULL,\n\n    -- ownerID and messageID form a unique index together.\n    UNIQUE(ownerID, messageID)\n)", 0, null);
        }
        if (i <= 253 && i2 > 253) {
            ((C19506byj) interfaceC54340yek).c(null, "ALTER TABLE DiscoverStorySnap\nADD COLUMN contextClientInfo TEXT", 0, null);
            ((C19506byj) interfaceC54340yek).c(null, "ALTER TABLE Snap\nADD COLUMN contextClientInfo TEXT", 0, null);
        }
        if (i <= 254 && i2 > 254) {
            ((C19506byj) interfaceC54340yek).c(null, "ALTER TABLE DiscoverStorySnap\nADD COLUMN sequenceNumber INTEGER", 0, null);
        }
        if (i <= 255 && i2 > 255) {
            ((C19506byj) interfaceC54340yek).c(null, "CREATE TABLE IF NOT EXISTS  LinkDecoration(\n    _id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n    url TEXT NOT NULL UNIQUE,\n    title TEXT,\n    subtitle TEXT,\n    iconProxyUrl TEXT,\n    lastUpdateTimestamp INTEGER NOT NULL\n)", 0, null);
        }
        if (i <= 256 && i2 > 256) {
            ((C19506byj) interfaceC54340yek).c(null, "ALTER TABLE CognacAppList\nADD COLUMN majorUpdateMajorVersion INTEGER", 0, null);
            ((C19506byj) interfaceC54340yek).c(null, "ALTER TABLE CognacAppList\nADD COLUMN majorUpdateMinorVersion INTEGER", 0, null);
        }
        if (i <= 257 && i2 > 257) {
            ((C19506byj) interfaceC54340yek).c(null, "DROP TABLE IF EXISTS ProfileSavedAttachmentMessage", 0, null);
            ((C19506byj) interfaceC54340yek).c(null, "CREATE TABLE IF NOT EXISTS ProfileSavedAttachmentMessage(\n    _id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n\n    -- Identifier of the owner to which this saved message belongs.\n    -- If the owner is a friend (this attachment is saved in a 1:1 conversation),\n    -- this value will be the string representation of the UUID of the friend’s user ID.\n    -- If the owner is a chat group (this attachment is saved in a group conversation),\n    -- this value will be the string representation of the UUID of the chat group’s ID (a.k.a mischief ID).\n    ownerID TEXT NOT NULL,\n\n    -- Identifier of the saved chat message containing attachment.\n    messageID TEXT NOT NULL UNIQUE,\n\n    -- Identifier of the conversation to which this saved attachment belongs.\n    -- This information is used to fetch attachment data.\n    conversationId TEXT NOT NULL,\n\n    -- The Username of the sender who has sent the chat message in which this saved attachment exists.\n    -- This information is used to fetch attachment data.\n    -- NOTICE: Usage of username is consciously and unavoidably introduced here since conversation\n    -- API requires it to fetch attachment.\n    senderUsername TEXT NOT NULL,\n\n    -- Message body type of the saved attachment message.\n    messageBodyType TEXT NOT NULL,\n\n    -- [SerializableParcelContent] generated from the saved chat message represented in this row.\n    serializedParcelContent BLOB,\n\n    -- Sequence number of this saved message.\n    sequenceNumber INTEGER NOT NULL,\n\n    -- Saved states of the saved message.\n    savedStates TEXT NOT NULL,\n\n    -- The timestamp when this message is sent from the sender.\n    sentTimestamp INTEGER NOT NULL,\n\n    -- ownerID and messageID form a unique index together.\n    UNIQUE(ownerID, messageID)\n)", 0, null);
        }
        if (i <= 258 && i2 > 258) {
            ((C19506byj) interfaceC54340yek).c(null, "CREATE TABLE StorySnapTemp (\n    _id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n    snapRowId INTEGER NOT NULL,\n    username TEXT,\n    clientId TEXT NOT NULL,\n    storyRowId INTEGER NOT NULL,\n    captionTextDisplay TEXT,\n    filterId TEXT,\n    thumbnailUrl TEXT,\n    largeThumbnailUrl TEXT,\n    viewed INTEGER, -- true if the snap has been viewed\n    isPublic INTEGER,\n    mediaD2sUrl TEXT,\n    needAuth INTEGER NOT NULL,\n    storyFilterId TEXT,\n    thumbnailIv TEXT,\n    canonicalDisplayTime INTEGER,\n    expirationTimestamp INTEGER,\n    venueId TEXT,\n    flushableId TEXT, -- used to report read, screenshot, save states to servers\n    displayName TEXT, -- used for showing the display name of the snap's attributed user.\n    snapAttachmentUrl TEXT, -- used for URL attachments\n    contextHint TEXT, -- used for Context Cards\n    animatedSnapType TEXT, -- whether the snap contained animations, for analytics\n    lensMetadata TEXT, -- metadata for lenses analytics\n    filterLensId TEXT, -- metadata for lenses analytics\n    unlockablesSnapInfo TEXT, -- metadata for unlockables analytics\n    encryptedGeoLoggingData TEXT, -- encrypted metadata about geo logging, for analytics\n    ruleFileParams TEXT, -- serialized map for controlling media quality for direct-to-storage downloads\n    brandFriendliness INTEGER, -- Brand friendliness from server story snap\n    clientStatus INTEGER,\n    friendScreenCaptureRecordingCount INTEGER,\n    friendScreenCaptureShotCount INTEGER,\n    friendScreenshotCount INTEGER,\n    friendSnapSaveCount INTEGER,\n    friendViewCount INTEGER,\n    otherScreenCaptureRecordingCount INTEGER,\n    otherScreenCaptureShotCount INTEGER,\n    otherScreenshotCount INTEGER,\n    otherSnapSaveCount INTEGER,\n    otherViewCount INTEGER,\n    pendingServerConfirmation INTEGER, -- whether posts are waiting to be confirmed by StoriesResponse\n    postedTimestamp INTEGER, -- used for posting timeout logic for detecting async posting failures\n    creationTimestamp INTEGER, -- used to display original creation time when posting from memories / camera roll\n    snapSource INTEGER, -- used to determine source when posting from memories / camera roll\n    creativeKitSourceAppName TEXT, -- used to display source app name when posting from Snap Kit Creative Kit\n    creativeKitSourceAppOAuthClientId TEXT, -- used to identify source app when posting from Snap Kit Creative Kit\n    serverRankingId TEXT, -- used for story story view blizzard event\n\n    -- (storyRowId, clientId) should be unique and consistent across local and server synced snaps\n    UNIQUE(storyRowId, clientId),\n\n    -- should have unique snapRowId for each story\n    UNIQUE(storyRowId, snapRowId)\n)", 0, null);
            ((C19506byj) interfaceC54340yek).c(null, "INSERT INTO StorySnapTemp\nSELECT\n    _id,\n    snapRowId,\n    username,\n    clientId,\n    storyRowId,\n    captionTextDisplay,\n    filterId,\n    thumbnailUrl,\n    largeThumbnailUrl,\n    viewed,\n    isPublic,\n    mediaD2sUrl,\n    needAuth,\n    storyFilterId,\n    thumbnailIv,\n    canonicalDisplayTime,\n    expirationTimestamp,\n    venueId,\n    flushableId,\n    displayName,\n    snapAttachmentUrl,\n    contextHint,\n    animatedSnapType,\n    lensMetadata,\n    filterLensId,\n    unlockablesSnapInfo,\n    encryptedGeoLoggingData,\n    ruleFileParams,\n    brandFriendliness,\n    clientStatus,\n    friendScreenCaptureRecordingCount,\n    friendScreenCaptureShotCount,\n    friendScreenshotCount,\n    friendSnapSaveCount,\n    friendViewCount,\n    otherScreenCaptureRecordingCount,\n    otherScreenCaptureShotCount,\n    otherScreenshotCount,\n    otherSnapSaveCount,\n    otherViewCount,\n    pendingServerConfirmation,\n    postedTimestamp,\n    creationTimestamp,\n    snapSource,\n    creativeKitSourceAppName,\n    creativeKitSourceAppOAuthClientId,\n    serverRankingId\nFROM\n    StorySnap", 0, null);
            ((C19506byj) interfaceC54340yek).c(null, "DROP TABLE StorySnap", 0, null);
            ((C19506byj) interfaceC54340yek).c(null, "ALTER TABLE StorySnapTemp RENAME TO StorySnap", 0, null);
            ((C19506byj) interfaceC54340yek).c(null, "CREATE INDEX IF NOT EXISTS story_snap_story_row_id ON StorySnap(storyRowId)", 0, null);
            ((C19506byj) interfaceC54340yek).c(null, "CREATE INDEX IF NOT EXISTS story_snap_username ON StorySnap(username)", 0, null);
            ((C19506byj) interfaceC54340yek).c(null, "CREATE INDEX IF NOT EXISTS story_snap_snap_row_id ON StorySnap(snapRowId)", 0, null);
        }
        if (i <= 259 && i2 > 259) {
            ((C19506byj) interfaceC54340yek).c(null, "DROP VIEW IF EXISTS FriendsFeedView", 0, null);
            ((C19506byj) interfaceC54340yek).c(null, "CREATE VIEW IF NOT EXISTS FriendsFeedView\nAS SELECT\n    Feed._id,\n    coalesce(Feed.specifiedName, Feed.fitScreenParticipantString, Feed.participantString) AS feedDisplayName,\n    participantsSize,\n    Feed.lastInteractionTimestamp,\n    Feed.displayTimestamp,\n    Feed.displayInteractionType,\n    InteractionMessages.snapId AS notViewedSnapId,\n    Feed.lastInteractionUserId,\n    Feed.clearedTimestamp,\n    Feed.kind,\n    Feed.key,\n    Friend._id AS friendRowId,\n    Friend.userId AS friendUserId,\n    Friend.friendmojiCategories,\n    Friend.displayName AS friendDisplayName,\n    Friend.username AS friendUsername,\n    Friend.friendmojiString,\n    Friend.streakLength,\n    Friend.streakExpiration,\n    Friend.bitmojiAvatarId,\n    Friend.bitmojiSelfieId,\n    Friend.birthday,\n    Friend.addedTimestamp,\n    Friend.reverseAddedTimestamp,\n    Friend.isOfficial,\n    COALESCE(((Friend.storyMuted = 1) OR (Feed.groupStoryMuted = 1)), 0) AS storyMuted,\n    Story._id AS storyRowId,\n    Story.storyId AS storyId,\n    StoryFirstUnviewedSnap.snapId AS storyFirstUnviewedSnapId,\n    Story.viewed AS storyViewed,\n    Story.latestTimeStamp AS storyLatestTimestamp,\n    Story.latestExpirationTimestamp AS storyLatestExpirationTimestamp,\n    Story.rankingId AS storyRankingId,\n    COALESCE(FriendStory.username, '') AS friendStoryUsername,\n    FriendStory.isViewed AS friendStoryIsViewed,\n    FriendStory.latestSnapTimestamp AS friendStoryLatestTimestamp,\n    FriendStory.latestSnapExpirationTimestamp AS friendStoryLatestExpirationTimestamp,\n    COALESCE(FriendStory.firstUnviewedSnapId, '') AS friendStoryFirstUnviewedSnapId,\n    lastInteractionUser.displayName AS displayInteractionUserDisplayName,\n    lastInteractionUser.username AS displayInteractionUserUsername,\n    lastWriterUser.username AS lastWriterUsername,\n    FriendsFeedScore.score AS score\nFROM\nFeed\nLEFT OUTER JOIN Friend AS Friend ON Feed.friendRowId = Friend._id\nLEFT OUTER JOIN Friend AS lastInteractionUser ON Feed.lastInteractionUserId = lastInteractionUser._id\nLEFT OUTER JOIN Friend AS lastWriterUser ON Feed.lastInteractionWriterId = lastWriterUser._id\nLEFT OUTER JOIN StoryViewActiveSnaps AS Story ON Feed.storyRowId = Story._id\nLEFT OUTER JOIN StoryViewFriendStoriesActiveSnaps AS FriendStory ON (Feed.kind = 0 AND Friend.username = FriendStory.username)\nLEFT OUTER JOIN (\n    SELECT * FROM (\n        SELECT\n            StorySnap.storyRowId,\n            Snap.snapId\n        FROM StorySnap\n        LEFT OUTER JOIN Snap ON Snap._id = StorySnap.snapRowId\n        WHERE StorySnap.viewed = 0\n        ORDER BY Snap.timestamp DESC\n    ) GROUP BY storyRowId\n)  AS StoryFirstUnviewedSnap ON Feed.storyRowId = StoryFirstUnviewedSnap.storyRowId\nLEFT OUTER JOIN FriendsFeedScore ON Feed._id = FriendsFeedScore.feedRowId\nLEFT OUTER JOIN InteractionMessages\nON (\n    Feed._id = InteractionMessages.feedRowId\n    AND (\n        -- InteractionMessageType.RECEIVED_NOT_VIEWED_SNAP_WITH_SOUND(2),\n        (Feed.displayInteractionType = 'SNAP_RECEIVED_AND_NOT_VIEWED_SOUND' AND InteractionMessages.messageType = 2)\n        OR\n        -- InteractionMessageType.RECEIVED_NOT_VIEWED_SNAP_WITH_NO_SOUND(3),\n        (Feed.displayInteractionType = 'SNAP_RECEIVED_AND_NOT_VIEWED_NO_SOUND' AND InteractionMessages.messageType = 3)\n    )\n)\n\nWHERE Feed.hidden = 0\n      AND (Feed.lastInteractionTimestamp IS NOT NULL AND Feed.clearedTimestamp <= Feed.sortingTimestamp)", 0, null);
        }
        if (i <= 260 && i2 > 260) {
            ((C19506byj) interfaceC54340yek).c(null, "ALTER TABLE PostableStory\nADD COLUMN thirdPartyAppConnect INTEGER", 0, null);
        }
        if (i <= 261 && i2 > 261) {
            ((C19506byj) interfaceC54340yek).c(null, "UPDATE Friend\nSET friendLinkType = 6\nWHERE friendLinkType = 1 AND addedTimestamp = 0", 0, null);
            ((C19506byj) interfaceC54340yek).c(null, "UPDATE Friend\nSET friendLinkType = 7\nWHERE friendLinkType = 4 AND addedTimestamp = 0", 0, null);
        }
        if (i <= 262 && i2 > 262) {
            ((C19506byj) interfaceC54340yek).c(null, "ALTER TABLE Feed\nADD COLUMN arroyoMigrationState INTEGER DEFAULT 0 NOT NULL", 0, null);
        }
        if (i <= 263 && i2 > 263) {
            ((C19506byj) interfaceC54340yek).c(null, "ALTER TABLE CognacAppList\nADD COLUMN leaderboardsEnabled INTEGER NOT NULL DEFAULT 0", 0, null);
        }
        if (i <= 264 && i2 > 264) {
            ((C19506byj) interfaceC54340yek).c(null, "DELETE FROM ProfileSavedMediaMessage", 0, null);
            ((C19506byj) interfaceC54340yek).c(null, "DELETE FROM ProfileSavedMediaMessageFetchMetadata", 0, null);
            ((C19506byj) interfaceC54340yek).c(null, "ALTER TABLE ProfileSavedMediaMessage\nADD COLUMN messageSentTsMs INTEGER NOT NULL DEFAULT 0", 0, null);
        }
        if (i <= 265 && i2 > 265) {
            ((C19506byj) interfaceC54340yek).c(null, "ALTER TABLE Story\nADD COLUMN lastSyncRequestId TEXT", 0, null);
            ((C19506byj) interfaceC54340yek).c(null, "DROP VIEW IF EXISTS StoryViewActiveSnaps", 0, null);
            ((C19506byj) interfaceC54340yek).c(null, "CREATE VIEW StoryViewActiveSnaps AS\nSELECT\n    Story._id,\n    Story.storyId,\n    Story.userName,\n    Story.displayName,\n    Story.kind,\n    Story.groupStoryType,\n    Story.rankingId,\n    Story.lastSyncRequestId,\n    StorySnaps.isViewed AS viewed,\n    StorySnaps.latestSnapTimestamp AS latestTimeStamp,\n    StorySnaps.latestSnapExpirationTimestamp AS latestExpirationTimestamp\nFROM Story\nLEFT OUTER JOIN (\n    SELECT\n        StorySnap.storyRowId,\n        MAX(Snap.timestamp) AS latestSnapTimestamp,\n        MAX(StorySnap.expirationTimestamp) AS latestSnapExpirationTimestamp,\n        MIN(StorySnap.viewed) = 1 AS isViewed\n    FROM StorySnap\n    JOIN Snap ON StorySnap.snapRowId = Snap._id\n    GROUP BY StorySnap.storyRowId\n) AS StorySnaps ON Story._id = StorySnaps.storyRowId\nWHERE Story._id IN (SELECT DISTINCT StorySnap.storyRowId FROM StorySnap)", 0, null);
            ((C19506byj) interfaceC54340yek).c(null, "DROP VIEW IF EXISTS DiscoverFeedFriendStoriesView", 0, null);
            ((C19506byj) interfaceC54340yek).c(null, "CREATE VIEW DiscoverFeedFriendStoriesView\nAS SELECT\n    Story._id,\n    Story.storyId AS storyId,\n    FirstUnviewedSnap.snapId AS firstUnviewedSnapId,\n    Friend.userId AS friendUserId,\n    Friend.displayName AS friendDisplayName,\n    Story.userName AS friendUsername,\n    Story.displayName AS storyDisplayName,\n    Feed.specifiedName AS feedSpecifiedName,\n    Feed.participantString AS feedParticipantString,\n    Friend.bitmojiAvatarId,\n    Friend.bitmojiSelfieId,\n    COALESCE(Friend.storyMuted, 0) AS storyMuted,\n    groupStoryType,\n    Story.viewed AS storyViewed,\n    latestTimeStamp AS storyLatestTimestamp,\n    latestExpirationTimestamp AS storyLatestExpirationTimestamp,\n    rankingId AS storyRankingId,\n    Story.lastSyncRequestId AS lastSyncRequestId                                                                        \nFROM\nStoryViewActiveSnaps AS Story\nLEFT OUTER JOIN Friend ON Friend.username = Story.userName\nLEFT OUTER JOIN Feed ON Feed.key = Story.userName\nLEFT OUTER JOIN (\n    SELECT * FROM (\n        SELECT\n            StorySnap.storyRowId,\n            Snap.snapId\n        FROM StorySnap\n        LEFT OUTER JOIN Snap ON Snap._id = StorySnap.snapRowId\n        WHERE StorySnap.viewed = 0\n        ORDER BY Snap.timestamp DESC\n    ) GROUP BY storyRowId\n)  AS FirstUnviewedSnap ON Story._id = FirstUnviewedSnap.storyRowId\nWHERE (rankingId NOT NULL OR groupStoryType NOT NULL)", 0, null);
        }
        if (i <= 266 && i2 > 266) {
            ((C19506byj) interfaceC54340yek).c(null, "DROP VIEW IF EXISTS FriendsFeedView", 0, null);
            ((C19506byj) interfaceC54340yek).c(null, "CREATE VIEW IF NOT EXISTS FriendsFeedView\nAS SELECT\n    Feed._id,\n    coalesce(Feed.specifiedName, Feed.fitScreenParticipantString, Feed.participantString) AS feedDisplayName,\n    participantsSize,\n    Feed.lastInteractionTimestamp,\n    Feed.displayTimestamp,\n    Feed.displayInteractionType,\n    InteractionMessages.snapId AS notViewedSnapId,\n    Feed.lastInteractionUserId,\n    Feed.clearedTimestamp,\n    Feed.kind,\n    Feed.key,\n    Feed.isArroyo,\n    Friend._id AS friendRowId,\n    Friend.userId AS friendUserId,\n    Friend.friendmojiCategories,\n    Friend.displayName AS friendDisplayName,\n    Friend.username AS friendUsername,\n    Friend.friendmojiString,\n    Friend.streakLength,\n    Friend.streakExpiration,\n    Friend.bitmojiAvatarId,\n    Friend.bitmojiSelfieId,\n    Friend.birthday,\n    Friend.addedTimestamp,\n    Friend.reverseAddedTimestamp,\n    Friend.isOfficial,\n    COALESCE(((Friend.storyMuted = 1) OR (Feed.groupStoryMuted = 1)), 0) AS storyMuted,\n    Story._id AS storyRowId,\n    Story.storyId AS storyId,\n    StoryFirstUnviewedSnap.snapId AS storyFirstUnviewedSnapId,\n    Story.viewed AS storyViewed,\n    Story.latestTimeStamp AS storyLatestTimestamp,\n    Story.latestExpirationTimestamp AS storyLatestExpirationTimestamp,\n    Story.rankingId AS storyRankingId,\n    COALESCE(FriendStory.username, '') AS friendStoryUsername,\n    FriendStory.isViewed AS friendStoryIsViewed,\n    FriendStory.latestSnapTimestamp AS friendStoryLatestTimestamp,\n    FriendStory.latestSnapExpirationTimestamp AS friendStoryLatestExpirationTimestamp,\n    COALESCE(FriendStory.firstUnviewedSnapId, '') AS friendStoryFirstUnviewedSnapId,\n    lastInteractionUser.displayName AS displayInteractionUserDisplayName,\n    lastInteractionUser.username AS displayInteractionUserUsername,\n    lastWriterUser.username AS lastWriterUsername,\n    FriendsFeedScore.score AS score\nFROM\nFeed\nLEFT OUTER JOIN Friend AS Friend ON Feed.friendRowId = Friend._id\nLEFT OUTER JOIN Friend AS lastInteractionUser ON Feed.lastInteractionUserId = lastInteractionUser._id\nLEFT OUTER JOIN Friend AS lastWriterUser ON Feed.lastInteractionWriterId = lastWriterUser._id\nLEFT OUTER JOIN StoryViewActiveSnaps AS Story ON Feed.storyRowId = Story._id\nLEFT OUTER JOIN StoryViewFriendStoriesActiveSnaps AS FriendStory ON (Feed.kind = 0 AND Friend.username = FriendStory.username)\nLEFT OUTER JOIN (\n    SELECT * FROM (\n        SELECT\n            StorySnap.storyRowId,\n            Snap.snapId\n        FROM StorySnap\n        LEFT OUTER JOIN Snap ON Snap._id = StorySnap.snapRowId\n        WHERE StorySnap.viewed = 0\n        ORDER BY Snap.timestamp DESC\n    ) GROUP BY storyRowId\n)  AS StoryFirstUnviewedSnap ON Feed.storyRowId = StoryFirstUnviewedSnap.storyRowId\nLEFT OUTER JOIN FriendsFeedScore ON Feed._id = FriendsFeedScore.feedRowId\nLEFT OUTER JOIN InteractionMessages\nON (\n    Feed._id = InteractionMessages.feedRowId\n    AND (\n        -- InteractionMessageType.RECEIVED_NOT_VIEWED_SNAP_WITH_SOUND(2),\n        (Feed.displayInteractionType = 'SNAP_RECEIVED_AND_NOT_VIEWED_SOUND' AND InteractionMessages.messageType = 2)\n        OR\n        -- InteractionMessageType.RECEIVED_NOT_VIEWED_SNAP_WITH_NO_SOUND(3),\n        (Feed.displayInteractionType = 'SNAP_RECEIVED_AND_NOT_VIEWED_NO_SOUND' AND InteractionMessages.messageType = 3)\n    )\n)\n\nWHERE Feed.hidden = 0\n      AND (Feed.lastInteractionTimestamp IS NOT NULL AND Feed.clearedTimestamp <= Feed.sortingTimestamp)", 0, null);
        }
        if (i <= 267 && i2 > 267) {
            ((C19506byj) interfaceC54340yek).c(null, "ALTER TABLE Feed\nADD COLUMN retentionPromptProfileCardHasBeenDismissed INTEGER NOT NULL DEFAULT 0", 0, null);
            ((C19506byj) interfaceC54340yek).c(null, "ALTER TABLE Feed\nADD COLUMN retentionPromptChatCardHasBeenDismissed INTEGER NOT NULL DEFAULT 0", 0, null);
            ((C19506byj) interfaceC54340yek).c(null, "CREATE TABLE IF NOT EXISTS UserActionSaveMessage(\n    _id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n\n    -- Set timestamp when entry is created\n    _createdTimestamp INTEGER NOT NULL DEFAULT 0,\n\n    messageRowId INTEGER REFERENCES Message(_id) ON DELETE CASCADE,\n\n    -- Get feed row from message row when entry is created\n    _feedRowId INTEGER NOT NULL DEFAULT 0\n)", 0, null);
            ((C19506byj) interfaceC54340yek).c(null, "CREATE INDEX IF NOT EXISTS userActionSaveMessage_idx_feedRowId ON UserActionSaveMessage(_feedRowId)", 0, null);
            ((C19506byj) interfaceC54340yek).c(null, "CREATE TRIGGER IF NOT EXISTS userActionSaveMessage_insert AFTER INSERT ON UserActionSaveMessage\nBEGIN\n\n    -- This calculation will provide milliseconds since epoch time (currently the only way to get it through sqlite)\n    UPDATE UserActionSaveMessage SET _createdTimestamp = CAST((strftime('%J', 'now') - 2440587.5)*86400000 AS INTEGER) WHERE _id = new._id;\n\n    -- Set _feedRowId based on Message's feedRowId\n    UPDATE UserActionSaveMessage\n    SET _feedRowId =    (SELECT Message.feedRowId\n                        FROM Message\n                        WHERE Message._id = UserActionSaveMessage.messageRowId\n                        LIMIT 1)\n    WHERE _id = new._id;\n\nEND", 0, null);
        }
        if (i <= 268 && i2 > 268) {
            ((C19506byj) interfaceC54340yek).c(null, "ALTER TABLE DiscoverFeedStory\nADD COLUMN orderedSnapsList BLOB", 0, null);
        }
        if (i <= 269 && i2 > 269) {
            ((C19506byj) interfaceC54340yek).c(null, "ALTER TABLE PublisherSnapPage\nADD COLUMN sequenceNumber INTEGER", 0, null);
        }
        if (i <= 270 && i2 > 270) {
            ((C19506byj) interfaceC54340yek).c(null, "DROP TABLE IF EXISTS DiscoverFeedSections", 0, null);
        }
        if (i <= 271 && i2 > 271) {
            ((C19506byj) interfaceC54340yek).c(null, "DROP TABLE IF EXISTS StorySubscription", 0, null);
        }
        if (i <= 272 && i2 > 272) {
            ((C19506byj) interfaceC54340yek).c(null, "ALTER TABLE Friend\nADD COLUMN fideliusKeys BLOB", 0, null);
        }
        if (i <= 274 && i2 > 274) {
            ((C19506byj) interfaceC54340yek).c(null, "DROP TABLE IF EXISTS uploaded_media", 0, null);
        }
        if (i <= 275 && i2 > 275) {
            ((C19506byj) interfaceC54340yek).c(null, "ALTER TABLE ConfigRule ADD COLUMN namespace INTEGER DEFAULT -1 NOT NULL", 0, null);
            ((C19506byj) interfaceC54340yek).c(null, "ALTER TABLE ConfigRule RENAME TO old_ConfigRule", 0, null);
            ((C19506byj) interfaceC54340yek).c(null, "CREATE TABLE IF NOT EXISTS ConfigRule (\n    _id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n    rule_id BLOB NOT NULL,\n    config_id TEXT NOT NULL,\n    priority INTEGER,\n    config_result BLOB NOT NULL,\n    namespace INTEGER,\n    UNIQUE(rule_id, config_id) ON CONFLICT REPLACE\n)", 0, null);
            ((C19506byj) interfaceC54340yek).c(null, "INSERT INTO ConfigRule\nSELECT _id, rule_id, config_id, priority, config_result, namespace\nFROM old_ConfigRule\nORDER BY last_updated ASC", 0, null);
            ((C19506byj) interfaceC54340yek).c(null, "DROP TABLE old_ConfigRule", 0, null);
        }
        if (i <= 276 && i2 > 276) {
            ((C19506byj) interfaceC54340yek).c(null, "DELETE FROM FriendSyncState", 0, null);
        }
        if (i <= 277 && i2 > 277) {
            ((C19506byj) interfaceC54340yek).c(null, "DROP TABLE IF EXISTS LegalAgreement", 0, null);
        }
        if (i <= 278 && i2 > 278) {
            ((C19506byj) interfaceC54340yek).c(null, "ALTER TABLE Feed\nADD COLUMN userSavedTimestamps TEXT", 0, null);
        }
        if (i <= 279 && i2 > 279) {
            ((C19506byj) interfaceC54340yek).c(null, "ALTER TABLE StoryNote\nADD COLUMN viewerUserId TEXT NOT NULL DEFAULT('')", 0, null);
            ((C19506byj) interfaceC54340yek).c(null, "DROP INDEX story_notes_story_snap_row_id_viewer", 0, null);
            ((C19506byj) interfaceC54340yek).c(null, "CREATE UNIQUE INDEX IF NOT EXISTS story_notes_story_snap_row_id_viewer ON StoryNote(storySnapRowId, viewer, viewerUserId)", 0, null);
        }
        if (i <= 280 && i2 > 280) {
            ((C19506byj) interfaceC54340yek).c(null, "DROP TABLE IF EXISTS UserActionSaveMessage", 0, null);
        }
        if (i <= 281 && i2 > 281) {
            ((C19506byj) interfaceC54340yek).c(null, "DROP INDEX IF EXISTS story_notes_snap_row_id", 0, null);
            ((C19506byj) interfaceC54340yek).c(null, "DROP INDEX IF EXISTS story_notes_story_snap_row_id_viewer", 0, null);
            ((C19506byj) interfaceC54340yek).c(null, "CREATE UNIQUE INDEX IF NOT EXISTS story_notes_snap_id_viewer ON StoryNote(snapId, viewer, viewerUserId)", 0, null);
        }
        if (i <= 282 && i2 > 282) {
            ((C19506byj) interfaceC54340yek).c(null, "DROP TABLE IF EXISTS Weather", 0, null);
        }
        if (i <= 283 && i2 > 283) {
            ((C19506byj) interfaceC54340yek).c(null, "CREATE TABLE IF NOT EXISTS ProfilePreloadConfig(\n    _id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n    profileType INTEGER NOT NULL,\n    ownerID TEXT NOT NULL,\n    preloadConfig TEXT NOT NULL,\n    expirationTimestampMs INTEGER NOT NULL,\n    UNIQUE(profileType, ownerID)\n)", 0, null);
        }
        if (i <= 284 && i2 > 284) {
            ((C19506byj) interfaceC54340yek).c(null, "DROP TABLE IF EXISTS Geofilter", 0, null);
        }
        if (i <= 285 && i2 > 285) {
            ((C19506byj) interfaceC54340yek).c(null, "DROP TABLE IF EXISTS ProfilePreloadConfig", 0, null);
            ((C19506byj) interfaceC54340yek).c(null, "CREATE TABLE IF NOT EXISTS ProfilePreloadConfig(\n    _id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n    profileType INTEGER NOT NULL,\n    ownerID TEXT NOT NULL,\n    preloadConfig TEXT NOT NULL,\n    expirationTimestampMs INTEGER NOT NULL\n)", 0, null);
            ((C19506byj) interfaceC54340yek).c(null, "CREATE UNIQUE INDEX IF NOT EXISTS profile_preload_config_unique_index_owner_id_profile_type ON ProfilePreloadConfig(ownerID, profileType)", 0, null);
            ((C19506byj) interfaceC54340yek).c(null, "CREATE UNIQUE INDEX IF NOT EXISTS profile_preload_config_index_expiration_timestamp_ms ON ProfilePreloadConfig(expirationTimestampMs)", 0, null);
        }
        if (i <= 286 && i2 > 286) {
            ((C19506byj) interfaceC54340yek).c(null, "DROP TABLE IF EXISTS PassportEntry", 0, null);
        }
        if (i <= 287 && i2 > 287) {
            ((C19506byj) interfaceC54340yek).c(null, "DROP VIEW IF EXISTS DiscoverFeedFriendStoriesView", 0, null);
            ((C19506byj) interfaceC54340yek).c(null, "CREATE VIEW DiscoverFeedFriendStoriesView\nAS SELECT\n    Story._id,\n    Story.storyId AS storyId,\n    FirstUnviewedSnap.snapId AS firstUnviewedSnapId,\n    Friend.userId AS friendUserId,\n    Friend.displayName AS friendDisplayName,\n    Story.userName AS friendUsername,\n    Story.displayName AS storyDisplayName,\n    Feed.specifiedName AS feedSpecifiedName,\n    Feed.participantString AS feedParticipantString,\n    Friend.bitmojiAvatarId,\n    Friend.bitmojiSelfieId,\n    COALESCE(Friend.storyMuted, 0) AS storyMuted,\n    groupStoryType,\n    Story.viewed AS storyViewed,\n    latestTimeStamp AS storyLatestTimestamp,\n    latestExpirationTimestamp AS storyLatestExpirationTimestamp,\n    rankingId AS storyRankingId,\n    Story.lastSyncRequestId AS lastSyncRequestId\nFROM\nStoryViewActiveSnaps AS Story\nLEFT OUTER JOIN Friend ON Friend.username = Story.userName\nLEFT OUTER JOIN Feed ON Feed.key = Story.userName\nLEFT OUTER JOIN (\n    SELECT * FROM (\n        SELECT\n            StorySnap.storyRowId,\n            Snap.snapId\n        FROM StorySnap\n        LEFT OUTER JOIN Snap ON Snap._id = StorySnap.snapRowId\n        WHERE StorySnap.viewed = 0\n        ORDER BY Snap.timestamp DESC\n    ) GROUP BY storyRowId\n)  AS FirstUnviewedSnap ON Story._id = FirstUnviewedSnap.storyRowId\nWHERE Story.kind IN (0, 1) -- StoryKind.FRIEND or StoryKind.GROUP\n    AND (rankingId NOT NULL OR groupStoryType NOT NULL)", 0, null);
        }
        if (i <= 288 && i2 > 288) {
            ((C19506byj) interfaceC54340yek).c(null, "ALTER TABLE StoryNote\nADD COLUMN viewerUsername TEXT", 0, null);
            ((C19506byj) interfaceC54340yek).c(null, "UPDATE StoryNote SET viewerUsername = viewer", 0, null);
        }
        if (i <= 289 && i2 > 289) {
            ((C19506byj) interfaceC54340yek).c(null, "ALTER TABLE Unlockables\nADD COLUMN protoGeofence BLOB DEFAULT NULL", 0, null);
        }
        if (i <= 290 && i2 > 290) {
            ((C19506byj) interfaceC54340yek).c(null, "ALTER TABLE DiscoverStorySnap\nADD COLUMN boltMediaContentObject BLOB DEFAULT NULL", 0, null);
            ((C19506byj) interfaceC54340yek).c(null, "ALTER TABLE DiscoverStorySnap\nADD COLUMN boltOverlayContentObject BLOB DEFAULT NULL", 0, null);
        }
        if (i <= 291 && i2 > 291) {
            ((C19506byj) interfaceC54340yek).c(null, "DROP TABLE IF EXISTS StickerMessage", 0, null);
        }
        if (i <= 292 && i2 > 292) {
            ((C19506byj) interfaceC54340yek).c(null, "ALTER TABLE DiscoverFeedStory\nADD COLUMN localSequenceMax INTEGER", 0, null);
        }
        if (i <= 293 && i2 > 293) {
            ((C19506byj) interfaceC54340yek).c(null, "DROP TABLE IF EXISTS CognacAppList", 0, null);
        }
        if (i <= 294 && i2 > 294) {
            ((C19506byj) interfaceC54340yek).c(null, "DELETE FROM SuggestedFriendPlacement WHERE suggestionPlacement = 6", 0, null);
            ((C19506byj) interfaceC54340yek).c(null, "DELETE FROM TopSuggestedFriend WHERE suggestionPlacement = 6", 0, null);
        }
        if (i <= 295 && i2 > 295) {
            ((C19506byj) interfaceC54340yek).c(null, "DELETE FROM ProfileSavedMediaMessage", 0, null);
            ((C19506byj) interfaceC54340yek).c(null, "DELETE FROM ProfileSavedMediaMessageFetchMetadata", 0, null);
            ((C19506byj) interfaceC54340yek).c(null, "ALTER TABLE ProfileSavedMediaMessage\nADD COLUMN mediaTypes TEXT NOT NULL DEFAULT \"\"", 0, null);
        }
        if (i <= 296 && i2 > 296) {
            ((C19506byj) interfaceC54340yek).c(null, "ALTER TABLE StorySnap\nADD COLUMN sequence INTEGER", 0, null);
        }
        if (i <= 297 && i2 > 297) {
            ((C19506byj) interfaceC54340yek).c(null, "ALTER TABLE StorySnap\nADD COLUMN ourStoriesSnapId TEXT", 0, null);
        }
        if (i <= 298 && i2 > 298) {
            ((C19506byj) interfaceC54340yek).c(null, "ALTER TABLE Story\nADD COLUMN minSequence INTEGER", 0, null);
            ((C19506byj) interfaceC54340yek).c(null, "ALTER TABLE Story\nADD COLUMN maxSequence INTEGER", 0, null);
            ((C19506byj) interfaceC54340yek).c(null, "ALTER TABLE Story\nADD COLUMN lastSyncMaxSequence INTEGER", 0, null);
        }
        if (i <= 299 && i2 > 299) {
            ((C19506byj) interfaceC54340yek).c(null, "ALTER TABLE DiscoverFeedStory\nADD COLUMN videoTrackUrl TEXT", 0, null);
        }
        if (i <= 300 && i2 > 300) {
            ((C19506byj) interfaceC54340yek).c(null, "UPDATE Preferences\nSET key = \"SECURITY~REGISTRATION_UUID\"\nWHERE key = \"AB_PLATFORM~REGISTRATION_UUID\"", 0, null);
        }
        if (i <= 301 && i2 > 301) {
            ((C19506byj) interfaceC54340yek).c(null, "DROP TABLE IF EXISTS StoryInteractionSignals", 0, null);
            ((C19506byj) interfaceC54340yek).c(null, "DROP TABLE IF EXISTS StoryCorpusSignals", 0, null);
        }
        if (i <= 302 && i2 > 302) {
            ((C19506byj) interfaceC54340yek).c(null, "ALTER TABLE PublisherSnapPage\nADD COLUMN chapterStartTimeMs INTEGER", 0, null);
        }
        if (i <= 303 && i2 > 303) {
            ((C19506byj) interfaceC54340yek).c(null, "CREATE TABLE IF NOT EXISTS DeltaForceSync(\n     _id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n     client_key TEXT NOT NULL,\n     group_key TEXT NOT NULL UNIQUE,\n     sync_token BLOB\n)", 0, null);
            ((C19506byj) interfaceC54340yek).c(null, "CREATE TABLE IF NOT EXISTS FriendDeltaForce(\n    _id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n    _lastModifiedTimestamp INTEGER,\n    username TEXT NOT NULL UNIQUE,\n    userId TEXT,\n\n    displayName TEXT,\n    bitmojiAvatarId TEXT,\n    bitmojiSelfieId TEXT,\n    friendmojis TEXT,\n    friendmojiCategories TEXT, -- comma separated list of friendmoji categories returned by the server.\n    phone TEXT,\n    score INTEGER,\n--      Birthday as a long consisting of two integers representing the month and day.\n    birthday INTEGER,\n    sentToMe INTEGER,\n    receivedFromMe INTEGER,\n    addedTimestamp INTEGER,  -- timestamp WHEN the 'FROM user' added the 'TO user'\n    reverseAddedTimestamp INTEGER,  -- timestamp WHEN the 'TO user' added the 'FROM user'\n\n    lastMessageId INTEGER,\n\n    unreadCount INTEGER,\n    friendmojiString INTEGER,\n    serverDisplayName TEXT,\n\n    streakLength INTEGER,\n    streakExpiration INTEGER,\n    friendLinkType INTEGER,\n\n    storyMuted INTEGER NOT NULL DEFAULT 0,\n\n    isPopular INTEGER NOT NULL DEFAULT 0,\n    isOfficial INTEGER NOT NULL DEFAULT 0,\n\n    isFideliusReady INTEGER NOT NULL DEFAULT 1,\n\n    snapProId TEXT,\n    fideliusKeys BLOB\n)", 0, null);
            ((C19506byj) interfaceC54340yek).c(null, "CREATE TABLE IF NOT EXISTS SuggestedFriendDeltaForce(\n    _id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n    friendRowId INTEGER NOT NULL UNIQUE,\n    userId TEXT NOT NULL UNIQUE,\n\n    suggestionReason TEXT\n)", 0, null);
            ((C19506byj) interfaceC54340yek).c(null, "CREATE TABLE IF NOT EXISTS SuggestedFriendPlacementDeltaForce(\n    _id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n    suggestionPlacement INTEGER,\n    friendRowId INTEGER NOT NULL,\n    rank INTEGER\n)", 0, null);
        }
        if (i <= 304 && i2 > 304) {
            ((C19506byj) interfaceC54340yek).c(null, "DROP VIEW IF EXISTS DiscoverFeedFriendStoriesView", 0, null);
            ((C19506byj) interfaceC54340yek).c(null, "CREATE VIEW IF NOT EXISTS DiscoverFeedFriendStoriesView\nAS SELECT\n    Story._id,\n    Story.storyId AS storyId,\n    FirstUnviewedSnap.snapId AS firstUnviewedSnapId,\n    Friend.userId AS friendUserId,\n    Friend.displayName AS friendDisplayName,\n    Friend.friendLinkType AS friendLinkType,\n    Story.userName AS friendUsername,\n    Story.displayName AS storyDisplayName,\n    Feed.specifiedName AS feedSpecifiedName,\n    Feed.participantString AS feedParticipantString,\n    Friend.bitmojiAvatarId,\n    Friend.bitmojiSelfieId,\n    COALESCE(Friend.storyMuted, 0) AS storyMuted,\n    groupStoryType,\n    Story.viewed AS storyViewed,\n    latestTimeStamp AS storyLatestTimestamp,\n    latestExpirationTimestamp AS storyLatestExpirationTimestamp,\n    rankingId AS storyRankingId,\n    Story.lastSyncRequestId AS lastSyncRequestId\nFROM\nStoryViewActiveSnaps AS Story\nLEFT OUTER JOIN Friend ON Friend.username = Story.userName\nLEFT OUTER JOIN Feed ON Feed.key = Story.userName\nLEFT OUTER JOIN (\n    SELECT * FROM (\n        SELECT\n            StorySnap.storyRowId,\n            Snap.snapId\n        FROM StorySnap\n        LEFT OUTER JOIN Snap ON Snap._id = StorySnap.snapRowId\n        WHERE StorySnap.viewed = 0\n        ORDER BY Snap.timestamp DESC\n    ) GROUP BY storyRowId\n) AS FirstUnviewedSnap ON Story._id = FirstUnviewedSnap.storyRowId\nWHERE (\n        Story.kind = 0 -- StoryKind.FRIEND\n        AND (\n            -- StoryKind.FRIEND could include OUTGOING|FOLLOWING friends. Only show MUTUAL friends.\n            -- If Friend table is not yet populated, use rankingId as a signal for mutual friends.\n            friendLinkType = 0 OR (friendLinkType IS NULL AND rankingId NOT NULL)\n        )\n    ) OR Story.kind = 1", 0, null);
        }
        if (i <= 305 && i2 > 305) {
            ((C19506byj) interfaceC54340yek).c(null, "DROP TABLE IF EXISTS PlaybackSnapView", 0, null);
            ((C19506byj) interfaceC54340yek).c(null, "DROP TABLE IF EXISTS DiscoverFeedStory", 0, null);
            ((C19506byj) interfaceC54340yek).c(null, "DROP TABLE IF EXISTS DiscoverStorySnap", 0, null);
            ((C19506byj) interfaceC54340yek).c(null, "DROP TABLE IF EXISTS PublisherSnapPage", 0, null);
            ((C19506byj) interfaceC54340yek).c(null, "DROP TABLE IF EXISTS PromotedStorySnap", 0, null);
        }
        if (i <= 306 && i2 > 306) {
            ((C19506byj) interfaceC54340yek).c(null, "ALTER TABLE SuggestedFriendPlacement\nADD COLUMN rank INTEGER", 0, null);
            ((C19506byj) interfaceC54340yek).c(null, "CREATE INDEX IF NOT EXISTS suggestion_placement_row_id ON SuggestedFriendPlacement(suggestionPlacement)", 0, null);
        }
        if (i <= 307 && i2 > 307) {
            ((C19506byj) interfaceC54340yek).c(null, "DROP VIEW IF EXISTS FriendsFeedView", 0, null);
            ((C19506byj) interfaceC54340yek).c(null, "CREATE VIEW IF NOT EXISTS FriendsFeedView\nAS SELECT\n    Feed._id,\n    coalesce(Feed.specifiedName, Feed.fitScreenParticipantString, Feed.participantString) AS feedDisplayName,\n    participantsSize,\n    Feed.lastInteractionTimestamp,\n    Feed.displayTimestamp,\n    Feed.displayInteractionType,\n    InteractionMessages.snapId AS notViewedSnapId,\n    Feed.lastInteractionUserId,\n    Feed.clearedTimestamp,\n    Feed.kind,\n    Feed.key,\n    Feed.isArroyo,\n    Friend._id AS friendRowId,\n    Friend.userId AS friendUserId,\n    Friend.friendmojiCategories,\n    Friend.displayName AS friendDisplayName,\n    Friend.username AS friendUsername,\n    Friend.friendmojiString,\n    Friend.streakLength,\n    Friend.streakExpiration,\n    Friend.bitmojiAvatarId,\n    Friend.bitmojiSelfieId,\n    Friend.birthday,\n    Friend.addedTimestamp,\n    Friend.reverseAddedTimestamp,\n    Friend.isOfficial,\n    Friend.friendLinkType,\n    Friend.snapProId,\n    COALESCE(((Friend.storyMuted = 1) OR (Feed.groupStoryMuted = 1)), 0) AS storyMuted,\n    Story._id AS storyRowId,\n    Story.storyId AS storyId,\n    StoryFirstUnviewedSnap.snapId AS storyFirstUnviewedSnapId,\n    Story.viewed AS storyViewed,\n    Story.latestTimeStamp AS storyLatestTimestamp,\n    Story.latestExpirationTimestamp AS storyLatestExpirationTimestamp,\n    Story.rankingId AS storyRankingId,\n    COALESCE(FriendStory.username, '') AS friendStoryUsername,\n    FriendStory.isViewed AS friendStoryIsViewed,\n    FriendStory.latestSnapTimestamp AS friendStoryLatestTimestamp,\n    FriendStory.latestSnapExpirationTimestamp AS friendStoryLatestExpirationTimestamp,\n    COALESCE(FriendStory.firstUnviewedSnapId, '') AS friendStoryFirstUnviewedSnapId,\n    lastInteractionUser.displayName AS displayInteractionUserDisplayName,\n    lastInteractionUser.username AS displayInteractionUserUsername,\n    lastWriterUser.username AS lastWriterUsername,\n    FriendsFeedScore.score AS score\nFROM\nFeed\nLEFT OUTER JOIN Friend AS Friend ON Feed.friendRowId = Friend._id\nLEFT OUTER JOIN Friend AS lastInteractionUser ON Feed.lastInteractionUserId = lastInteractionUser._id\nLEFT OUTER JOIN Friend AS lastWriterUser ON Feed.lastInteractionWriterId = lastWriterUser._id\nLEFT OUTER JOIN StoryViewActiveSnaps AS Story ON Feed.storyRowId = Story._id\nLEFT OUTER JOIN StoryViewFriendStoriesActiveSnaps AS FriendStory ON (Feed.kind = 0 AND Friend.username = FriendStory.username)\nLEFT OUTER JOIN (\n    SELECT * FROM (\n        SELECT\n            StorySnap.storyRowId,\n            Snap.snapId\n        FROM StorySnap\n        LEFT OUTER JOIN Snap ON Snap._id = StorySnap.snapRowId\n        WHERE StorySnap.viewed = 0\n        ORDER BY Snap.timestamp DESC\n    ) GROUP BY storyRowId\n)  AS StoryFirstUnviewedSnap ON Feed.storyRowId = StoryFirstUnviewedSnap.storyRowId\nLEFT OUTER JOIN FriendsFeedScore ON Feed._id = FriendsFeedScore.feedRowId\nLEFT OUTER JOIN InteractionMessages\nON (\n    Feed._id = InteractionMessages.feedRowId\n    AND (\n        -- InteractionMessageType.RECEIVED_NOT_VIEWED_SNAP_WITH_SOUND(2),\n        (Feed.displayInteractionType = 'SNAP_RECEIVED_AND_NOT_VIEWED_SOUND' AND InteractionMessages.messageType = 2)\n        OR\n        -- InteractionMessageType.RECEIVED_NOT_VIEWED_SNAP_WITH_NO_SOUND(3),\n        (Feed.displayInteractionType = 'SNAP_RECEIVED_AND_NOT_VIEWED_NO_SOUND' AND InteractionMessages.messageType = 3)\n    )\n)\n\nWHERE Feed.hidden = 0\n      AND (Feed.lastInteractionTimestamp IS NOT NULL AND Feed.clearedTimestamp <= Feed.sortingTimestamp)", 0, null);
        }
        if (i <= 308 && i2 > 308) {
            ((C19506byj) interfaceC54340yek).c(null, "DROP TABLE IF EXISTS TalkAuthContext", 0, null);
        }
        if (i <= 309 && i2 > 309) {
            ((C19506byj) interfaceC54340yek).c(null, "ALTER TABLE StorySnap\nADD COLUMN boltInfo BLOB DEFAULT NULL", 0, null);
        }
        if (i <= 310 && i2 > 310) {
            ((C19506byj) interfaceC54340yek).c(null, "CREATE TABLE IF NOT EXISTS UploadLocation(\n    _id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n\n    uploadUrl TEXT NOT NULL,\n    expiryInSeconds INTEGER NOT NULL,\n    type TEXT NOT NULL,\n    boltLocation BLOB\n)", 0, null);
        }
        if (i <= 311 && i2 > 311) {
            ((C19506byj) interfaceC54340yek).c(null, "ALTER TABLE Feed\nADD COLUMN numTimesShownChatDeletionExplainer INTEGER DEFAULT 0", 0, null);
        }
        if (i <= 312 && i2 > 312) {
            ((C19506byj) interfaceC54340yek).c(null, "CREATE TABLE IF NOT EXISTS UploadState(\n    _id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n    key TEXT NOT NULL UNIQUE,\n    uploadUrl TEXT NOT NULL,\n    expiryInSeconds INTEGER NOT NULL,\n    type TEXT NOT NULL,\n    boltLocation BLOB,\n    encyptionKey TEXT,\n    encryptionIv TEXT,\n    resumableSessionUrl TEXT\n)", 0, null);
        }
        if (i <= 313 && i2 > 313) {
            ((C19506byj) interfaceC54340yek).c(null, "CREATE TABLE IF NOT EXISTS Saga(\n    _id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n    flashbackId TEXT NOT NULL,\n    conversationId TEXT NOT NULL,\n\n    startEpochSecondInclusive INTEGER NOT NULL,\n    endEpochSecondExclusive INTEGER NOT NULL,\n    expireEpochSecond INTEGER NOT NULL,\n\n    seen INTEGER NOT NULL,\n    displayOrder INTEGER NOT NULL,\n\n    messages BLOB NOT NULL,\n    flashbackType BLOB NOT NULL,\n    UNIQUE(conversationId, flashbackId)\n)", 0, null);
        }
        if (i <= 314 && i2 > 314) {
            ((C19506byj) interfaceC54340yek).c(null, "ALTER TABLE Feed\nADD COLUMN markedForMigration INTEGER NOT NULL DEFAULT 0", 0, null);
        }
        if (i <= 315 && i2 > 315) {
            ((C19506byj) interfaceC54340yek).c(null, "CREATE TABLE IF NOT EXISTS PostSnapAction(\n  _id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n  postSnapAction TEXT NOT NULL,\n  snapId TEXT NOT NULL\n)", 0, null);
        }
        if (i <= 316 && i2 > 316) {
            ((C19506byj) interfaceC54340yek).c(null, "DROP TABLE IF EXISTS PostSnapAction", 0, null);
            ((C19506byj) interfaceC54340yek).c(null, "CREATE TABLE IF NOT EXISTS PostSnapAction(\n    _id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n    snapId TEXT NOT NULL,\n    postSnapAction TEXT NOT NULL\n)", 0, null);
            ((C19506byj) interfaceC54340yek).c(null, "CREATE UNIQUE INDEX IF NOT EXISTS post_snap_action_snap_id ON PostSnapAction(snapId)", 0, null);
        }
        if (i <= 317 && i2 > 317) {
            ((C19506byj) interfaceC54340yek).c(null, "CREATE TABLE IF NOT EXISTS SagaSyncStatus(\n    _id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n    key INTEGER UNIQUE NOT NULL DEFAULT 0,\n    localTimeZoneOffsetMinutes INTEGER NOT NULL,\n    locale TEXT NOT NULL,\n    token BLOB NOT NULL,\n    nextSyncTimeEpochSecond INTEGER NOT NULL\n)", 0, null);
        }
        if (i <= 318 && i2 > 318) {
            ((C19506byj) interfaceC54340yek).c(null, "DROP TABLE IF EXISTS LensStatisticsStorage", 0, null);
        }
        if (i <= 319 && i2 > 319) {
            ((C19506byj) interfaceC54340yek).c(null, "DROP TABLE IF EXISTS PostSnapAction", 0, null);
            ((C19506byj) interfaceC54340yek).c(null, "CREATE TABLE IF NOT EXISTS PostSnapAction(\n    _id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n    snapId TEXT NOT NULL,\n    feedId INTEGER NOT NULL,\n    postSnapAction TEXT NOT NULL\n)", 0, null);
            ((C19506byj) interfaceC54340yek).c(null, "CREATE UNIQUE INDEX IF NOT EXISTS post_snap_action_snap_id ON PostSnapAction(snapId)", 0, null);
            ((C19506byj) interfaceC54340yek).c(null, "CREATE INDEX IF NOT EXISTS post_snap_action_feed_id ON PostSnapAction(feedId)", 0, null);
        }
        if (i <= 320 && i2 > 320) {
            ((C19506byj) interfaceC54340yek).c(null, "ALTER TABLE Charms RENAME TO old_Charms", 0, null);
            ((C19506byj) interfaceC54340yek).c(null, "CREATE TABLE IF NOT EXISTS Charms(\n    _id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n    ownerId TEXT NOT NULL,\n    charmId INTEGER NOT NULL,\n    ownerType INTEGER NOT NULL DEFAULT 0,\n    displayName TEXT NOT NULL,\n    descriptionTemplate TEXT NOT NULL,\n    descriptionVariables TEXT,  -- array of variables\n    descriptionVariablesMetadata TEXT, -- array of variable metadata\n\n    dialogButtonText TEXT,\n    hideable INTEGER NOT NULL DEFAULT 0,\n    displayOrder INTEGER NOT NULL DEFAULT 0,\n    unviewed INTEGER NOT NULL DEFAULT 0,\n\n    staticImageStickerId TEXT NOT NULL,\n\n    solomojiTemplateId TEXT,\n    friendmojiTemplateId TEXT,\n    bitmojiTemplateUser1Id TEXT,\n    bitmojiTemplateUser2Id TEXT,\n\n    locale TEXT NOT NULL,\n    source INTEGER NOT NULL DEFAULT 0,\n    hidden INTEGER NOT NULL DEFAULT 0,\n    isTemplate INTEGER NOT NULL DEFAULT 0,\n\n    displayCount INTEGER\n)", 0, null);
            ((C19506byj) interfaceC54340yek).c(null, "CREATE UNIQUE INDEX IF NOT EXISTS charms_unique_index_owner_id_charm_id_is_template ON Charms(ownerId, charmId, isTemplate)", 0, null);
            ((C19506byj) interfaceC54340yek).c(null, "INSERT INTO Charms\nSELECT\n    _id,\n    ownerId,\n    charmId,\n    ownerType,\n    displayName,\n    descriptionTemplate,\n    descriptionVariables,\n    descriptionVariablesMetadata,\n    dialogButtonText,\n    hideable,\n    displayOrder,\n    unviewed,\n    staticImageStickerId,\n    solomojiTemplateId,\n    friendmojiTemplateId,\n    bitmojiTemplateUser1Id,\n    bitmojiTemplateUser2Id,\n    locale,\n    source,\n    hidden,\n    0, -- this is a new column and default value is 0\n    displayCount\nFROM old_Charms", 0, null);
            ((C19506byj) interfaceC54340yek).c(null, "DROP TABLE old_Charms", 0, null);
        }
        if (i <= 321 && i2 > 321) {
            ((C19506byj) interfaceC54340yek).c(null, "ALTER TABLE Story\nADD COLUMN userId TEXT", 0, null);
            ((C19506byj) interfaceC54340yek).c(null, "CREATE INDEX IF NOT EXISTS story_userId ON Story(userId)", 0, null);
        }
        if (i <= 322 && i2 > 322) {
            ((C19506byj) interfaceC54340yek).c(null, "DROP VIEW IF EXISTS StoryViewActiveSnaps", 0, null);
            ((C19506byj) interfaceC54340yek).c(null, "CREATE VIEW StoryViewActiveSnaps AS\nSELECT\n    Story._id,\n    Story.storyId,\n    Story.userName,\n    Story.userId AS friendStoryPosterUserId,\n    Story.displayName,\n    Story.kind,\n    Story.groupStoryType,\n    Story.rankingId,\n    Story.lastSyncRequestId,\n    StorySnaps.isViewed AS viewed,\n    StorySnaps.latestSnapTimestamp AS latestTimeStamp,\n    StorySnaps.latestSnapExpirationTimestamp AS latestExpirationTimestamp\nFROM Story\nLEFT OUTER JOIN (\n    SELECT\n        StorySnap.storyRowId,\n        MAX(Snap.timestamp) AS latestSnapTimestamp,\n        MAX(StorySnap.expirationTimestamp) AS latestSnapExpirationTimestamp,\n        MIN(StorySnap.viewed) = 1 AS isViewed\n    FROM StorySnap\n    JOIN Snap ON StorySnap.snapRowId = Snap._id\n    GROUP BY StorySnap.storyRowId\n) AS StorySnaps ON Story._id = StorySnaps.storyRowId\nWHERE Story._id IN (SELECT DISTINCT StorySnap.storyRowId FROM StorySnap)", 0, null);
        }
        if (i <= 323 && i2 > 323) {
            ((C19506byj) interfaceC54340yek).c(null, "CREATE VIEW IF NOT EXISTS DiscoverFeedFriendStoriesViewV2\nAS SELECT\n    Story._id,\n    Story.storyId AS storyId,\n    FirstUnviewedSnap.snapId AS firstUnviewedSnapId,\n    Friend.userId AS friendUserId,\n    Friend.displayName AS friendDisplayName,\n    Friend.friendLinkType AS friendLinkType,\n    Story.userName AS friendUsername,\n    Story.friendStoryPosterUserId AS friendStoryPosterUserId,\n    Story.displayName AS storyDisplayName,\n    Feed.specifiedName AS feedSpecifiedName,\n    Feed.participantString AS feedParticipantString,\n    Friend.bitmojiAvatarId,\n    Friend.bitmojiSelfieId,\n    COALESCE(Friend.storyMuted, 0) AS storyMuted,\n    groupStoryType,\n    Story.viewed AS storyViewed,\n    latestTimeStamp AS storyLatestTimestamp,\n    latestExpirationTimestamp AS storyLatestExpirationTimestamp,\n    rankingId AS storyRankingId,\n    Story.lastSyncRequestId AS lastSyncRequestId\nFROM\nStoryViewActiveSnaps AS Story\nLEFT OUTER JOIN Friend ON Friend.userId = Story.friendStoryPosterUserId\nLEFT OUTER JOIN Feed ON Feed.friendRowId = Friend._id\nLEFT OUTER JOIN (\n    SELECT * FROM (\n        SELECT\n            StorySnap.storyRowId,\n            Snap.snapId\n        FROM StorySnap\n        LEFT OUTER JOIN Snap ON Snap._id = StorySnap.snapRowId\n        WHERE StorySnap.viewed = 0\n        ORDER BY Snap.timestamp DESC\n    ) GROUP BY storyRowId\n) AS FirstUnviewedSnap ON Story._id = FirstUnviewedSnap.storyRowId\nWHERE (\n        Story.kind = 0 -- StoryKind.FRIEND\n        AND (\n            -- StoryKind.FRIEND could include OUTGOING|FOLLOWING friends. Only show MUTUAL friends.\n            -- If Friend table is not yet populated, use rankingId as a signal for mutual friends.\n            friendLinkType = 0 OR (friendLinkType IS NULL AND rankingId NOT NULL)\n        )\n    ) OR Story.kind = 1", 0, null);
            ((C19506byj) interfaceC54340yek).c(null, "ALTER TABLE StorySnap\nADD COLUMN userId TEXT", 0, null);
            ((C19506byj) interfaceC54340yek).c(null, "CREATE INDEX IF NOT EXISTS story_snap_userId ON StorySnap(userId)", 0, null);
        }
        if (i <= 324 && i2 > 324) {
            ((C19506byj) interfaceC54340yek).c(null, "DELETE FROM StorySyncState", 0, null);
            ((C19506byj) interfaceC54340yek).c(null, "UPDATE Story\nSET lastSyncMaxSequence = NULL", 0, null);
        }
        if (i <= 325 && i2 > 325) {
            ((C19506byj) interfaceC54340yek).c(null, "DROP TABLE IF EXISTS ChatAttachments", 0, null);
        }
        if (i > 326 || i2 <= 326) {
            str = "DROP TABLE IF EXISTS PostSnapAction";
            num = null;
        } else {
            str = "DROP TABLE IF EXISTS PostSnapAction";
            num = null;
            ((C19506byj) interfaceC54340yek).c(null, "ALTER TABLE Feed RENAME TO old_Feed", 0, null);
            ((C19506byj) interfaceC54340yek).c(null, "CREATE TABLE IF NOT EXISTS Feed (\n    _id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n    key TEXT NOT NULL UNIQUE,\n    specifiedName TEXT,\n    participantString TEXT,\n    fitScreenParticipantString TEXT,\n    participantsSize INTEGER NOT NULL DEFAULT 1,\n    friendRowId INTEGER,\n    iterToken TEXT,\n    displayTimestamp INTEGER NOT NULL DEFAULT 0,\n    displayInteractionType TEXT,\n    sortingTimestamp INTEGER NOT NULL DEFAULT 0,\n    groupCreationTimestamp INTEGER DEFAULT 0,\n    lastInteractionTimestamp INTEGER DEFAULT 0,\n    lastInteractionUserId INTEGER,\n    lastInteractionWriterId INTEGER,\n    myReceivedSnapReleaseTimestamp INTEGER NOT NULL DEFAULT 0,\n    mySentSnapReleaseTimestamp INTEGER NOT NULL DEFAULT 0,\n    clearedTimestamp INTEGER DEFAULT 0,\n    storySkipCount INTEGER NOT NULL DEFAULT 0,\n    lastReadTimestamp INTEGER,\n    lastReader TEXT,\n    lastWriteTimestamp INTEGER,\n    lastWriteType TEXT,\n    lastWriter TEXT,\n    myLastReadTimestamp INTEGER,\n    friendLastReadTimestamp INTEGER,\n    lastSnapType INTEGER,\n    storyRowId INTEGER,\n    groupMobId TEXT,\n    groupStoryMuted INTEGER DEFAULT 0,\n    authToken BLOB,\n    laterContentExists INTEGER NOT NULL DEFAULT 0,\n    groupSyncContentType INTEGER NOT NULL DEFAULT 0,\n    groupVersion INTEGER NOT NULL DEFAULT 0,\n    messageRetentionInMinutes INTEGER DEFAULT NULL, -- Modifying messageRetentionInMinutes to be nullable.\n    kind Integer NOT NULL,\n    notificationMuted INTEGER DEFAULT 0,\n    cognacNotificationMuted INTEGER NOT NULL DEFAULT 0,\n    groupCreationRequestId TEXT UNIQUE,\n    isTemporaryGroup INTEGER NOT NULL DEFAULT 0,\n    isArroyo INTEGER NOT NULL DEFAULT 0,\n    hidden INTEGER DEFAULT 0,\n    sourcePage INTEGER NOT NULL DEFAULT 0,\n    arroyoMigrationState INTEGER NOT NULL DEFAULT 0,\n    retentionPromptProfileCardHasBeenDismissed INTEGER NOT NULL DEFAULT 0,\n    retentionPromptChatCardHasBeenDismissed INTEGER NOT NULL DEFAULT 0,\n    userSavedTimestamps TEXT,\n    numTimesShownChatDeletionExplainer INTEGER DEFAULT 0,\n    markedForMigration INTEGER NOT NULL DEFAULT 0\n)", 0, null);
            ((C19506byj) interfaceC54340yek).c(null, "DROP INDEX IF EXISTS feed_timestamp", 0, null);
            ((C19506byj) interfaceC54340yek).c(null, "DROP INDEX IF EXISTS feed_friendRowId", 0, null);
            ((C19506byj) interfaceC54340yek).c(null, "CREATE INDEX IF NOT EXISTS feed_timestamp ON Feed(lastInteractionTimestamp DESC)", 0, null);
            ((C19506byj) interfaceC54340yek).c(null, "CREATE INDEX IF NOT EXISTS feed_friendRowId ON Feed(friendRowId)", 0, null);
            ((C19506byj) interfaceC54340yek).c(null, "INSERT INTO Feed\nSELECT\n    _id,\n    key,\n    specifiedName,\n    participantString,\n    fitScreenParticipantString,\n    participantsSize,\n    friendRowId,\n    iterToken,\n    displayTimestamp,\n    displayInteractionType,\n    sortingTimestamp,\n    groupCreationTimestamp,\n    lastInteractionTimestamp,\n    lastInteractionUserId,\n    lastInteractionWriterId,\n    myReceivedSnapReleaseTimestamp,\n    mySentSnapReleaseTimestamp,\n    clearedTimestamp,\n    storySkipCount,\n    lastReadTimestamp,\n    lastReader,\n    lastWriteTimestamp,\n    lastWriteType,\n    lastWriter,\n    myLastReadTimestamp,\n    friendLastReadTimestamp,\n    lastSnapType,\n    storyRowId,\n    groupMobId,\n    groupStoryMuted,\n    authToken,\n    laterContentExists,\n    groupSyncContentType,\n    groupVersion,\n    messageRetentionInMinutes,\n    kind,\n    notificationMuted,\n    cognacNotificationMuted,\n    groupCreationRequestId,\n    isTemporaryGroup,\n    isArroyo,\n    hidden,\n    sourcePage,\n    arroyoMigrationState,\n    retentionPromptProfileCardHasBeenDismissed,\n    retentionPromptChatCardHasBeenDismissed,\n    userSavedTimestamps,\n    numTimesShownChatDeletionExplainer,\n    markedForMigration\nFROM old_Feed", 0, null);
            ((C19506byj) interfaceC54340yek).c(null, "DROP TABLE old_Feed", 0, null);
        }
        if (i <= 327 && i2 > 327) {
            ((C19506byj) interfaceC54340yek).c(num, "UPDATE Feed\nSET messageRetentionInMinutes = NULL\nWHERE messageRetentionInMinutes = 0", 0, null);
        }
        if (i > 328 || i2 <= 328) {
            str2 = "DROP VIEW IF EXISTS StoryViewActiveSnaps";
            num2 = null;
        } else {
            num2 = null;
            ((C19506byj) interfaceC54340yek).c(null, "DROP VIEW IF EXISTS FriendsFeedView", 0, null);
            ((C19506byj) interfaceC54340yek).c(null, "DROP VIEW IF EXISTS DiscoverFeedFriendStoriesViewV2", 0, null);
            ((C19506byj) interfaceC54340yek).c(null, "DROP VIEW IF EXISTS DiscoverFeedFriendStoriesView", 0, null);
            str2 = "DROP VIEW IF EXISTS StoryViewActiveSnaps";
            ((C19506byj) interfaceC54340yek).c(null, "CREATE VIEW IF NOT EXISTS FriendsFeedView\nAS SELECT\n    Feed._id,\n    coalesce(Feed.specifiedName, Feed.fitScreenParticipantString, Feed.participantString) AS feedDisplayName,\n    participantsSize,\n    Feed.lastInteractionTimestamp,\n    Feed.displayTimestamp,\n    Feed.displayInteractionType,\n    InteractionMessages.snapId AS notViewedSnapId,\n    Feed.lastInteractionUserId,\n    Feed.clearedTimestamp,\n    Feed.kind,\n    Feed.key,\n    Feed.isArroyo,\n    Friend._id AS friendRowId,\n    Friend.userId AS friendUserId,\n    Friend.friendmojiCategories,\n    Friend.displayName AS friendDisplayName,\n    Friend.username AS friendUsername,\n    Friend.friendmojiString,\n    Friend.streakLength,\n    Friend.streakExpiration,\n    Friend.bitmojiAvatarId,\n    Friend.bitmojiSelfieId,\n    Friend.birthday,\n    Friend.addedTimestamp,\n    Friend.reverseAddedTimestamp,\n    Friend.isOfficial,\n    Friend.friendLinkType,\n    Friend.snapProId,\n    COALESCE(((Friend.storyMuted = 1) OR (Feed.groupStoryMuted = 1)), 0) AS storyMuted,\n    Story._id AS storyRowId,\n    Story.storyId AS storyId,\n    StoryFirstUnviewedSnap.snapId AS storyFirstUnviewedSnapId,\n    Story.viewed AS storyViewed,\n    Story.latestTimeStamp AS storyLatestTimestamp,\n    Story.latestExpirationTimestamp AS storyLatestExpirationTimestamp,\n    Story.rankingId AS storyRankingId,\n    COALESCE(FriendStory.username, '') AS friendStoryUsername,\n    FriendStory.isViewed AS friendStoryIsViewed,\n    FriendStory.latestSnapTimestamp AS friendStoryLatestTimestamp,\n    FriendStory.latestSnapExpirationTimestamp AS friendStoryLatestExpirationTimestamp,\n    COALESCE(FriendStory.firstUnviewedSnapId, '') AS friendStoryFirstUnviewedSnapId,\n    lastInteractionUser.displayName AS displayInteractionUserDisplayName,\n    lastInteractionUser.username AS displayInteractionUserUsername,\n    lastWriterUser.username AS lastWriterUsername,\n    FriendsFeedScore.score AS score\nFROM\nFeed\nLEFT OUTER JOIN Friend AS Friend ON Feed.friendRowId = Friend._id\nLEFT OUTER JOIN Friend AS lastInteractionUser ON Feed.lastInteractionUserId = lastInteractionUser._id\nLEFT OUTER JOIN Friend AS lastWriterUser ON Feed.lastInteractionWriterId = lastWriterUser._id\nLEFT OUTER JOIN StoryViewActiveSnaps AS Story ON Feed.storyRowId = Story._id\nLEFT OUTER JOIN StoryViewFriendStoriesActiveSnaps AS FriendStory ON (Feed.kind = 0 AND Friend.username = FriendStory.username)\nLEFT OUTER JOIN (\n    SELECT * FROM (\n        SELECT\n            StorySnap.storyRowId,\n            Snap.snapId\n        FROM StorySnap\n        LEFT OUTER JOIN Snap ON Snap._id = StorySnap.snapRowId\n        WHERE StorySnap.viewed = 0\n        ORDER BY Snap.timestamp DESC\n    ) GROUP BY storyRowId\n)  AS StoryFirstUnviewedSnap ON Feed.storyRowId = StoryFirstUnviewedSnap.storyRowId\nLEFT OUTER JOIN FriendsFeedScore ON Feed._id = FriendsFeedScore.feedRowId\nLEFT OUTER JOIN InteractionMessages\nON (\n    Feed._id = InteractionMessages.feedRowId\n    AND (\n        -- InteractionMessageType.RECEIVED_NOT_VIEWED_SNAP_WITH_SOUND(2),\n        (Feed.displayInteractionType = 'SNAP_RECEIVED_AND_NOT_VIEWED_SOUND' AND InteractionMessages.messageType = 2)\n        OR\n        -- InteractionMessageType.RECEIVED_NOT_VIEWED_SNAP_WITH_NO_SOUND(3),\n        (Feed.displayInteractionType = 'SNAP_RECEIVED_AND_NOT_VIEWED_NO_SOUND' AND InteractionMessages.messageType = 3)\n    )\n)\nWHERE Feed.hidden = 0\n      AND (Feed.lastInteractionTimestamp IS NOT NULL AND Feed.clearedTimestamp <= Feed.sortingTimestamp)", 0, null);
            ((C19506byj) interfaceC54340yek).c(null, "CREATE VIEW IF NOT EXISTS DiscoverFeedFriendStoriesViewV2\nAS SELECT\n    Story._id,\n    Story.storyId AS storyId,\n    FirstUnviewedSnap.snapId AS firstUnviewedSnapId,\n    Friend.userId AS friendUserId,\n    Friend.displayName AS friendDisplayName,\n    Friend.friendLinkType AS friendLinkType,\n    Story.userName AS friendUsername,\n    Story.friendStoryPosterUserId AS friendStoryPosterUserId,\n    Story.displayName AS storyDisplayName,\n    Feed.specifiedName AS feedSpecifiedName,\n    Feed.participantString AS feedParticipantString,\n    Friend.bitmojiAvatarId,\n    Friend.bitmojiSelfieId,\n    COALESCE(Friend.storyMuted, 0) AS storyMuted,\n    groupStoryType,\n    Story.viewed AS storyViewed,\n    latestTimeStamp AS storyLatestTimestamp,\n    latestExpirationTimestamp AS storyLatestExpirationTimestamp,\n    rankingId AS storyRankingId,\n    Story.lastSyncRequestId AS lastSyncRequestId\nFROM\nStoryViewActiveSnaps AS Story\nLEFT OUTER JOIN Friend ON Friend.userId = Story.friendStoryPosterUserId\nLEFT OUTER JOIN Feed ON Feed.friendRowId = Friend._id\nLEFT OUTER JOIN (\n    SELECT * FROM (\n        SELECT\n            StorySnap.storyRowId,\n            Snap.snapId\n        FROM StorySnap\n        LEFT OUTER JOIN Snap ON Snap._id = StorySnap.snapRowId\n        WHERE StorySnap.viewed = 0\n        ORDER BY Snap.timestamp DESC\n    ) GROUP BY storyRowId\n) AS FirstUnviewedSnap ON Story._id = FirstUnviewedSnap.storyRowId\nWHERE (\n        Story.kind = 0 -- StoryKind.FRIEND\n        AND (\n            -- StoryKind.FRIEND could include OUTGOING|FOLLOWING friends. Only show MUTUAL friends.\n            -- If Friend table is not yet populated, use rankingId as a signal for mutual friends.\n            friendLinkType = 0 OR (friendLinkType IS NULL AND rankingId NOT NULL)\n        )\n    ) OR Story.kind = 1", 0, null);
            ((C19506byj) interfaceC54340yek).c(null, "CREATE VIEW IF NOT EXISTS DiscoverFeedFriendStoriesView\nAS SELECT\n    Story._id,\n    Story.storyId AS storyId,\n    FirstUnviewedSnap.snapId AS firstUnviewedSnapId,\n    Friend.userId AS friendUserId,\n    Friend.displayName AS friendDisplayName,\n    Friend.friendLinkType AS friendLinkType,\n    Story.userName AS friendUsername,\n    Story.displayName AS storyDisplayName,\n    Feed.specifiedName AS feedSpecifiedName,\n    Feed.participantString AS feedParticipantString,\n    Friend.bitmojiAvatarId,\n    Friend.bitmojiSelfieId,\n    COALESCE(Friend.storyMuted, 0) AS storyMuted,\n    groupStoryType,\n    Story.viewed AS storyViewed,\n    latestTimeStamp AS storyLatestTimestamp,\n    latestExpirationTimestamp AS storyLatestExpirationTimestamp,\n    rankingId AS storyRankingId,\n    Story.lastSyncRequestId AS lastSyncRequestId\nFROM\nStoryViewActiveSnaps AS Story\nLEFT OUTER JOIN Friend ON Friend.username = Story.userName\nLEFT OUTER JOIN Feed ON Feed.key = Story.userName\nLEFT OUTER JOIN (\n    SELECT * FROM (\n        SELECT\n            StorySnap.storyRowId,\n            Snap.snapId\n        FROM StorySnap\n        LEFT OUTER JOIN Snap ON Snap._id = StorySnap.snapRowId\n        WHERE StorySnap.viewed = 0\n        ORDER BY Snap.timestamp DESC\n    ) GROUP BY storyRowId\n) AS FirstUnviewedSnap ON Story._id = FirstUnviewedSnap.storyRowId\nWHERE (\n        Story.kind = 0 -- StoryKind.FRIEND\n        AND (\n            -- StoryKind.FRIEND could include OUTGOING|FOLLOWING friends. Only show MUTUAL friends.\n            -- If Friend table is not yet populated, use rankingId as a signal for mutual friends.\n            friendLinkType = 0 OR (friendLinkType IS NULL AND rankingId NOT NULL)\n        )\n    ) OR Story.kind = 1", 0, null);
        }
        if (i <= 329 && i2 > 329) {
            ((C19506byj) interfaceC54340yek).c(num2, "DROP VIEW IF EXISTS FriendsFeedView", 0, null);
            ((C19506byj) interfaceC54340yek).c(num2, "CREATE VIEW IF NOT EXISTS FriendsFeedView\nAS SELECT\n    Feed._id,\n    coalesce(Feed.specifiedName, Feed.fitScreenParticipantString, Feed.participantString) AS feedDisplayName,\n    participantsSize,\n    Feed.lastInteractionTimestamp,\n    Feed.displayTimestamp,\n    Feed.displayInteractionType,\n    InteractionMessages.snapId AS notViewedSnapId,\n    Feed.lastInteractionUserId,\n    Feed.clearedTimestamp,\n    Feed.kind,\n    Feed.key,\n    Feed.isArroyo,\n    Friend._id AS friendRowId,\n    Friend.userId AS friendUserId,\n    Friend.friendmojiCategories,\n    Friend.displayName AS friendDisplayName,\n    Friend.username AS friendUsername,\n    Friend.friendmojiString,\n    Friend.streakLength,\n    Friend.streakExpiration,\n    Friend.bitmojiAvatarId,\n    Friend.bitmojiSelfieId,\n    Friend.birthday,\n    Friend.addedTimestamp,\n    Friend.reverseAddedTimestamp,\n    Friend.isOfficial,\n    Friend.friendLinkType,\n    Friend.snapProId,\n    FriendStory.username AS friendStoryId,\n    FriendStory.isViewed AS friendStoryIsViewed,\n    FriendStory.latestSnapTimestamp AS friendStoryLatestTimestamp,\n    FriendStory.latestSnapExpirationTimestamp AS friendStoryLatestExpirationTimestamp,\n    FriendStory.firstUnviewedSnapId AS friendStoryFirstUnviewedSnapId,\n    Friend.storyMuted AS friendStoryMuted,\n    lastInteractionUser.displayName AS displayInteractionUserDisplayName,\n    lastInteractionUser.username AS displayInteractionUserUsername,\n    lastWriterUser.username AS lastWriterUsername,\n    FriendsFeedScore.score AS score\nFROM\nFeed\nLEFT OUTER JOIN Friend AS Friend ON Feed.friendRowId = Friend._id\nLEFT OUTER JOIN Friend AS lastInteractionUser ON Feed.lastInteractionUserId = lastInteractionUser._id\nLEFT OUTER JOIN Friend AS lastWriterUser ON Feed.lastInteractionWriterId = lastWriterUser._id\nLEFT OUTER JOIN StoryViewFriendStoriesActiveSnaps AS FriendStory ON (Feed.kind = 0 AND Friend.username = FriendStory.username)\nLEFT OUTER JOIN FriendsFeedScore ON Feed._id = FriendsFeedScore.feedRowId\nLEFT OUTER JOIN InteractionMessages\nON (\n    Feed._id = InteractionMessages.feedRowId\n    AND (\n        -- InteractionMessageType.RECEIVED_NOT_VIEWED_SNAP_WITH_SOUND(2),\n        (Feed.displayInteractionType = 'SNAP_RECEIVED_AND_NOT_VIEWED_SOUND' AND InteractionMessages.messageType = 2)\n        OR\n        -- InteractionMessageType.RECEIVED_NOT_VIEWED_SNAP_WITH_NO_SOUND(3),\n        (Feed.displayInteractionType = 'SNAP_RECEIVED_AND_NOT_VIEWED_NO_SOUND' AND InteractionMessages.messageType = 3)\n    )\n)\nWHERE Feed.hidden = 0\n      AND (Feed.lastInteractionTimestamp IS NOT NULL AND Feed.clearedTimestamp <= Feed.sortingTimestamp)", 0, null);
        }
        if (i <= 330 && i2 > 330) {
            ((C19506byj) interfaceC54340yek).c(num2, "ALTER TABLE Unlockables ADD COLUMN eligibleForLensExplorer INTEGER NOT NULL DEFAULT 0", 0, null);
        }
        if (i > 331 || i2 <= 331) {
            str3 = "CREATE INDEX IF NOT EXISTS story_snap_story_row_id ON StorySnap(storyRowId)";
            num3 = null;
        } else {
            num3 = null;
            ((C19506byj) interfaceC54340yek).c(null, "PRAGMA legacy_alter_table=1", 0, null);
            str3 = "CREATE INDEX IF NOT EXISTS story_snap_story_row_id ON StorySnap(storyRowId)";
            ((C19506byj) interfaceC54340yek).c(null, "CREATE TABLE IF NOT EXISTS new_Feed (\n    _id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n    key TEXT NOT NULL UNIQUE,\n    specifiedName TEXT,\n    participantString TEXT,\n    fitScreenParticipantString TEXT,\n    participantsSize INTEGER NOT NULL DEFAULT 1,\n    friendRowId INTEGER,\n    iterToken TEXT,\n    displayTimestamp INTEGER NOT NULL DEFAULT 0,\n    displayInteractionType TEXT,\n    sortingTimestamp INTEGER NOT NULL DEFAULT 0,\n    groupCreationTimestamp INTEGER DEFAULT 0,\n    lastInteractionTimestamp INTEGER DEFAULT 0,\n    lastInteractionUserId INTEGER,\n    lastInteractionWriterId INTEGER,\n    myReceivedSnapReleaseTimestamp INTEGER NOT NULL DEFAULT 0,\n    mySentSnapReleaseTimestamp INTEGER NOT NULL DEFAULT 0,\n    clearedTimestamp INTEGER DEFAULT 0,\n    storySkipCount INTEGER NOT NULL DEFAULT 0,\n    lastReadTimestamp INTEGER,\n    lastReader TEXT,\n    lastWriteTimestamp INTEGER,\n    lastWriteType TEXT,\n    lastWriter TEXT,\n    myLastReadTimestamp INTEGER,\n    friendLastReadTimestamp INTEGER,\n    lastSnapType INTEGER,\n    authToken BLOB,\n    laterContentExists INTEGER NOT NULL DEFAULT 0,\n    groupSyncContentType INTEGER NOT NULL DEFAULT 0,\n    groupVersion INTEGER NOT NULL DEFAULT 0,\n    messageRetentionInMinutes INTEGER DEFAULT NULL, -- Modifying messageRetentionInMinutes to be nullable.\n    kind Integer NOT NULL,\n    notificationMuted INTEGER DEFAULT 0,\n    cognacNotificationMuted INTEGER NOT NULL DEFAULT 0,\n    groupCreationRequestId TEXT UNIQUE,\n    isTemporaryGroup INTEGER NOT NULL DEFAULT 0,\n    isArroyo INTEGER NOT NULL DEFAULT 0,\n    hidden INTEGER DEFAULT 0,\n    sourcePage INTEGER NOT NULL DEFAULT 0,\n    arroyoMigrationState INTEGER NOT NULL DEFAULT 0,\n    retentionPromptProfileCardHasBeenDismissed INTEGER NOT NULL DEFAULT 0,\n    retentionPromptChatCardHasBeenDismissed INTEGER NOT NULL DEFAULT 0,\n    userSavedTimestamps TEXT,\n    numTimesShownChatDeletionExplainer INTEGER DEFAULT 0,\n    markedForMigration INTEGER NOT NULL DEFAULT 0\n)", 0, null);
            ((C19506byj) interfaceC54340yek).c(null, "INSERT INTO new_Feed\nSELECT\n    _id,\n    key,\n    specifiedName,\n    participantString,\n    fitScreenParticipantString,\n    participantsSize,\n    friendRowId,\n    iterToken,\n    displayTimestamp,\n    displayInteractionType,\n    sortingTimestamp,\n    groupCreationTimestamp,\n    lastInteractionTimestamp,\n    lastInteractionUserId,\n    lastInteractionWriterId,\n    myReceivedSnapReleaseTimestamp,\n    mySentSnapReleaseTimestamp,\n    clearedTimestamp,\n    storySkipCount,\n    lastReadTimestamp,\n    lastReader,\n    lastWriteTimestamp,\n    lastWriteType,\n    lastWriter,\n    myLastReadTimestamp,\n    friendLastReadTimestamp,\n    lastSnapType,\n    authToken,\n    laterContentExists,\n    groupSyncContentType,\n    groupVersion,\n    messageRetentionInMinutes,\n    kind,\n    notificationMuted,\n    cognacNotificationMuted,\n    groupCreationRequestId,\n    isTemporaryGroup,\n    isArroyo,\n    hidden,\n    sourcePage,\n    arroyoMigrationState,\n    retentionPromptProfileCardHasBeenDismissed,\n    retentionPromptChatCardHasBeenDismissed,\n    userSavedTimestamps,\n    numTimesShownChatDeletionExplainer,\n    markedForMigration\nFROM Feed", 0, null);
            ((C19506byj) interfaceC54340yek).c(null, "DROP TABLE Feed", 0, null);
            ((C19506byj) interfaceC54340yek).c(null, "ALTER TABLE new_Feed RENAME TO Feed", 0, null);
            ((C19506byj) interfaceC54340yek).c(null, "CREATE INDEX IF NOT EXISTS feed_timestamp ON Feed(lastInteractionTimestamp DESC)", 0, null);
            ((C19506byj) interfaceC54340yek).c(null, "CREATE INDEX IF NOT EXISTS feed_friendRowId ON Feed(friendRowId)", 0, null);
        }
        if (i <= 332 && i2 > 332) {
            ((C19506byj) interfaceC54340yek).c(num3, "DROP VIEW IF EXISTS FriendsFeedView", 0, null);
            ((C19506byj) interfaceC54340yek).c(num3, "DROP VIEW IF EXISTS DiscoverFeedFriendStoriesViewV2", 0, null);
            ((C19506byj) interfaceC54340yek).c(num3, "DROP VIEW IF EXISTS DiscoverFeedFriendStoriesView", 0, null);
            ((C19506byj) interfaceC54340yek).c(num3, "CREATE VIEW IF NOT EXISTS FriendsFeedView\nAS SELECT\n    Feed._id,\n    coalesce(Feed.specifiedName, Feed.fitScreenParticipantString, Feed.participantString) AS feedDisplayName,\n    participantsSize,\n    Feed.lastInteractionTimestamp,\n    Feed.displayTimestamp,\n    Feed.displayInteractionType,\n    InteractionMessages.snapId AS notViewedSnapId,\n    Feed.lastInteractionUserId,\n    Feed.clearedTimestamp,\n    Feed.kind,\n    Feed.key,\n    Feed.isArroyo,\n    Friend._id AS friendRowId,\n    Friend.userId AS friendUserId,\n    Friend.friendmojiCategories,\n    Friend.displayName AS friendDisplayName,\n    Friend.username AS friendUsername,\n    Friend.friendmojiString,\n    Friend.streakLength,\n    Friend.streakExpiration,\n    Friend.bitmojiAvatarId,\n    Friend.bitmojiSelfieId,\n    Friend.birthday,\n    Friend.addedTimestamp,\n    Friend.reverseAddedTimestamp,\n    Friend.isOfficial,\n    Friend.friendLinkType,\n    Friend.snapProId,\n    FriendStory.username AS friendStoryId,\n    FriendStory.isViewed AS friendStoryIsViewed,\n    FriendStory.latestSnapTimestamp AS friendStoryLatestTimestamp,\n    FriendStory.latestSnapExpirationTimestamp AS friendStoryLatestExpirationTimestamp,\n    FriendStory.firstUnviewedSnapId AS friendStoryFirstUnviewedSnapId,\n    Friend.storyMuted AS friendStoryMuted,\n    lastInteractionUser.displayName AS displayInteractionUserDisplayName,\n    lastInteractionUser.username AS displayInteractionUserUsername,\n    lastWriterUser.username AS lastWriterUsername,\n    FriendsFeedScore.score AS score\nFROM\nFeed\nLEFT OUTER JOIN Friend AS Friend ON Feed.friendRowId = Friend._id\nLEFT OUTER JOIN Friend AS lastInteractionUser ON Feed.lastInteractionUserId = lastInteractionUser._id\nLEFT OUTER JOIN Friend AS lastWriterUser ON Feed.lastInteractionWriterId = lastWriterUser._id\nLEFT OUTER JOIN StoryViewFriendStoriesActiveSnaps AS FriendStory ON (Feed.kind = 0 AND Friend.username = FriendStory.username)\nLEFT OUTER JOIN FriendsFeedScore ON Feed._id = FriendsFeedScore.feedRowId\nLEFT OUTER JOIN InteractionMessages\nON (\n    Feed._id = InteractionMessages.feedRowId\n    AND (\n        -- InteractionMessageType.RECEIVED_NOT_VIEWED_SNAP_WITH_SOUND(2),\n        (Feed.displayInteractionType = 'SNAP_RECEIVED_AND_NOT_VIEWED_SOUND' AND InteractionMessages.messageType = 2)\n        OR\n        -- InteractionMessageType.RECEIVED_NOT_VIEWED_SNAP_WITH_NO_SOUND(3),\n        (Feed.displayInteractionType = 'SNAP_RECEIVED_AND_NOT_VIEWED_NO_SOUND' AND InteractionMessages.messageType = 3)\n    )\n)\nWHERE Feed.hidden = 0\n      AND (Feed.lastInteractionTimestamp IS NOT NULL AND Feed.clearedTimestamp <= Feed.sortingTimestamp)", 0, null);
            ((C19506byj) interfaceC54340yek).c(num3, "CREATE VIEW IF NOT EXISTS DiscoverFeedFriendStoriesViewV2\nAS SELECT\n    Story._id,\n    Story.storyId AS storyId,\n    FirstUnviewedSnap.snapId AS firstUnviewedSnapId,\n    Friend.userId AS friendUserId,\n    Friend.displayName AS friendDisplayName,\n    Friend.friendLinkType AS friendLinkType,\n    Story.userName AS friendUsername,\n    Story.friendStoryPosterUserId AS friendStoryPosterUserId,\n    Story.displayName AS storyDisplayName,\n    Feed.specifiedName AS feedSpecifiedName,\n    Feed.participantString AS feedParticipantString,\n    Friend.bitmojiAvatarId,\n    Friend.bitmojiSelfieId,\n    COALESCE(Friend.storyMuted, 0) AS storyMuted,\n    groupStoryType,\n    Story.viewed AS storyViewed,\n    latestTimeStamp AS storyLatestTimestamp,\n    latestExpirationTimestamp AS storyLatestExpirationTimestamp,\n    rankingId AS storyRankingId,\n    Story.lastSyncRequestId AS lastSyncRequestId\nFROM\nStoryViewActiveSnaps AS Story\nLEFT OUTER JOIN Friend ON Friend.userId = Story.friendStoryPosterUserId\nLEFT OUTER JOIN Feed ON Feed.friendRowId = Friend._id\nLEFT OUTER JOIN (\n    SELECT * FROM (\n        SELECT\n            StorySnap.storyRowId,\n            Snap.snapId\n        FROM StorySnap\n        LEFT OUTER JOIN Snap ON Snap._id = StorySnap.snapRowId\n        WHERE StorySnap.viewed = 0\n        ORDER BY Snap.timestamp DESC\n    ) GROUP BY storyRowId\n) AS FirstUnviewedSnap ON Story._id = FirstUnviewedSnap.storyRowId\nWHERE (\n        Story.kind = 0 -- StoryKind.FRIEND\n        AND (\n            -- StoryKind.FRIEND could include OUTGOING|FOLLOWING friends. Only show MUTUAL friends.\n            -- If Friend table is not yet populated, use rankingId as a signal for mutual friends.\n            friendLinkType = 0 OR (friendLinkType IS NULL AND rankingId NOT NULL)\n        )\n    ) OR Story.kind = 1", 0, null);
            ((C19506byj) interfaceC54340yek).c(num3, "CREATE VIEW IF NOT EXISTS DiscoverFeedFriendStoriesView\nAS SELECT\n    Story._id,\n    Story.storyId AS storyId,\n    FirstUnviewedSnap.snapId AS firstUnviewedSnapId,\n    Friend.userId AS friendUserId,\n    Friend.displayName AS friendDisplayName,\n    Friend.friendLinkType AS friendLinkType,\n    Story.userName AS friendUsername,\n    Story.displayName AS storyDisplayName,\n    Feed.specifiedName AS feedSpecifiedName,\n    Feed.participantString AS feedParticipantString,\n    Friend.bitmojiAvatarId,\n    Friend.bitmojiSelfieId,\n    COALESCE(Friend.storyMuted, 0) AS storyMuted,\n    groupStoryType,\n    Story.viewed AS storyViewed,\n    latestTimeStamp AS storyLatestTimestamp,\n    latestExpirationTimestamp AS storyLatestExpirationTimestamp,\n    rankingId AS storyRankingId,\n    Story.lastSyncRequestId AS lastSyncRequestId\nFROM\nStoryViewActiveSnaps AS Story\nLEFT OUTER JOIN Friend ON Friend.username = Story.userName\nLEFT OUTER JOIN Feed ON Feed.key = Story.userName\nLEFT OUTER JOIN (\n    SELECT * FROM (\n        SELECT\n            StorySnap.storyRowId,\n            Snap.snapId\n        FROM StorySnap\n        LEFT OUTER JOIN Snap ON Snap._id = StorySnap.snapRowId\n        WHERE StorySnap.viewed = 0\n        ORDER BY Snap.timestamp DESC\n    ) GROUP BY storyRowId\n) AS FirstUnviewedSnap ON Story._id = FirstUnviewedSnap.storyRowId\nWHERE (\n        Story.kind = 0 -- StoryKind.FRIEND\n        AND (\n            -- StoryKind.FRIEND could include OUTGOING|FOLLOWING friends. Only show MUTUAL friends.\n            -- If Friend table is not yet populated, use rankingId as a signal for mutual friends.\n            friendLinkType = 0 OR (friendLinkType IS NULL AND rankingId NOT NULL)\n        )\n    ) OR Story.kind = 1", 0, null);
        }
        if (i <= 333 && i2 > 333) {
            ((C19506byj) interfaceC54340yek).c(num3, "DROP VIEW DiscoverFeedFriendStoriesViewV2", 0, null);
            ((C19506byj) interfaceC54340yek).c(num3, "DROP VIEW DiscoverFeedFriendStoriesView", 0, null);
            ((C19506byj) interfaceC54340yek).c(num3, "CREATE VIEW IF NOT EXISTS DiscoverFeedFriendStoriesViewV2\nAS SELECT\n    Story._id,\n    Story.storyId AS storyId,\n    FirstUnviewedSnap.snapId AS firstUnviewedSnapId,\n    Friend.userId AS friendUserId,\n    Friend.displayName AS friendDisplayName,\n    Friend.friendLinkType AS friendLinkType,\n    Story.userName AS friendUsername,\n    Story.friendStoryPosterUserId AS friendStoryPosterUserId,\n    Story.displayName AS storyDisplayName,\n    Feed.specifiedName AS feedSpecifiedName,\n    Feed.participantString AS feedParticipantString,\n    Feed._id AS feedId,\n    Friend.bitmojiAvatarId,\n    Friend.bitmojiSelfieId,\n    COALESCE(Friend.storyMuted, 0) AS storyMuted,\n    groupStoryType,\n    Story.viewed AS storyViewed,\n    latestTimeStamp AS storyLatestTimestamp,\n    latestExpirationTimestamp AS storyLatestExpirationTimestamp,\n    rankingId AS storyRankingId,\n    Story.lastSyncRequestId AS lastSyncRequestId\nFROM\nStoryViewActiveSnaps AS Story\nLEFT OUTER JOIN Friend ON Friend.userId = Story.friendStoryPosterUserId\nLEFT OUTER JOIN Feed ON Feed.friendRowId = Friend._id\nLEFT OUTER JOIN (\n    SELECT * FROM (\n        SELECT\n            StorySnap.storyRowId,\n            Snap.snapId\n        FROM StorySnap\n        LEFT OUTER JOIN Snap ON Snap._id = StorySnap.snapRowId\n        WHERE StorySnap.viewed = 0\n        ORDER BY Snap.timestamp DESC\n    ) GROUP BY storyRowId\n) AS FirstUnviewedSnap ON Story._id = FirstUnviewedSnap.storyRowId\nWHERE (\n        Story.kind = 0 -- StoryKind.FRIEND\n        AND (\n            -- StoryKind.FRIEND could include OUTGOING|FOLLOWING friends. Only show MUTUAL friends.\n            -- If Friend table is not yet populated, use rankingId as a signal for mutual friends.\n            friendLinkType = 0 OR (friendLinkType IS NULL AND rankingId NOT NULL)\n        )\n    ) OR Story.kind = 1", 0, null);
            ((C19506byj) interfaceC54340yek).c(num3, "CREATE VIEW IF NOT EXISTS DiscoverFeedFriendStoriesView\nAS SELECT\n    Story._id,\n    Story.storyId AS storyId,\n    FirstUnviewedSnap.snapId AS firstUnviewedSnapId,\n    Friend.userId AS friendUserId,\n    Friend.displayName AS friendDisplayName,\n    Friend.friendLinkType AS friendLinkType,\n    Story.userName AS friendUsername,\n    Story.displayName AS storyDisplayName,\n    Feed.specifiedName AS feedSpecifiedName,\n    Feed.participantString AS feedParticipantString,\n    Feed._id AS feedId,\n    Friend.bitmojiAvatarId,\n    Friend.bitmojiSelfieId,\n    COALESCE(Friend.storyMuted, 0) AS storyMuted,\n    groupStoryType,\n    Story.viewed AS storyViewed,\n    latestTimeStamp AS storyLatestTimestamp,\n    latestExpirationTimestamp AS storyLatestExpirationTimestamp,\n    rankingId AS storyRankingId,\n    Story.lastSyncRequestId AS lastSyncRequestId\nFROM\nStoryViewActiveSnaps AS Story\nLEFT OUTER JOIN Friend ON Friend.username = Story.userName\nLEFT OUTER JOIN Feed ON Feed.friendRowId = Friend._id\nLEFT OUTER JOIN (\n    SELECT * FROM (\n        SELECT\n            StorySnap.storyRowId,\n            Snap.snapId\n        FROM StorySnap\n        LEFT OUTER JOIN Snap ON Snap._id = StorySnap.snapRowId\n        WHERE StorySnap.viewed = 0\n        ORDER BY Snap.timestamp DESC\n    ) GROUP BY storyRowId\n) AS FirstUnviewedSnap ON Story._id = FirstUnviewedSnap.storyRowId\nWHERE (\n        Story.kind = 0 -- StoryKind.FRIEND\n        AND (\n            -- StoryKind.FRIEND could include OUTGOING|FOLLOWING friends. Only show MUTUAL friends.\n            -- If Friend table is not yet populated, use rankingId as a signal for mutual friends.\n            friendLinkType = 0 OR (friendLinkType IS NULL AND rankingId NOT NULL)\n        )\n    ) OR Story.kind = 1", 0, null);
        }
        if (i <= 334 && i2 > 334) {
            ((C19506byj) interfaceC54340yek).c(num3, "CREATE TABLE IF NOT EXISTS MixedModeMediaRef(\n    _id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n\n    originalMediaSessionId TEXT NOT NULL UNIQUE\n)", 0, null);
        }
        if (i <= 335 && i2 > 335) {
            ((C19506byj) interfaceC54340yek).c(num3, "CREATE TABLE IF NOT EXISTS SendToList (\n    _id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n    identifier TEXT NOT NULL UNIQUE,\n    name TEXT NOT NULL\n)", 0, null);
            ((C19506byj) interfaceC54340yek).c(num3, "CREATE TABLE IF NOT EXISTS SendToListMember (\n    _id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n    listIdentifier TEXT NOT NULL,\n    recipientId TEXT NOT NULL,\n    recipientType INTEGER NOT NULL\n)", 0, null);
        }
        if (i <= 336 && i2 > 336) {
            ((C19506byj) interfaceC54340yek).c(num3, "DROP VIEW IF EXISTS FriendsFeedView", 0, null);
            ((C19506byj) interfaceC54340yek).c(num3, "CREATE VIEW IF NOT EXISTS FriendsFeedView\nAS SELECT\n    Feed._id,\n    coalesce(Feed.specifiedName, Feed.fitScreenParticipantString, Feed.participantString) AS feedDisplayName,\n    participantsSize,\n    Feed.lastInteractionTimestamp,\n    Feed.displayTimestamp,\n    Feed.displayInteractionType,\n    InteractionMessages.snapId AS notViewedSnapId,\n    Feed.lastInteractionUserId,\n    Feed.clearedTimestamp,\n    Feed.kind,\n    Feed.key,\n    Feed.isArroyo,\n    Feed.markedForMigration,\n    Friend._id AS friendRowId,\n    Friend.userId AS friendUserId,\n    Friend.friendmojiCategories,\n    Friend.displayName AS friendDisplayName,\n    Friend.username AS friendUsername,\n    Friend.friendmojiString,\n    Friend.streakLength,\n    Friend.streakExpiration,\n    Friend.bitmojiAvatarId,\n    Friend.bitmojiSelfieId,\n    Friend.birthday,\n    Friend.addedTimestamp,\n    Friend.reverseAddedTimestamp,\n    Friend.isOfficial,\n    Friend.friendLinkType,\n    Friend.snapProId,\n    FriendStory.username AS friendStoryId,\n    FriendStory.isViewed AS friendStoryIsViewed,\n    FriendStory.latestSnapTimestamp AS friendStoryLatestTimestamp,\n    FriendStory.latestSnapExpirationTimestamp AS friendStoryLatestExpirationTimestamp,\n    FriendStory.firstUnviewedSnapId AS friendStoryFirstUnviewedSnapId,\n    Friend.storyMuted AS friendStoryMuted,\n    lastInteractionUser.displayName AS displayInteractionUserDisplayName,\n    lastInteractionUser.username AS displayInteractionUserUsername,\n    lastWriterUser.username AS lastWriterUsername,\n    FriendsFeedScore.score AS score\nFROM\nFeed\nLEFT OUTER JOIN Friend AS Friend ON Feed.friendRowId = Friend._id\nLEFT OUTER JOIN Friend AS lastInteractionUser ON Feed.lastInteractionUserId = lastInteractionUser._id\nLEFT OUTER JOIN Friend AS lastWriterUser ON Feed.lastInteractionWriterId = lastWriterUser._id\nLEFT OUTER JOIN StoryViewFriendStoriesActiveSnaps AS FriendStory ON (Feed.kind = 0 AND Friend.username = FriendStory.username)\nLEFT OUTER JOIN FriendsFeedScore ON Feed._id = FriendsFeedScore.feedRowId\nLEFT OUTER JOIN InteractionMessages\nON (\n    Feed._id = InteractionMessages.feedRowId\n    AND (\n        -- InteractionMessageType.RECEIVED_NOT_VIEWED_SNAP_WITH_SOUND(2),\n        (Feed.displayInteractionType = 'SNAP_RECEIVED_AND_NOT_VIEWED_SOUND' AND InteractionMessages.messageType = 2)\n        OR\n        -- InteractionMessageType.RECEIVED_NOT_VIEWED_SNAP_WITH_NO_SOUND(3),\n        (Feed.displayInteractionType = 'SNAP_RECEIVED_AND_NOT_VIEWED_NO_SOUND' AND InteractionMessages.messageType = 3)\n    )\n)\nWHERE Feed.hidden = 0\n      AND (Feed.lastInteractionTimestamp IS NOT NULL AND Feed.clearedTimestamp <= Feed.sortingTimestamp)", 0, null);
        }
        if (i <= 337 && i2 > 337) {
            ((C19506byj) interfaceC54340yek).c(num3, "ALTER TABLE MobStoryMetadata ADD COLUMN customStorySubtype INTEGER", 0, null);
        }
        if (i <= 338 && i2 > 338) {
            ((C19506byj) interfaceC54340yek).c(num3, "ALTER TABLE Feed\nADD COLUMN markedForMigrationTimestamp INTEGER", 0, null);
            ((C19506byj) interfaceC54340yek).c(num3, "CREATE TRIGGER IF NOT EXISTS markedForMigrationTimestampTrigger UPDATE OF markedForMigration ON Feed\n  BEGIN\n    -- This calculation will provide milliseconds since epoch time (currently the only way to get it through sqlite)\n    UPDATE Feed\n    SET markedForMigrationTimestamp = CAST((strftime('%J', 'now') - 2440587.5)*86400000 AS INTEGER) WHERE _id = old._id;\n  END", 0, null);
        }
        if (i <= 339 && i2 > 339) {
            ((C19506byj) interfaceC54340yek).c(num3, "ALTER TABLE SuggestedFriend\tADD COLUMN deltaForceKey INTEGER NOT NULL DEFAULT 0", 0, null);
            ((C19506byj) interfaceC54340yek).c(num3, "ALTER TABLE SuggestedFriendDeltaForce ADD COLUMN deltaForceKey INTEGER NOT NULL DEFAULT 0", 0, null);
        }
        if (i <= 340 && i2 > 340) {
            ((C19506byj) interfaceC54340yek).c(num3, "DROP VIEW IF EXISTS DiscoverFeedFriendStoriesViewV2", 0, null);
            ((C19506byj) interfaceC54340yek).c(num3, "DROP VIEW IF EXISTS DiscoverFeedFriendStoriesView", 0, null);
            ((C19506byj) interfaceC54340yek).c(num3, "CREATE VIEW IF NOT EXISTS DiscoverFeedFriendStoriesViewV2\nAS SELECT\n    Story._id,\n    Story.storyId AS storyId,\n    FirstUnviewedSnap.snapId AS firstUnviewedSnapId,\n    Friend.userId AS friendUserId,\n    Friend.displayName AS friendDisplayName,\n    Friend.friendLinkType AS friendLinkType,\n    Story.userName AS friendUsername,\n    Story.friendStoryPosterUserId AS friendStoryPosterUserId,\n    Story.displayName AS storyDisplayName,\n    Feed.specifiedName AS feedSpecifiedName,\n    Feed.participantString AS feedParticipantString,\n    Feed._id AS feedId,\n    Friend.bitmojiAvatarId,\n    Friend.bitmojiSelfieId,\n    COALESCE(Friend.storyMuted, 0) AS storyMuted,\n    groupStoryType,\n    Story.viewed AS storyViewed,\n    latestTimeStamp AS storyLatestTimestamp,\n    latestExpirationTimestamp AS storyLatestExpirationTimestamp,\n    rankingId AS storyRankingId,\n    Story.lastSyncRequestId AS lastSyncRequestId\nFROM\nStoryViewActiveSnaps AS Story\nLEFT OUTER JOIN MobStoryMetadata ON (Story.kind = 1 AND MobStoryMetadata.storyRowId = Story._id)\nLEFT OUTER JOIN Friend ON Friend.userId = Story.friendStoryPosterUserId\nLEFT OUTER JOIN Feed ON Feed.friendRowId = Friend._id\nLEFT OUTER JOIN (\n    SELECT * FROM (\n        SELECT\n            StorySnap.storyRowId,\n            Snap.snapId\n        FROM StorySnap\n        LEFT OUTER JOIN Snap ON Snap._id = StorySnap.snapRowId\n        WHERE StorySnap.viewed = 0\n        ORDER BY Snap.timestamp DESC\n    ) GROUP BY storyRowId\n) AS FirstUnviewedSnap ON Story._id = FirstUnviewedSnap.storyRowId\nWHERE (\n        Story.kind = 0 -- StoryKind.FRIEND\n        AND (\n            -- StoryKind.FRIEND could include OUTGOING|FOLLOWING friends. Only show MUTUAL friends.\n            -- If Friend table is not yet populated, use rankingId as a signal for mutual friends.\n            friendLinkType = 0 OR (friendLinkType IS NULL AND rankingId NOT NULL)\n        )\n    ) OR (\n        Story.kind = 1 -- StoryKind.GROUP\n        AND MobStoryMetadata.storyType IN (0, 1) -- CUSTOM(0) / PRIVATE(1) Group Stories only\n        AND COALESCE(MobStoryMetadata.customStorySubtype, -1) != 1 -- filter out snap reply custom stories\n    )", 0, null);
            ((C19506byj) interfaceC54340yek).c(num3, "CREATE VIEW IF NOT EXISTS DiscoverFeedFriendStoriesView\nAS SELECT\n    Story._id,\n    Story.storyId AS storyId,\n    FirstUnviewedSnap.snapId AS firstUnviewedSnapId,\n    Friend.userId AS friendUserId,\n    Friend.displayName AS friendDisplayName,\n    Friend.friendLinkType AS friendLinkType,\n    Story.userName AS friendUsername,\n    Story.displayName AS storyDisplayName,\n    Feed.specifiedName AS feedSpecifiedName,\n    Feed.participantString AS feedParticipantString,\n    Feed._id AS feedId,\n    Friend.bitmojiAvatarId,\n    Friend.bitmojiSelfieId,\n    COALESCE(Friend.storyMuted, 0) AS storyMuted,\n    groupStoryType,\n    Story.viewed AS storyViewed,\n    latestTimeStamp AS storyLatestTimestamp,\n    latestExpirationTimestamp AS storyLatestExpirationTimestamp,\n    rankingId AS storyRankingId,\n    Story.lastSyncRequestId AS lastSyncRequestId\nFROM\nStoryViewActiveSnaps AS Story\nLEFT OUTER JOIN MobStoryMetadata ON (Story.kind = 1 AND MobStoryMetadata.storyRowId = Story._id)\nLEFT OUTER JOIN Friend ON Friend.username = Story.userName\nLEFT OUTER JOIN Feed ON Feed.friendRowId = Friend._id\nLEFT OUTER JOIN (\n    SELECT * FROM (\n        SELECT\n            StorySnap.storyRowId,\n            Snap.snapId\n        FROM StorySnap\n        LEFT OUTER JOIN Snap ON Snap._id = StorySnap.snapRowId\n        WHERE StorySnap.viewed = 0\n        ORDER BY Snap.timestamp DESC\n    ) GROUP BY storyRowId\n) AS FirstUnviewedSnap ON Story._id = FirstUnviewedSnap.storyRowId\nWHERE (\n        Story.kind = 0 -- StoryKind.FRIEND\n        AND (\n            -- StoryKind.FRIEND could include OUTGOING|FOLLOWING friends. Only show MUTUAL friends.\n            -- If Friend table is not yet populated, use rankingId as a signal for mutual friends.\n            friendLinkType = 0 OR (friendLinkType IS NULL AND rankingId NOT NULL)\n        )\n    ) OR (\n        Story.kind = 1 -- StoryKind.GROUP\n        AND MobStoryMetadata.storyType IN (0, 1) -- CUSTOM(0) / PRIVATE(1) Group Stories only\n        AND COALESCE(MobStoryMetadata.customStorySubtype, -1) != 1 -- filter out snap reply custom stories\n    )", 0, null);
        }
        if (i <= 341 && i2 > 341) {
            ((C19506byj) interfaceC54340yek).c(num3, "CREATE TABLE IF NOT EXISTS InvalidFriend(\n    _id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n    friendRowId INTEGER REFERENCES Friend(_id) NOT NULL UNIQUE,\n    originalUsername TEXT NOT NULL,\n    processed INTEGER NOT NULL DEFAULT 0\n)", 0, null);
        }
        if (i <= 342 && i2 > 342) {
            ((C19506byj) interfaceC54340yek).c(num3, "ALTER TABLE SendToList ADD COLUMN creationTime INTEGER NOT NULL DEFAULT 0", 0, null);
            ((C19506byj) interfaceC54340yek).c(num3, "ALTER TABLE SendToList ADD COLUMN rank INTEGER NOT NULL DEFAULT 0", 0, null);
        }
        if (i <= 343 && i2 > 343) {
            ((C19506byj) interfaceC54340yek).c(num3, "ALTER TABLE MobStoryMetadata ADD COLUMN groupVersion INTEGER", 0, null);
        }
        if (i <= 344 && i2 > 344) {
            ((C19506byj) interfaceC54340yek).c(num3, "ALTER TABLE SuggestedFriend\nADD COLUMN hiddenTimestamp INTEGER NOT NULL DEFAULT 0", 0, null);
        }
        if (i <= 345 && i2 > 345) {
            ((C19506byj) interfaceC54340yek).c(num3, "CREATE TABLE IF NOT EXISTS IdentityFlags(\n    _id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n    key TEXT NOT NULL UNIQUE,\n    value INTEGER\n)", 0, null);
            ((C19506byj) interfaceC54340yek).c(num3, "INSERT OR IGNORE INTO IdentityFlags(\n    key,\n    value\n)\nVALUES('ShouldProcessMangledUsernames',1)", 0, null);
        }
        if (i <= 346 && i2 > 346) {
            ((C19506byj) interfaceC54340yek).c(num3, "CREATE TABLE IF NOT EXISTS UploadAssetResult(\n    _id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n\n    requestId TEXT NOT NULL,\n    mediaContextType TEXT NOT NULL,\n    assetType TEXT NOT NULL,\n    mediaType TEXT NOT NULL,\n    uploadUrl TEXT NOT NULL,\n    boltLocation BLOB,\n    uploadUrlType INTEGER NOT NULL,\n    expiryInSeconds INTEGER NOT NULL,\n    assetSize INTEGER NOT NULL,\n    encryptionKey TEXT,\n    encryptionIv TEXT\n)", 0, null);
            ((C19506byj) interfaceC54340yek).c(num3, "CREATE INDEX IF NOT EXISTS request_id_index ON UploadAssetResult(requestId, mediaContextType)", 0, null);
            ((C19506byj) interfaceC54340yek).c(num3, "CREATE INDEX IF NOT EXISTS expiration_index ON UploadAssetResult(expiryInSeconds)", 0, null);
        }
        if (i <= 347 && i2 > 347) {
            ((C19506byj) interfaceC54340yek).c(num3, "ALTER TABLE ConnectedApps\nADD COLUMN appType INTEGER NOT NULL DEFAULT 0", 0, null);
        }
        if (i <= 348 && i2 > 348) {
            ((C19506byj) interfaceC54340yek).c(num3, "ALTER TABLE Friend\nADD COLUMN isBrand INTEGER NOT NULL DEFAULT 0", 0, null);
            ((C19506byj) interfaceC54340yek).c(num3, "DROP VIEW IF EXISTS FriendsFeedView", 0, null);
            ((C19506byj) interfaceC54340yek).c(num3, "CREATE VIEW IF NOT EXISTS FriendsFeedView\nAS SELECT\n    Feed._id,\n    coalesce(Feed.specifiedName, Feed.fitScreenParticipantString, Feed.participantString) AS feedDisplayName,\n    participantsSize,\n    Feed.lastInteractionTimestamp,\n    Feed.displayTimestamp,\n    Feed.displayInteractionType,\n    InteractionMessages.snapId AS notViewedSnapId,\n    Feed.lastInteractionUserId,\n    Feed.clearedTimestamp,\n    Feed.kind,\n    Feed.key,\n    Feed.isArroyo,\n    Feed.markedForMigration,\n    Friend._id AS friendRowId,\n    Friend.userId AS friendUserId,\n    Friend.friendmojiCategories,\n    Friend.displayName AS friendDisplayName,\n    Friend.username AS friendUsername,\n    Friend.friendmojiString,\n    Friend.streakLength,\n    Friend.streakExpiration,\n    Friend.bitmojiAvatarId,\n    Friend.bitmojiSelfieId,\n    Friend.birthday,\n    Friend.addedTimestamp,\n    Friend.reverseAddedTimestamp,\n    Friend.isOfficial,\n    Friend.isBrand,\n    Friend.friendLinkType,\n    Friend.snapProId,\n    FriendStory.username AS friendStoryId,\n    FriendStory.isViewed AS friendStoryIsViewed,\n    FriendStory.latestSnapTimestamp AS friendStoryLatestTimestamp,\n    FriendStory.latestSnapExpirationTimestamp AS friendStoryLatestExpirationTimestamp,\n    FriendStory.firstUnviewedSnapId AS friendStoryFirstUnviewedSnapId,\n    Friend.storyMuted AS friendStoryMuted,\n    lastInteractionUser.displayName AS displayInteractionUserDisplayName,\n    lastInteractionUser.username AS displayInteractionUserUsername,\n    lastWriterUser.username AS lastWriterUsername,\n    FriendsFeedScore.score AS score\nFROM\nFeed\nLEFT OUTER JOIN Friend AS Friend ON Feed.friendRowId = Friend._id\nLEFT OUTER JOIN Friend AS lastInteractionUser ON Feed.lastInteractionUserId = lastInteractionUser._id\nLEFT OUTER JOIN Friend AS lastWriterUser ON Feed.lastInteractionWriterId = lastWriterUser._id\nLEFT OUTER JOIN StoryViewFriendStoriesActiveSnaps AS FriendStory ON (Feed.kind = 0 AND Friend.username = FriendStory.username)\nLEFT OUTER JOIN FriendsFeedScore ON Feed._id = FriendsFeedScore.feedRowId\nLEFT OUTER JOIN InteractionMessages\nON (\n    Feed._id = InteractionMessages.feedRowId\n    AND (\n        -- InteractionMessageType.RECEIVED_NOT_VIEWED_SNAP_WITH_SOUND(2),\n        (Feed.displayInteractionType = 'SNAP_RECEIVED_AND_NOT_VIEWED_SOUND' AND InteractionMessages.messageType = 2)\n        OR\n        -- InteractionMessageType.RECEIVED_NOT_VIEWED_SNAP_WITH_NO_SOUND(3),\n        (Feed.displayInteractionType = 'SNAP_RECEIVED_AND_NOT_VIEWED_NO_SOUND' AND InteractionMessages.messageType = 3)\n    )\n)\nWHERE Feed.hidden = 0\n      AND (Feed.lastInteractionTimestamp IS NOT NULL AND Feed.clearedTimestamp <= Feed.sortingTimestamp)", 0, null);
        }
        if (i <= 349 && i2 > 349) {
            ((C19506byj) interfaceC54340yek).c(num3, "ALTER TABLE StorySnap\nADD COLUMN thumbnailContentObject BLOB", 0, null);
            ((C19506byj) interfaceC54340yek).c(num3, "ALTER TABLE StorySnap\nADD COLUMN thumbnailCoKey TEXT", 0, null);
            ((C19506byj) interfaceC54340yek).c(num3, "ALTER TABLE StorySnap\nADD COLUMN thumbnailCoIv TEXT", 0, null);
        }
        if (i <= 350 && i2 > 350) {
            ((C19506byj) interfaceC54340yek).c(num3, "ALTER TABLE SuggestedFriend\nADD COLUMN score REAL", 0, null);
            ((C19506byj) interfaceC54340yek).c(num3, "ALTER TABLE SuggestedFriend\nADD COLUMN rankingProfileId TEXT", 0, null);
            ((C19506byj) interfaceC54340yek).c(num3, "ALTER TABLE SuggestedFriend\nADD COLUMN suggestionReasonForToken INTEGER", 0, null);
        }
        if (i > 351 || i2 <= 351) {
            str4 = str3;
            str5 = "CREATE INDEX IF NOT EXISTS story_snap_snap_row_id ON StorySnap(snapRowId)";
        } else {
            ((C19506byj) interfaceC54340yek).c(num3, "PRAGMA legacy_alter_table=1", 0, null);
            ((C19506byj) interfaceC54340yek).c(num3, "CREATE TABLE IF NOT EXISTS StorySnapTemp (\n    _id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n    snapRowId INTEGER NOT NULL,\n    username TEXT,\n    clientId TEXT NOT NULL,\n    storyRowId INTEGER NOT NULL,\n\n    captionTextDisplay TEXT,\n    filterId TEXT,\n    thumbnailUrl TEXT,\n    largeThumbnailUrl TEXT,\n    viewed INTEGER, -- true if the snap has been viewed\n    isPublic INTEGER,\n    mediaD2sUrl TEXT,\n    needAuth INTEGER NOT NULL,\n    storyFilterId TEXT,\n    thumbnailIv TEXT,\n    canonicalDisplayTime INTEGER,\n    expirationTimestamp INTEGER,\n    venueId TEXT,\n    flushableId TEXT, -- used to report read, screenshot, save states to servers\n    -- DEPRECATED(In mixer we join from username to get the displayName of the user)\n    -- Mixer will not populate this field and rely on the Friend table displayName for the info.\n    displayName TEXT, -- used for showing the display name of the snap's attributed user.\n    snapAttachmentUrl TEXT, -- used for URL attachments\n    contextHint TEXT, -- used for Context Cards\n    animatedSnapType TEXT, -- whether the snap contained animations, for analytics\n    lensMetadata TEXT, -- metadata for lenses analytics\n    filterLensId TEXT, -- metadata for lenses analytics\n    unlockablesSnapInfo TEXT, -- metadata for unlockables analytics\n    encryptedGeoLoggingData TEXT, -- encrypted metadata about geo logging, for analytics\n    ruleFileParams TEXT, -- serialized map for controlling media quality for direct-to-storage downloads\n    brandFriendliness INTEGER, -- Brand friendliness from server story snap\n    clientStatus INTEGER,\n\n    friendScreenCaptureRecordingCount INTEGER,\n    friendScreenCaptureShotCount INTEGER,\n    friendScreenshotCount INTEGER,\n    friendSnapSaveCount INTEGER,\n    friendViewCount INTEGER,\n    otherScreenCaptureRecordingCount INTEGER,\n    otherScreenCaptureShotCount INTEGER,\n    otherScreenshotCount INTEGER,\n    otherSnapSaveCount INTEGER,\n    otherViewCount INTEGER,\n\n    pendingServerConfirmation INTEGER, -- whether posts are waiting to be confirmed by StoriesResponse\n    postedTimestamp INTEGER, -- used for posting timeout logic for detecting async posting failures\n\n    creationTimestamp INTEGER, -- used to display original creation time when posting from memories / camera roll\n    snapSource INTEGER, -- used to determine source when posting from memories / camera roll\n\n    creativeKitSourceAppName TEXT, -- used to display source app name when posting from Snap Kit Creative Kit\n    creativeKitSourceAppOAuthClientId TEXT, -- used to identify source app when posting from Snap Kit Creative Kit\n\n    serverRankingId TEXT, -- used for story story view blizzard event\n    -- story snap's sequence number used in delta fetch.\n    -- See https://docs.google.com/document/d/1uqIHEo8HX7UbOQtrMWHJIO9XcbPnKJznIctlNL1d0aA\n    sequence INTEGER,\n    -- ID used for fetching view count information for Our Story snaps\n    ourStoriesSnapId TEXT,\n\n    -- serialized SnapDocPersistenceWrapper client proto for fetching story snap media content via Bolt\n    boltInfo BLOB DEFAULT NULL,\n\n    -- userId of the poster. Custom stories have multiple posters so\n    -- we need to use poster's userId in StorySnap instead of Story.\n    userId TEXT,\n\n    -- Bolt CO thumbnail fields.\n    thumbnailContentObject BLOB DEFAULT NULL,\n    thumbnailCoKey TEXT,\n    thumbnailCoIv TEXT,\n\n    -- (storyRowId, clientId) should be unique and consistent across local and server synced snaps\n    UNIQUE(storyRowId, clientId),\n\n    -- should have unique snapRowId for each story\n    UNIQUE(storyRowId, snapRowId)\n)", 0, null);
            ((C19506byj) interfaceC54340yek).c(num3, "INSERT INTO StorySnapTemp\nSELECT\n    _id,\n    snapRowId,\n    username,\n    clientId,\n    storyRowId,\n    captionTextDisplay,\n    filterId,\n    thumbnailUrl,\n    largeThumbnailUrl,\n    viewed,\n    isPublic,\n    mediaD2sUrl,\n    needAuth,\n    storyFilterId,\n    thumbnailIv,\n    canonicalDisplayTime,\n    expirationTimestamp,\n    venueId,\n    flushableId,\n    displayName,\n    snapAttachmentUrl,\n    contextHint,\n    animatedSnapType,\n    lensMetadata,\n    filterLensId,\n    unlockablesSnapInfo,\n    encryptedGeoLoggingData,\n    ruleFileParams,\n    brandFriendliness,\n    clientStatus,\n    friendScreenCaptureRecordingCount,\n    friendScreenCaptureShotCount,\n    friendScreenshotCount,\n    friendSnapSaveCount,\n    friendViewCount,\n    otherScreenCaptureRecordingCount,\n    otherScreenCaptureShotCount,\n    otherScreenshotCount,\n    otherSnapSaveCount,\n    otherViewCount,\n    pendingServerConfirmation,\n    postedTimestamp,\n    creationTimestamp,\n    snapSource,\n    creativeKitSourceAppName,\n    creativeKitSourceAppOAuthClientId,\n    serverRankingId,\n    sequence,\n    ourStoriesSnapId,\n    boltInfo,\n    userId,\n    thumbnailContentObject,\n    thumbnailCoKey,\n    thumbnailCoIv\nFROM\n    StorySnap", 0, null);
            ((C19506byj) interfaceC54340yek).c(num3, "DROP TABLE StorySnap", 0, null);
            ((C19506byj) interfaceC54340yek).c(num3, "ALTER TABLE StorySnapTemp RENAME TO StorySnap", 0, null);
            str4 = str3;
            ((C19506byj) interfaceC54340yek).c(num3, str4, 0, null);
            ((C19506byj) interfaceC54340yek).c(num3, "CREATE INDEX IF NOT EXISTS story_snap_username ON StorySnap(username)", 0, null);
            ((C19506byj) interfaceC54340yek).c(num3, "CREATE INDEX IF NOT EXISTS story_snap_userId ON StorySnap(userId)", 0, null);
            str5 = "CREATE INDEX IF NOT EXISTS story_snap_snap_row_id ON StorySnap(snapRowId)";
            ((C19506byj) interfaceC54340yek).c(num3, str5, 0, null);
        }
        if (i > 352 || i2 <= 352) {
            str6 = str5;
            num4 = null;
        } else {
            str6 = str5;
            num4 = null;
            ((C19506byj) interfaceC54340yek).c(null, "ALTER TABLE ConnectedAppScopes\nADD COLUMN isSnapKitFeature INTEGER NOT NULL DEFAULT 0", 0, null);
        }
        if (i <= 353 && i2 > 353) {
            ((C19506byj) interfaceC54340yek).c(num4, "ALTER TABLE Friend\nADD COLUMN businessCategory INTEGER", 0, null);
            ((C19506byj) interfaceC54340yek).c(num4, "DROP VIEW IF EXISTS FriendsFeedView", 0, null);
            ((C19506byj) interfaceC54340yek).c(num4, "CREATE VIEW IF NOT EXISTS FriendsFeedView\nAS SELECT\n    Feed._id,\n    coalesce(Feed.specifiedName, Feed.fitScreenParticipantString, Feed.participantString) AS feedDisplayName,\n    participantsSize,\n    Feed.lastInteractionTimestamp,\n    Feed.displayTimestamp,\n    Feed.displayInteractionType,\n    InteractionMessages.snapId AS notViewedSnapId,\n    Feed.lastInteractionUserId,\n    Feed.clearedTimestamp,\n    Feed.kind,\n    Feed.key,\n    Feed.isArroyo,\n    Feed.markedForMigration,\n    Friend._id AS friendRowId,\n    Friend.userId AS friendUserId,\n    Friend.friendmojiCategories,\n    Friend.displayName AS friendDisplayName,\n    Friend.username AS friendUsername,\n    Friend.friendmojiString,\n    Friend.streakLength,\n    Friend.streakExpiration,\n    Friend.bitmojiAvatarId,\n    Friend.bitmojiSelfieId,\n    Friend.birthday,\n    Friend.addedTimestamp,\n    Friend.reverseAddedTimestamp,\n    Friend.isOfficial,\n    Friend.isBrand,\n    Friend.businessCategory,\n    Friend.friendLinkType,\n    Friend.snapProId,\n    FriendStory.username AS friendStoryId,\n    FriendStory.isViewed AS friendStoryIsViewed,\n    FriendStory.latestSnapTimestamp AS friendStoryLatestTimestamp,\n    FriendStory.latestSnapExpirationTimestamp AS friendStoryLatestExpirationTimestamp,\n    FriendStory.firstUnviewedSnapId AS friendStoryFirstUnviewedSnapId,\n    Friend.storyMuted AS friendStoryMuted,\n    lastInteractionUser.displayName AS displayInteractionUserDisplayName,\n    lastInteractionUser.username AS displayInteractionUserUsername,\n    lastWriterUser.username AS lastWriterUsername,\n    FriendsFeedScore.score AS score\nFROM\nFeed\nLEFT OUTER JOIN Friend AS Friend ON Feed.friendRowId = Friend._id\nLEFT OUTER JOIN Friend AS lastInteractionUser ON Feed.lastInteractionUserId = lastInteractionUser._id\nLEFT OUTER JOIN Friend AS lastWriterUser ON Feed.lastInteractionWriterId = lastWriterUser._id\nLEFT OUTER JOIN StoryViewFriendStoriesActiveSnaps AS FriendStory ON (Feed.kind = 0 AND Friend.username = FriendStory.username)\nLEFT OUTER JOIN FriendsFeedScore ON Feed._id = FriendsFeedScore.feedRowId\nLEFT OUTER JOIN InteractionMessages\nON (\n    Feed._id = InteractionMessages.feedRowId\n    AND (\n        -- InteractionMessageType.RECEIVED_NOT_VIEWED_SNAP_WITH_SOUND(2),\n        (Feed.displayInteractionType = 'SNAP_RECEIVED_AND_NOT_VIEWED_SOUND' AND InteractionMessages.messageType = 2)\n        OR\n        -- InteractionMessageType.RECEIVED_NOT_VIEWED_SNAP_WITH_NO_SOUND(3),\n        (Feed.displayInteractionType = 'SNAP_RECEIVED_AND_NOT_VIEWED_NO_SOUND' AND InteractionMessages.messageType = 3)\n    )\n)\nWHERE Feed.hidden = 0\n      AND (Feed.lastInteractionTimestamp IS NOT NULL AND Feed.clearedTimestamp <= Feed.sortingTimestamp)", 0, null);
        }
        if (i <= 354 && i2 > 354) {
            ((C19506byj) interfaceC54340yek).c(num4, "CREATE TABLE IF NOT EXISTS NotificationData(\n    _id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n    userId TEXT NOT NULL UNIQUE,\n    -- optional setting in PND, null if not set\n    enableNotifications INTEGER DEFAULT 0,\n    -- optional setting in PND, null if not set\n    enableSound INTEGER DEFAULT 0,\n    -- optional setting in PND, null if not set\n    enableRinging INTEGER DEFAULT 0,\n    -- should only be PrivacyType.EVERYONE or PrivacyType.FRIENDS or null\n    -- see SendMeNotificationsType enum that performs reverse-lookup\n    notificationPrivacy INTEGER\n)", 0, null);
        }
        if (i <= 355 && i2 > 355) {
            ((C19506byj) interfaceC54340yek).c(num4, "DROP VIEW IF EXISTS DiscoverFeedFriendStoriesViewV2", 0, null);
            ((C19506byj) interfaceC54340yek).c(num4, "DROP VIEW IF EXISTS DiscoverFeedFriendStoriesView", 0, null);
            ((C19506byj) interfaceC54340yek).c(num4, "CREATE VIEW DiscoverFeedFriendStoriesViewV2\nAS SELECT\n    Story._id,\n    Story.storyId AS storyId,\n    FirstUnviewedSnap.snapId AS firstUnviewedSnapId,\n    Friend.userId AS friendUserId,\n    Friend.displayName AS friendDisplayName,\n    Friend.friendLinkType AS friendLinkType,\n    Story.userName AS friendUsername,\n    Story.friendStoryPosterUserId AS friendStoryPosterUserId,\n    Story.displayName AS storyDisplayName,\n    Feed.specifiedName AS feedSpecifiedName,\n    Feed.participantString AS feedParticipantString,\n    Feed._id AS feedId,\n    Friend.bitmojiAvatarId,\n    Friend.bitmojiSelfieId,\n    COALESCE(Friend.storyMuted, 0) AS storyMuted,\n    groupStoryType,\n    Story.viewed AS storyViewed,\n    latestTimeStamp AS storyLatestTimestamp,\n    latestExpirationTimestamp AS storyLatestExpirationTimestamp,\n    rankingId AS storyRankingId,\n    Story.lastSyncRequestId AS lastSyncRequestId\nFROM\nStoryViewActiveSnaps AS Story\nLEFT OUTER JOIN MobStoryMetadata ON (Story.kind = 1 AND MobStoryMetadata.storyRowId = Story._id)\nLEFT OUTER JOIN Friend ON Friend.userId = Story.friendStoryPosterUserId\nLEFT OUTER JOIN Feed ON Feed.friendRowId = Friend._id\nLEFT OUTER JOIN (\n    SELECT\n    StorySnap.storyRowId,\n    Snap.snapId,\n    min(Snap.timestamp)\n    FROM StorySnap\n    LEFT OUTER JOIN Snap ON Snap._id = StorySnap.snapRowId\n    WHERE StorySnap.viewed = 0\n    GROUP BY StorySnap.storyRowId\n) AS FirstUnviewedSnap ON Story._id = FirstUnviewedSnap.storyRowId\nWHERE (\n        Story.kind = 0 -- StoryKind.FRIEND\n        AND (\n            -- StoryKind.FRIEND could include OUTGOING|FOLLOWING friends. Only show MUTUAL friends.\n            -- If Friend table is not yet populated, use rankingId as a signal for mutual friends.\n            friendLinkType = 0 OR (friendLinkType IS NULL AND rankingId NOT NULL)\n        )\n    ) OR (\n        Story.kind = 1 -- StoryKind.GROUP\n        AND MobStoryMetadata.storyType IN (0, 1) -- CUSTOM(0) / PRIVATE(1) Group Stories only\n        AND COALESCE(MobStoryMetadata.customStorySubtype, -1) != 1 -- filter out snap reply custom stories\n    )", 0, null);
            ((C19506byj) interfaceC54340yek).c(num4, "CREATE VIEW DiscoverFeedFriendStoriesView\nAS SELECT\n    Story._id,\n    Story.storyId AS storyId,\n    FirstUnviewedSnap.snapId AS firstUnviewedSnapId,\n    Friend.userId AS friendUserId,\n    Friend.displayName AS friendDisplayName,\n    Friend.friendLinkType AS friendLinkType,\n    Story.userName AS friendUsername,\n    Story.displayName AS storyDisplayName,\n    Feed.specifiedName AS feedSpecifiedName,\n    Feed.participantString AS feedParticipantString,\n    Feed._id AS feedId,\n    Friend.bitmojiAvatarId,\n    Friend.bitmojiSelfieId,\n    COALESCE(Friend.storyMuted, 0) AS storyMuted,\n    groupStoryType,\n    Story.viewed AS storyViewed,\n    latestTimeStamp AS storyLatestTimestamp,\n    latestExpirationTimestamp AS storyLatestExpirationTimestamp,\n    rankingId AS storyRankingId,\n    Story.lastSyncRequestId AS lastSyncRequestId\nFROM\nStoryViewActiveSnaps AS Story\nLEFT OUTER JOIN MobStoryMetadata ON (Story.kind = 1 AND MobStoryMetadata.storyRowId = Story._id)\nLEFT OUTER JOIN Friend ON Friend.username = Story.userName\nLEFT OUTER JOIN Feed ON Feed.friendRowId = Friend._id\nLEFT OUTER JOIN (\n    SELECT\n        StorySnap.storyRowId,\n        Snap.snapId,\n        min(Snap.timestamp)\n    FROM StorySnap\n    LEFT OUTER JOIN Snap ON Snap._id = StorySnap.snapRowId\n    WHERE StorySnap.viewed = 0\n    GROUP BY StorySnap.storyRowId\n) AS FirstUnviewedSnap ON Story._id = FirstUnviewedSnap.storyRowId\nWHERE (\n        Story.kind = 0 -- StoryKind.FRIEND\n        AND (\n            -- StoryKind.FRIEND could include OUTGOING|FOLLOWING friends. Only show MUTUAL friends.\n            -- If Friend table is not yet populated, use rankingId as a signal for mutual friends.\n            friendLinkType = 0 OR (friendLinkType IS NULL AND rankingId NOT NULL)\n        )\n    ) OR (\n        Story.kind = 1 -- StoryKind.GROUP\n        AND MobStoryMetadata.storyType IN (0, 1) -- CUSTOM(0) / PRIVATE(1) Group Stories only\n        AND COALESCE(MobStoryMetadata.customStorySubtype, -1) != 1 -- filter out snap reply custom stories\n    )", 0, null);
        }
        if (i <= 356 && i2 > 356) {
            ((C19506byj) interfaceC54340yek).c(num4, "CREATE TABLE IF NOT EXISTS GrowthDeltaForceQueryResolver(\n    _id TEXT NOT NULL PRIMARY KEY,\n    stringVal TEXT\n)", 0, null);
        }
        if (i <= 357 && i2 > 357) {
            ((C19506byj) interfaceC54340yek).c(num4, "ALTER TABLE StorySnap\nADD COLUMN boostCount INTEGER", 0, null);
            ((C19506byj) interfaceC54340yek).c(num4, "ALTER TABLE StorySnap\nADD COLUMN shareCount INTEGER", 0, null);
        }
        if (i <= 358 && i2 > 358) {
            ((C19506byj) interfaceC54340yek).c(num4, "ALTER TABLE StorySnap\nADD COLUMN multiSnapBundleId TEXT", 0, null);
            ((C19506byj) interfaceC54340yek).c(num4, "ALTER TABLE StorySnap\nADD COLUMN multiSnapSegmentCount INTEGER", 0, null);
            ((C19506byj) interfaceC54340yek).c(num4, "ALTER TABLE StorySnap\nADD COLUMN multiSnapSegmentId INTEGER", 0, null);
        }
        if (i <= 359 && i2 > 359) {
            ((C19506byj) interfaceC54340yek).c(num4, "ALTER TABLE StorySnap\nADD COLUMN ourStoryDestination INTEGER", 0, null);
        }
        if (i <= 360 && i2 > 360) {
            ((C19506byj) interfaceC54340yek).c(num4, "ALTER TABLE StorySnap\nADD COLUMN ourStoryDestinations BLOB", 0, null);
        }
        if (i <= 361 && i2 > 361) {
            ((C19506byj) interfaceC54340yek).c(num4, "ALTER TABLE StorySnap\nADD COLUMN spotlightSnapStatus INTEGER", 0, null);
        }
        String str10 = str4;
        if (i > 362 || i2 <= 362) {
            str7 = "ALTER TABLE StorySnapTemp RENAME TO StorySnap";
            num5 = null;
        } else {
            num5 = null;
            ((C19506byj) interfaceC54340yek).c(null, "DROP VIEW IF EXISTS StoryViewFriendStoriesActiveSnaps", 0, null);
            ((C19506byj) interfaceC54340yek).c(null, "DROP VIEW IF EXISTS StoryViewPlayableFriendStoriesMapping", 0, null);
            str7 = "ALTER TABLE StorySnapTemp RENAME TO StorySnap";
            ((C19506byj) interfaceC54340yek).c(null, "CREATE VIEW IF NOT EXISTS StoryViewPlayableFriendStoriesMapping AS\nSELECT\n    -- For Friend Stories, there is no linked MobStoryMetadata and Story.storyId resolves to username and\n    -- For Private Stories, Story.storyId is mobStoryId so instead MobStoryMetadata.creatorUsername resolves to username\n    COALESCE(MobStoryMetadata.creatorUsername, Story.storyId) AS username,\n    Story.userId AS userId,\n    Story._id AS storyRowId\nFROM Story\nLEFT OUTER JOIN MobStoryMetadata ON Story._id = MobStoryMetadata.storyRowId\nWHERE (\n    -- Include Friend Stories\n    Story.kind = 0 OR\n    -- Include Private Stories\n    (Story.kind = 1 AND MobStoryMetadata.storyType = 1)\n)", 0, null);
            ((C19506byj) interfaceC54340yek).c(null, "CREATE VIEW IF NOT EXISTS StoryViewFriendStoriesActiveSnaps AS\nSELECT\n    FriendStories.username AS username,\n    FriendStories.userId AS userId,\n    FriendStories.isViewed AS isViewed,\n    FriendStories.latestSnapTimestamp AS latestSnapTimestamp,\n    FriendStories.latestSnapExpirationTimestamp AS latestSnapExpirationTimestamp,\n    COALESCE(FirstUnviewedSnap.snapId, '') AS firstUnviewedSnapId\nFROM (\n    SELECT\n        StoryViewPlayableFriendStoriesMapping.username AS username,\n        StoryViewPlayableFriendStoriesMapping.userId AS userId,\n        MAX(Snap.timestamp) AS latestSnapTimestamp,\n        MAX(StorySnap.expirationTimestamp) AS latestSnapExpirationTimestamp,\n        MIN(StorySnap.viewed) AS isViewed\n    FROM StorySnap\n    JOIN Snap ON StorySnap.snapRowId = Snap._id\n    JOIN StoryViewPlayableFriendStoriesMapping ON StorySnap.storyRowId = StoryViewPlayableFriendStoriesMapping.storyRowId\n    GROUP BY StoryViewPlayableFriendStoriesMapping.userId\n) AS FriendStories\nLEFT OUTER JOIN (\n    SELECT * FROM (\n        SELECT StoryViewPlayableFriendStoriesMapping.username AS username,\n        StoryViewPlayableFriendStoriesMapping.userId AS userId,\n        Snap.snapId\n        FROM StorySnap\n        JOIN Snap ON StorySnap.snapRowId = Snap._id\n        JOIN StoryViewPlayableFriendStoriesMapping ON StorySnap.storyRowId = StoryViewPlayableFriendStoriesMapping.storyRowId\n        WHERE StorySnap.viewed = 0\n        ORDER BY Snap.timestamp DESC\n    ) GROUP BY userId\n) AS FirstUnviewedSnap ON (FriendStories.isViewed = 0 AND FirstUnviewedSnap.userId = FriendStories.userId)", 0, null);
        }
        if (i > 363 || i2 <= 363) {
            str8 = str2;
            str9 = "DROP TABLE StorySnap";
        } else {
            str8 = str2;
            ((C19506byj) interfaceC54340yek).c(num5, str8, 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "DROP VIEW IF EXISTS DiscoverFeedFriendStoriesViewV2", 0, null);
            str9 = "DROP TABLE StorySnap";
            ((C19506byj) interfaceC54340yek).c(num5, "CREATE VIEW IF NOT EXISTS StoryViewActiveSnaps AS\nSELECT\n    Story._id,\n    Story.storyId,\n    Story.userName,\n    Story.userId AS friendStoryPosterUserId,\n    Story.displayName,\n    Story.kind,\n    Story.groupStoryType,\n    Story.rankingId,\n    Story.lastSyncRequestId,\n    StorySnaps.isViewed AS viewed,\n    StorySnaps.latestSnapTimestamp AS latestTimeStamp,\n    StorySnaps.latestSnapExpirationTimestamp AS latestExpirationTimestamp,\n    StorySnaps.totalMediaDurationMs\nFROM Story\nLEFT OUTER JOIN (\n    SELECT\n        StorySnap.storyRowId,\n        MAX(Snap.timestamp) AS latestSnapTimestamp,\n        MAX(StorySnap.expirationTimestamp) AS latestSnapExpirationTimestamp,\n        MIN(StorySnap.viewed) = 1 AS isViewed,\n        SUM(Snap.durationInMs) AS totalMediaDurationMs\n    FROM StorySnap\n    JOIN Snap ON StorySnap.snapRowId = Snap._id\n    GROUP BY StorySnap.storyRowId\n) AS StorySnaps ON Story._id = StorySnaps.storyRowId\nWHERE Story._id IN (SELECT DISTINCT StorySnap.storyRowId FROM StorySnap)", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "CREATE VIEW IF NOT EXISTS DiscoverFeedFriendStoriesViewV2\nAS SELECT\n    Story._id,\n    Story.storyId AS storyId,\n    FirstUnviewedSnap.snapId AS firstUnviewedSnapId,\n    Friend.userId AS friendUserId,\n    Friend.displayName AS friendDisplayName,\n    Friend.friendLinkType AS friendLinkType,\n    Story.userName AS friendUsername,\n    Story.friendStoryPosterUserId AS friendStoryPosterUserId,\n    Story.displayName AS storyDisplayName,\n    Feed.specifiedName AS feedSpecifiedName,\n    Feed.participantString AS feedParticipantString,\n    Feed._id AS feedId,\n    Friend.bitmojiAvatarId,\n    Friend.bitmojiSelfieId,\n    COALESCE(Friend.storyMuted, 0) AS storyMuted,\n    groupStoryType,\n    Story.viewed AS storyViewed,\n    latestTimeStamp AS storyLatestTimestamp,\n    latestExpirationTimestamp AS storyLatestExpirationTimestamp,\n    rankingId AS storyRankingId,\n    Story.lastSyncRequestId AS lastSyncRequestId,\n    Story.totalMediaDurationMs\nFROM\nStoryViewActiveSnaps AS Story\nLEFT OUTER JOIN MobStoryMetadata ON (Story.kind = 1 AND MobStoryMetadata.storyRowId = Story._id)\nLEFT OUTER JOIN Friend ON Friend.userId = Story.friendStoryPosterUserId\nLEFT OUTER JOIN Feed ON Feed.friendRowId = Friend._id\nLEFT OUTER JOIN (\n    SELECT\n    StorySnap.storyRowId,\n    Snap.snapId,\n    min(Snap.timestamp)\n    FROM StorySnap\n    LEFT OUTER JOIN Snap ON Snap._id = StorySnap.snapRowId\n    WHERE StorySnap.viewed = 0\n    GROUP BY StorySnap.storyRowId\n) AS FirstUnviewedSnap ON Story._id = FirstUnviewedSnap.storyRowId\nWHERE (\n        Story.kind = 0 -- StoryKind.FRIEND\n        AND (\n            -- StoryKind.FRIEND could include OUTGOING|FOLLOWING friends. Only show MUTUAL friends.\n            -- If Friend table is not yet populated, use rankingId as a signal for mutual friends.\n            friendLinkType = 0 OR (friendLinkType IS NULL AND rankingId NOT NULL)\n        )\n    ) OR (\n        Story.kind = 1 -- StoryKind.GROUP\n        AND MobStoryMetadata.storyType IN (0, 1) -- CUSTOM(0) / PRIVATE(1) Group Stories only\n        AND COALESCE(MobStoryMetadata.customStorySubtype, -1) != 1 -- filter out snap reply custom stories\n    )", 0, null);
        }
        if (i <= 364 && i2 > 364) {
            ((C19506byj) interfaceC54340yek).c(num5, "CREATE TABLE IF NOT EXISTS FriendLinkSyncState(\n    _id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n    userId TEXT NOT NULL UNIQUE,\n    friendLinkType INTEGER\n)", 0, null);
        }
        if (i <= 365 && i2 > 365) {
            ((C19506byj) interfaceC54340yek).c(num5, "ALTER TABLE UploadLocation\nADD COLUMN cacheKey BLOB", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "CREATE UNIQUE INDEX IF NOT EXISTS upload_location_upload_url ON UploadLocation(uploadUrl)", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "CREATE INDEX IF NOT EXISTS upload_location_cache_key ON UploadLocation(cacheKey)", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "CREATE INDEX IF NOT EXISTS upload_location_type ON UploadLocation(type)", 0, null);
        }
        if (i <= 366 && i2 > 366) {
            ((C19506byj) interfaceC54340yek).c(num5, "ALTER TABLE NotificationData\nADD COLUMN enableBitmoji INTEGER DEFAULT 0", 0, null);
        }
        if (i <= 367 && i2 > 367) {
            ((C19506byj) interfaceC54340yek).c(num5, str, 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "CREATE TABLE IF NOT EXISTS PostSnapAction(\n    _id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n\n    -- the id for the post snap action's attributed snap.\n    snapId TEXT NOT NULL,\n\n    -- the feed id for the post snap action's attributed snap.\n    conversationId TEXT NOT NULL,\n\n    -- byte array containing the metadata for the PostSnapAction\n    postSnapAction TEXT NOT NULL,\n\n    -- millisecond epoch timestamp for expiring the post snap action\n    expirationTimestamp INTEGER NOT NULL,\n\n    -- sessionId this post snap action was saved from.\n    contextSessionId TEXT\n)", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "CREATE INDEX IF NOT EXISTS post_snap_action_feed_id ON PostSnapAction(conversationId)", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "CREATE INDEX IF NOT EXISTS post_snap_action_expiration_timestamp ON PostSnapAction(expirationTimestamp)", 0, null);
        }
        if (i <= 368 && i2 > 368) {
            ((C19506byj) interfaceC54340yek).c(num5, "DROP VIEW IF EXISTS FriendsFeedView", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "CREATE VIEW IF NOT EXISTS FriendsFeedView\nAS SELECT\n    Feed._id,\n    coalesce(Feed.specifiedName, Feed.fitScreenParticipantString, Feed.participantString) AS feedDisplayName,\n    participantsSize,\n    Feed.lastInteractionTimestamp,\n    Feed.displayTimestamp,\n    Feed.displayInteractionType,\n    InteractionMessages.snapId AS notViewedSnapId,\n    Feed.lastInteractionUserId,\n    Feed.clearedTimestamp,\n    Feed.kind,\n    Feed.key,\n    Feed.isArroyo,\n    Feed.markedForMigration,\n    Friend._id AS friendRowId,\n    Friend.userId AS friendUserId,\n    Friend.friendmojiCategories,\n    Friend.displayName AS friendDisplayName,\n    Friend.username AS friendUsername,\n    Friend.friendmojiString,\n    Friend.streakLength,\n    Friend.streakExpiration,\n    Friend.bitmojiAvatarId,\n    Friend.bitmojiSelfieId,\n    Friend.birthday,\n    Friend.addedTimestamp,\n    Friend.reverseAddedTimestamp,\n    Friend.isOfficial,\n    Friend.isBrand,\n    Friend.businessCategory,\n    Friend.friendLinkType,\n    Friend.snapProId,\n    FriendStory.username AS friendStoryId,\n    FriendStory.isViewed AS friendStoryIsViewed,\n    FriendStory.latestSnapTimestamp AS friendStoryLatestTimestamp,\n    FriendStory.latestSnapExpirationTimestamp AS friendStoryLatestExpirationTimestamp,\n    FriendStory.firstUnviewedSnapId AS friendStoryFirstUnviewedSnapId,\n    Friend.storyMuted AS friendStoryMuted,\n    lastInteractionUser.displayName AS displayInteractionUserDisplayName,\n    lastInteractionUser.username AS displayInteractionUserUsername,\n    lastWriterUser.username AS lastWriterUsername,\n    FriendsFeedScore.score AS score,\n    PostSnapActions.postSnapAction AS postSnapAction,\n    PostSnapActions.expirationTimestamp AS postSnapActionExpirationTimestamp,\n    PostSnapActions.contextSessionId AS postSnapActionContextSessionId,\n    PostSnapActions.snapId AS postSnapActionLastViewedSnapId\nFROM\nFeed\nLEFT OUTER JOIN Friend AS Friend ON Feed.friendRowId = Friend._id\nLEFT OUTER JOIN Friend AS lastInteractionUser ON Feed.lastInteractionUserId = lastInteractionUser._id\nLEFT OUTER JOIN Friend AS lastWriterUser ON Feed.lastInteractionWriterId = lastWriterUser._id\nLEFT OUTER JOIN StoryViewFriendStoriesActiveSnaps AS FriendStory ON (Feed.kind = 0 AND Friend.username = FriendStory.username)\nLEFT OUTER JOIN FriendsFeedScore ON Feed._id = FriendsFeedScore.feedRowId\nLEFT OUTER JOIN (SELECT conversationId, postSnapAction, max(expirationTimestamp) AS expirationTimestamp, contextSessionId, snapId FROM PostSnapAction GROUP BY conversationId) AS PostSnapActions\nON (\n    Feed.key = PostSnapActions.conversationId\n)\n\nLEFT OUTER JOIN InteractionMessages\nON (\n    Feed._id = InteractionMessages.feedRowId\n    AND (\n        -- InteractionMessageType.RECEIVED_NOT_VIEWED_SNAP_WITH_SOUND(2),\n        (Feed.displayInteractionType = 'SNAP_RECEIVED_AND_NOT_VIEWED_SOUND' AND InteractionMessages.messageType = 2)\n        OR\n        -- InteractionMessageType.RECEIVED_NOT_VIEWED_SNAP_WITH_NO_SOUND(3),\n        (Feed.displayInteractionType = 'SNAP_RECEIVED_AND_NOT_VIEWED_NO_SOUND' AND InteractionMessages.messageType = 3)\n    )\n)\nWHERE Feed.hidden = 0\n      AND (Feed.lastInteractionTimestamp IS NOT NULL AND Feed.clearedTimestamp <= Feed.sortingTimestamp)", 0, null);
        }
        if (i <= 369 && i2 > 369) {
            ((C19506byj) interfaceC54340yek).c(num5, "CREATE TABLE IF NOT EXISTS LocalConversationInteraction (\n    _id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n    conversationId TEXT NOT NULL,\n    interactionType INTEGER NOT NULL,\n    interactionTimestamp INTEGER NOT NULL\n)", 0, null);
        }
        if (i <= 370 && i2 > 370) {
            ((C19506byj) interfaceC54340yek).c(num5, "DROP VIEW IF EXISTS FriendsFeedView", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "DROP VIEW IF EXISTS StoryViewFriendStoriesActiveSnaps", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "DROP VIEW IF EXISTS StoryViewPlayableFriendStoriesMapping", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "CREATE VIEW IF NOT EXISTS StoryViewPlayableFriendStoriesMapping AS\nSELECT\n    COALESCE(MobStoryMetadata.creatorUsername, Story.storyId) AS username,\n    Story.storyId AS storyId,\n    Story.userId AS userId,\n    Story._id AS storyRowId\nFROM Story\nLEFT OUTER JOIN MobStoryMetadata ON Story._id = MobStoryMetadata.storyRowId\nWHERE (\n    Story.kind = 0 OR\n    (Story.kind = 1 AND MobStoryMetadata.storyType = 1)\n)", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "CREATE VIEW IF NOT EXISTS StoryViewFriendStoriesActiveSnaps AS\nSELECT\n    FriendStories.username AS username,\n    FriendStories.storyId AS storyId,\n    FriendStories.userId AS userId,\n    FriendStories.isViewed AS isViewed,\n    FriendStories.latestSnapTimestamp AS latestSnapTimestamp,\n    FriendStories.latestSnapExpirationTimestamp AS latestSnapExpirationTimestamp,\n    COALESCE(FirstUnviewedSnap.snapId, '') AS firstUnviewedSnapId\nFROM (\n    SELECT\n        StoryViewPlayableFriendStoriesMapping.username AS username,\n        StoryViewPlayableFriendStoriesMapping.storyId AS storyId,\n        StoryViewPlayableFriendStoriesMapping.userId AS userId,\n        MAX(Snap.timestamp) AS latestSnapTimestamp,\n        MAX(StorySnap.expirationTimestamp) AS latestSnapExpirationTimestamp,\n        MIN(StorySnap.viewed) AS isViewed\n    FROM StorySnap\n    JOIN Snap ON StorySnap.snapRowId = Snap._id\n    JOIN StoryViewPlayableFriendStoriesMapping ON StorySnap.storyRowId = StoryViewPlayableFriendStoriesMapping.storyRowId\n    GROUP BY StoryViewPlayableFriendStoriesMapping.userId\n) AS FriendStories\nLEFT OUTER JOIN (\n    SELECT * FROM (\n        SELECT StoryViewPlayableFriendStoriesMapping.username AS username,\n        StoryViewPlayableFriendStoriesMapping.storyId AS storyId,\n        StoryViewPlayableFriendStoriesMapping.userId AS userId,\n        Snap.snapId\n        FROM StorySnap\n        JOIN Snap ON StorySnap.snapRowId = Snap._id\n        JOIN StoryViewPlayableFriendStoriesMapping ON StorySnap.storyRowId = StoryViewPlayableFriendStoriesMapping.storyRowId\n        WHERE StorySnap.viewed = 0\n        ORDER BY Snap.timestamp DESC\n    ) GROUP BY userId\n) AS FirstUnviewedSnap ON (FriendStories.isViewed = 0 AND FirstUnviewedSnap.userId = FriendStories.userId)", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "CREATE VIEW IF NOT EXISTS FriendsFeedView\nAS SELECT\n    Feed._id,\n    coalesce(Feed.specifiedName, Feed.fitScreenParticipantString, Feed.participantString) AS feedDisplayName,\n    participantsSize,\n    Feed.lastInteractionTimestamp,\n    Feed.displayTimestamp,\n    Feed.displayInteractionType,\n    InteractionMessages.snapId AS notViewedSnapId,\n    Feed.lastInteractionUserId,\n    Feed.clearedTimestamp,\n    Feed.kind,\n    Feed.key,\n    Feed.isArroyo,\n    Feed.markedForMigration,\n    Friend._id AS friendRowId,\n    Friend.userId AS friendUserId,\n    Friend.friendmojiCategories,\n    Friend.displayName AS friendDisplayName,\n    Friend.username AS friendDisplayUsername,\n    Friend.friendmojiString,\n    Friend.streakLength,\n    Friend.streakExpiration,\n    Friend.bitmojiAvatarId,\n    Friend.bitmojiSelfieId,\n    Friend.birthday,\n    Friend.addedTimestamp,\n    Friend.reverseAddedTimestamp,\n    Friend.isOfficial,\n    Friend.isBrand,\n    Friend.businessCategory,\n    Friend.friendLinkType,\n    Friend.snapProId,\n    FriendStory.username AS friendStoryUsername,\n    FriendStory.storyId AS friendStoryId,\n    FriendStory.isViewed AS friendStoryIsViewed,\n    FriendStory.latestSnapTimestamp AS friendStoryLatestTimestamp,\n    FriendStory.latestSnapExpirationTimestamp AS friendStoryLatestExpirationTimestamp,\n    FriendStory.firstUnviewedSnapId AS friendStoryFirstUnviewedSnapId,\n    Friend.storyMuted AS friendStoryMuted,\n    lastInteractionUser.displayName AS displayInteractionUserDisplayName,\n    lastInteractionUser.username AS displayInteractionUserUsername,\n    lastWriterUser.username AS lastWriterUsername,\n    FriendsFeedScore.score AS score,\n    PostSnapActions.postSnapAction AS postSnapAction,\n    PostSnapActions.expirationTimestamp AS postSnapActionExpirationTimestamp,\n    PostSnapActions.contextSessionId AS postSnapActionContextSessionId,\n    PostSnapActions.snapId AS postSnapActionLastViewedSnapId\nFROM\nFeed\nLEFT OUTER JOIN Friend AS Friend ON Feed.friendRowId = Friend._id\nLEFT OUTER JOIN Friend AS lastInteractionUser ON Feed.lastInteractionUserId = lastInteractionUser._id\nLEFT OUTER JOIN Friend AS lastWriterUser ON Feed.lastInteractionWriterId = lastWriterUser._id\nLEFT OUTER JOIN StoryViewFriendStoriesActiveSnaps AS FriendStory ON (Feed.kind = 0 AND Friend.username = FriendStory.username)\nLEFT OUTER JOIN FriendsFeedScore ON Feed._id = FriendsFeedScore.feedRowId\nLEFT OUTER JOIN (SELECT conversationId, postSnapAction, max(expirationTimestamp) AS expirationTimestamp, contextSessionId, snapId FROM PostSnapAction GROUP BY conversationId) AS PostSnapActions\nON (\n    Feed.key = PostSnapActions.conversationId\n)\nLEFT OUTER JOIN InteractionMessages\nON (\n    Feed._id = InteractionMessages.feedRowId\n    AND (\n        -- InteractionMessageType.RECEIVED_NOT_VIEWED_SNAP_WITH_SOUND(2),\n        (Feed.displayInteractionType = 'SNAP_RECEIVED_AND_NOT_VIEWED_SOUND' AND InteractionMessages.messageType = 2)\n        OR\n        -- InteractionMessageType.RECEIVED_NOT_VIEWED_SNAP_WITH_NO_SOUND(3),\n        (Feed.displayInteractionType = 'SNAP_RECEIVED_AND_NOT_VIEWED_NO_SOUND' AND InteractionMessages.messageType = 3)\n    )\n)\nWHERE Feed.hidden = 0\n      AND (Feed.lastInteractionTimestamp IS NOT NULL AND Feed.clearedTimestamp <= Feed.sortingTimestamp)", 0, null);
        }
        if (i <= 371 && i2 > 371) {
            ((C19506byj) interfaceC54340yek).c(num5, "DROP VIEW IF EXISTS DiscoverFeedFriendStoriesView", 0, null);
        }
        if (i <= 372 && i2 > 372) {
            ((C19506byj) interfaceC54340yek).c(num5, "CREATE TABLE IF NOT EXISTS FriendSyncData(\n    _id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n    friendRowId INTEGER NOT NULL UNIQUE,\n    expiryTimestamp INTEGER,\n    syncSource INTEGER\n)", 0, null);
        }
        if (i <= 373 && i2 > 373) {
            ((C19506byj) interfaceC54340yek).c(num5, "DROP VIEW IF EXISTS FriendsFeedView", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "DROP VIEW IF EXISTS StoryViewFriendStoriesActiveSnaps", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "DROP VIEW IF EXISTS StoryViewPlayableFriendStoriesMapping", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "CREATE VIEW IF NOT EXISTS StoryViewPlayableFriendStoriesMapping AS\nSELECT\n    Story.storyId AS storyId,\n    Story.userId AS userId,\n    Story._id AS storyRowId\nFROM Story\nLEFT OUTER JOIN MobStoryMetadata ON Story._id = MobStoryMetadata.storyRowId\nWHERE (\n    Story.kind = 0 OR\n    (Story.kind = 1 AND MobStoryMetadata.storyType = 1)\n)", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "CREATE VIEW IF NOT EXISTS StoryViewFriendStoriesActiveSnaps AS\nSELECT\n    FriendStories.storyId AS storyId,\n    FriendStories.userId AS userId,\n    FriendStories.isViewed AS isViewed,\n    FriendStories.latestSnapTimestamp AS latestSnapTimestamp,\n    FriendStories.latestSnapExpirationTimestamp AS latestSnapExpirationTimestamp,\n    COALESCE(FirstUnviewedSnap.snapId, '') AS firstUnviewedSnapId\nFROM (\n    SELECT\n        StoryViewPlayableFriendStoriesMapping.storyId AS storyId,\n        StoryViewPlayableFriendStoriesMapping.userId AS userId,\n        MAX(Snap.timestamp) AS latestSnapTimestamp,\n        MAX(StorySnap.expirationTimestamp) AS latestSnapExpirationTimestamp,\n        MIN(StorySnap.viewed) AS isViewed\n    FROM StorySnap\n    JOIN Snap ON StorySnap.snapRowId = Snap._id\n    JOIN StoryViewPlayableFriendStoriesMapping ON StorySnap.storyRowId = StoryViewPlayableFriendStoriesMapping.storyRowId\n    GROUP BY StoryViewPlayableFriendStoriesMapping.userId\n) AS FriendStories\nLEFT OUTER JOIN (\n    SELECT * FROM (\n        SELECT StoryViewPlayableFriendStoriesMapping.storyId AS storyId,\n        StoryViewPlayableFriendStoriesMapping.userId AS userId,\n        Snap.snapId\n        FROM StorySnap\n        JOIN Snap ON StorySnap.snapRowId = Snap._id\n        JOIN StoryViewPlayableFriendStoriesMapping ON StorySnap.storyRowId = StoryViewPlayableFriendStoriesMapping.storyRowId\n        WHERE StorySnap.viewed = 0\n        ORDER BY Snap.timestamp DESC\n    ) GROUP BY userId\n) AS FirstUnviewedSnap ON (FriendStories.isViewed = 0 AND FirstUnviewedSnap.userId = FriendStories.userId)", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "CREATE VIEW IF NOT EXISTS FriendsFeedView\nAS SELECT\n    Feed._id,\n    coalesce(Feed.specifiedName, Feed.fitScreenParticipantString, Feed.participantString) AS feedDisplayName,\n    participantsSize,\n    Feed.lastInteractionTimestamp,\n    Feed.displayTimestamp,\n    Feed.displayInteractionType,\n    InteractionMessages.snapId AS notViewedSnapId,\n    Feed.lastInteractionUserId,\n    Feed.clearedTimestamp,\n    Feed.kind,\n    Feed.key,\n    Feed.isArroyo,\n    Feed.markedForMigration,\n    Friend._id AS friendRowId,\n    Friend.userId AS friendUserId,\n    Friend.friendmojiCategories,\n    Friend.displayName AS friendDisplayName,\n    Friend.username AS friendDisplayUsername,\n    Friend.friendmojiString,\n    Friend.streakLength,\n    Friend.streakExpiration,\n    Friend.bitmojiAvatarId,\n    Friend.bitmojiSelfieId,\n    Friend.birthday,\n    Friend.addedTimestamp,\n    Friend.reverseAddedTimestamp,\n    Friend.isOfficial,\n    Friend.isBrand,\n    Friend.businessCategory,\n    Friend.friendLinkType,\n    Friend.snapProId,\n    FriendStory.storyId AS friendStoryId,\n    FriendStory.isViewed AS friendStoryIsViewed,\n    FriendStory.latestSnapTimestamp AS friendStoryLatestTimestamp,\n    FriendStory.latestSnapExpirationTimestamp AS friendStoryLatestExpirationTimestamp,\n    FriendStory.firstUnviewedSnapId AS friendStoryFirstUnviewedSnapId,\n    Friend.storyMuted AS friendStoryMuted,\n    lastInteractionUser.displayName AS displayInteractionUserDisplayName,\n    lastInteractionUser.username AS displayInteractionUserUsername,\n    lastWriterUser.username AS lastWriterUsername,\n    FriendsFeedScore.score AS score,\n    PostSnapActions.postSnapAction AS postSnapAction,\n    PostSnapActions.expirationTimestamp AS postSnapActionExpirationTimestamp,\n    PostSnapActions.contextSessionId AS postSnapActionContextSessionId,\n    PostSnapActions.snapId AS postSnapActionLastViewedSnapId\nFROM\nFeed\nLEFT OUTER JOIN Friend AS Friend ON Feed.friendRowId = Friend._id\nLEFT OUTER JOIN Friend AS lastInteractionUser ON Feed.lastInteractionUserId = lastInteractionUser._id\nLEFT OUTER JOIN Friend AS lastWriterUser ON Feed.lastInteractionWriterId = lastWriterUser._id\nLEFT OUTER JOIN StoryViewFriendStoriesActiveSnaps AS FriendStory ON (Feed.kind = 0 AND Friend.userId = FriendStory.userId)\nLEFT OUTER JOIN FriendsFeedScore ON Feed._id = FriendsFeedScore.feedRowId\nLEFT OUTER JOIN (SELECT conversationId, postSnapAction, max(expirationTimestamp) AS expirationTimestamp, contextSessionId, snapId FROM PostSnapAction GROUP BY conversationId) AS PostSnapActions\nON (\n    Feed.key = PostSnapActions.conversationId\n)\n\nLEFT OUTER JOIN InteractionMessages\nON (\n    Feed._id = InteractionMessages.feedRowId\n    AND (\n        (Feed.displayInteractionType = 'SNAP_RECEIVED_AND_NOT_VIEWED_SOUND' AND InteractionMessages.messageType = 2)\n        OR\n        (Feed.displayInteractionType = 'SNAP_RECEIVED_AND_NOT_VIEWED_NO_SOUND' AND InteractionMessages.messageType = 3)\n    )\n)\nWHERE Feed.hidden = 0\n      AND (Feed.lastInteractionTimestamp IS NOT NULL AND Feed.clearedTimestamp <= Feed.sortingTimestamp)", 0, null);
        }
        if (i <= 374 && i2 > 374) {
            ((C19506byj) interfaceC54340yek).c(num5, "DROP VIEW IF EXISTS DiscoverFeedFriendStoriesViewV2", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, str8, 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "CREATE VIEW IF NOT EXISTS StoryViewActiveSnaps AS\nSELECT\n    Story._id,\n    Story.storyId,\n    Story.userId AS friendStoryPosterUserId,\n    Story.displayName,\n    Story.kind,\n    Story.groupStoryType,\n    Story.rankingId,\n    Story.lastSyncRequestId,\n    StorySnaps.isViewed AS viewed,\n    StorySnaps.latestSnapTimestamp AS latestTimeStamp,\n    StorySnaps.latestSnapExpirationTimestamp AS latestExpirationTimestamp,\n    StorySnaps.totalMediaDurationMs\nFROM Story\nLEFT OUTER JOIN (\n    SELECT\n        StorySnap.storyRowId,\n        MAX(Snap.timestamp) AS latestSnapTimestamp,\n        MAX(StorySnap.expirationTimestamp) AS latestSnapExpirationTimestamp,\n        MIN(StorySnap.viewed) = 1 AS isViewed,\n        SUM(Snap.durationInMs) AS totalMediaDurationMs\n    FROM StorySnap\n    JOIN Snap ON StorySnap.snapRowId = Snap._id\n    GROUP BY StorySnap.storyRowId\n) AS StorySnaps ON Story._id = StorySnaps.storyRowId\nWHERE Story._id IN (SELECT DISTINCT StorySnap.storyRowId FROM StorySnap)", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "CREATE VIEW IF NOT EXISTS DiscoverFeedFriendStoriesViewV2\nAS SELECT\n    Story._id,\n    Story.storyId AS storyId,\n    FirstUnviewedSnap.snapId AS firstUnviewedSnapId,\n    Friend.userId AS friendUserId,\n    Friend.displayName AS friendDisplayName,\n    Friend.friendLinkType AS friendLinkType,\n    Friend.username AS friendUsername,\n    Story.friendStoryPosterUserId AS friendStoryPosterUserId,\n    Story.displayName AS storyDisplayName,\n    Feed.specifiedName AS feedSpecifiedName,\n    Feed.participantString AS feedParticipantString,\n    Feed._id AS feedId,\n    Friend.bitmojiAvatarId,\n    Friend.bitmojiSelfieId,\n    COALESCE(Friend.storyMuted, 0) AS storyMuted,\n    groupStoryType,\n    Story.viewed AS storyViewed,\n    latestTimeStamp AS storyLatestTimestamp,\n    latestExpirationTimestamp AS storyLatestExpirationTimestamp,\n    rankingId AS storyRankingId,\n    Story.lastSyncRequestId AS lastSyncRequestId,\n    Story.totalMediaDurationMs\nFROM\nStoryViewActiveSnaps AS Story\nLEFT OUTER JOIN MobStoryMetadata ON (Story.kind = 1 AND MobStoryMetadata.storyRowId = Story._id)\nLEFT OUTER JOIN Friend ON Friend.userId = Story.friendStoryPosterUserId\nLEFT OUTER JOIN Feed ON Feed.friendRowId = Friend._id\nLEFT OUTER JOIN (\n    SELECT\n    StorySnap.storyRowId,\n    Snap.snapId,\n    min(Snap.timestamp)\n    FROM StorySnap\n    LEFT OUTER JOIN Snap ON Snap._id = StorySnap.snapRowId\n    WHERE StorySnap.viewed = 0\n    GROUP BY StorySnap.storyRowId\n) AS FirstUnviewedSnap ON Story._id = FirstUnviewedSnap.storyRowId\nWHERE (\n        Story.kind = 0 -- StoryKind.FRIEND\n        AND (\n            -- StoryKind.FRIEND could include OUTGOING|FOLLOWING friends. Only show MUTUAL friends.\n            -- If Friend table is not yet populated, use rankingId as a signal for mutual friends.\n            friendLinkType = 0 OR (friendLinkType IS NULL AND rankingId NOT NULL)\n        )\n    ) OR (\n        Story.kind = 1 -- StoryKind.GROUP\n        AND MobStoryMetadata.storyType IN (0, 1) -- CUSTOM(0) / PRIVATE(1) Group Stories only\n        AND COALESCE(MobStoryMetadata.customStorySubtype, -1) != 1 -- filter out snap reply custom stories\n    )", 0, null);
        }
        if (i <= 375 && i2 > 375) {
            ((C19506byj) interfaceC54340yek).c(num5, "DROP TABLE IF EXISTS FriendSyncData", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "CREATE TABLE IF NOT EXISTS FriendCaching(\n    _id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n    friendRowId INTEGER NOT NULL UNIQUE,\n    expiryTimestamp INTEGER,\n    needsSync INTEGER NOT NULL DEFAULT 0\n)", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "ALTER TABLE Friend\nADD COLUMN syncSource INTEGER NOT NULL DEFAULT 0", 0, null);
        }
        if (i <= 376 && i2 > 376) {
            ((C19506byj) interfaceC54340yek).c(num5, "ALTER TABLE PostSnapAction\nADD COLUMN currentFeedAction TEXT", 0, null);
        }
        if (i <= 377 && i2 > 377) {
            ((C19506byj) interfaceC54340yek).c(num5, "ALTER TABLE StorySnap\nADD COLUMN isTimeline INTEGER", 0, null);
        }
        if (i <= 378 && i2 > 378) {
            ((C19506byj) interfaceC54340yek).c(num5, str8, 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "CREATE VIEW IF NOT EXISTS StoryViewActiveSnaps AS\nSELECT\n    Story._id,\n    Story.storyId,\n    Story.userId AS friendStoryPosterUserId,\n    Story.displayName,\n    Story.kind,\n    Story.groupStoryType,\n    Story.rankingId,\n    Story.lastSyncRequestId,\n    StorySnaps.isViewed AS viewed,\n    StorySnaps.latestSnapTimestamp AS latestTimeStamp,\n    StorySnaps.latestSnapExpirationTimestamp AS latestExpirationTimestamp,\n    StorySnaps.totalMediaDurationMs\nFROM Story\nLEFT OUTER JOIN (\n    SELECT\n        StorySnap.storyRowId,\n        MAX(Snap.timestamp) AS latestSnapTimestamp,\n        MAX(StorySnap.expirationTimestamp) AS latestSnapExpirationTimestamp,\n        MIN(StorySnap.viewed) = 1 AS isViewed,\n        SUM(Snap.durationInMs) AS totalMediaDurationMs\n    FROM StorySnap\n    JOIN Snap ON StorySnap.snapRowId = Snap._id\n    GROUP BY StorySnap.storyRowId\n) AS StorySnaps ON Story._id = StorySnaps.storyRowId\nWHERE Story._id IN (SELECT DISTINCT StorySnap.storyRowId FROM StorySnap)\nAND Story._id IN (\n  SELECT Story._id FROM Story WHERE Story.kind != 0\n  UNION\n  SELECT _id\n  FROM (\n        SELECT *\n        FROM Story\n        WHERE Story.kind = 0\n        ORDER BY CASE WHEN storyId = userId THEN 1 ELSE 0 END DESC\n  )\n  GROUP BY userId\n)", 0, null);
        }
        if (i <= 379 && i2 > 379) {
            ((C19506byj) interfaceC54340yek).c(num5, "UPDATE Story SET minSequence = NULL WHERE kind = 0", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "UPDATE Story SET maxSequence = NULL WHERE kind = 0", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "UPDATE Story SET lastSyncMaxSequence = NULL WHERE kind = 0", 0, null);
        }
        if (i <= 380 && i2 > 380) {
            ((C19506byj) interfaceC54340yek).c(num5, "DROP VIEW IF EXISTS FriendsFeedView", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "CREATE VIEW IF NOT EXISTS FriendsFeedView\nAS SELECT\n    Feed._id,\n    coalesce(Feed.specifiedName, Feed.fitScreenParticipantString, Feed.participantString) AS feedDisplayName,\n    participantsSize,\n    Feed.lastInteractionTimestamp,\n    Feed.displayTimestamp,\n    Feed.displayInteractionType,\n    InteractionMessages.snapId AS notViewedSnapId,\n    Feed.lastInteractionUserId,\n    Feed.clearedTimestamp,\n    Feed.kind,\n    Feed.key,\n    Feed.isArroyo,\n    Feed.markedForMigration,\n    Friend._id AS friendRowId,\n    Friend.userId AS friendUserId,\n    Friend.friendmojiCategories,\n    Friend.displayName AS friendDisplayName,\n    Friend.username AS friendDisplayUsername,\n    Friend.friendmojiString,\n    Friend.streakLength,\n    Friend.streakExpiration,\n    Friend.bitmojiAvatarId,\n    Friend.bitmojiSelfieId,\n    Friend.birthday,\n    Friend.addedTimestamp,\n    Friend.reverseAddedTimestamp,\n    Friend.isOfficial,\n    Friend.isBrand,\n    Friend.businessCategory,\n    Friend.friendLinkType,\n    Friend.snapProId,\n    FriendStory.storyId AS friendStoryId,\n    FriendStory.isViewed AS friendStoryIsViewed,\n    FriendStory.latestSnapTimestamp AS friendStoryLatestTimestamp,\n    FriendStory.latestSnapExpirationTimestamp AS friendStoryLatestExpirationTimestamp,\n    FriendStory.firstUnviewedSnapId AS friendStoryFirstUnviewedSnapId,\n    Friend.storyMuted AS friendStoryMuted,\n    lastInteractionUser.displayName AS displayInteractionUserDisplayName,\n    lastInteractionUser.username AS displayInteractionUserUsername,\n    lastWriterUser.username AS lastWriterUsername,\n    FriendsFeedScore.score AS score,\n    FeedPostSnapAction.currentFeedAction AS currentFeedAction,\n    FeedPostSnapAction.expirationTimestamp AS postSnapActionExpirationTimestamp,\n    FeedPostSnapAction.contextSessionId AS postSnapActionContextSessionId,\n    FeedPostSnapAction.snapId AS postSnapActionLastViewedSnapId\nFROM\nFeed\nLEFT OUTER JOIN Friend AS Friend ON Feed.friendRowId = Friend._id\nLEFT OUTER JOIN Friend AS lastInteractionUser ON Feed.lastInteractionUserId = lastInteractionUser._id\nLEFT OUTER JOIN Friend AS lastWriterUser ON Feed.lastInteractionWriterId = lastWriterUser._id\nLEFT OUTER JOIN StoryViewFriendStoriesActiveSnaps AS FriendStory ON (Feed.kind = 0 AND Friend.userId = FriendStory.userId)\nLEFT OUTER JOIN FriendsFeedScore ON Feed._id = FriendsFeedScore.feedRowId\nLEFT OUTER JOIN (SELECT conversationId, currentFeedAction, max(expirationTimestamp) AS expirationTimestamp, contextSessionId, snapId FROM PostSnapAction GROUP BY conversationId) AS FeedPostSnapAction\nON (\n    Feed.key = FeedPostSnapAction.conversationId\n)\n\nLEFT OUTER JOIN InteractionMessages\nON (\n    Feed._id = InteractionMessages.feedRowId\n    AND (\n        -- InteractionMessageType.RECEIVED_NOT_VIEWED_SNAP_WITH_SOUND(2),\n        (Feed.displayInteractionType = 'SNAP_RECEIVED_AND_NOT_VIEWED_SOUND' AND InteractionMessages.messageType = 2)\n        OR\n        -- InteractionMessageType.RECEIVED_NOT_VIEWED_SNAP_WITH_NO_SOUND(3),\n        (Feed.displayInteractionType = 'SNAP_RECEIVED_AND_NOT_VIEWED_NO_SOUND' AND InteractionMessages.messageType = 3)\n    )\n)\nWHERE Feed.hidden = 0\n      AND (Feed.lastInteractionTimestamp IS NOT NULL AND Feed.clearedTimestamp <= Feed.sortingTimestamp)", 0, null);
        }
        if (i <= 381 && i2 > 381) {
            ((C19506byj) interfaceC54340yek).c(num5, str8, 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "CREATE VIEW IF NOT EXISTS StoryViewActiveSnaps AS\nSELECT\n    Story._id,\n    Story.storyId,\n    Story.userId AS friendStoryPosterUserId,\n    Story.displayName,\n    Story.kind,\n    Story.groupStoryType,\n    Story.rankingId,\n    Story.lastSyncRequestId,\n    StorySnaps.isViewed AS viewed,\n    StorySnaps.latestSnapTimestamp AS latestTimeStamp,\n    StorySnaps.latestSnapExpirationTimestamp AS latestExpirationTimestamp,\n    StorySnaps.totalMediaDurationMs\nFROM Story\nLEFT OUTER JOIN (\n    SELECT\n        StorySnap.storyRowId,\n        MAX(Snap.timestamp) AS latestSnapTimestamp,\n        MAX(StorySnap.expirationTimestamp) AS latestSnapExpirationTimestamp,\n        MIN(StorySnap.viewed) = 1 AS isViewed,\n        SUM(Snap.durationInMs) AS totalMediaDurationMs\n    FROM StorySnap\n    JOIN Snap ON StorySnap.snapRowId = Snap._id\n    GROUP BY StorySnap.storyRowId\n) AS StorySnaps ON Story._id = StorySnaps.storyRowId\nWHERE Story._id IN (SELECT DISTINCT StorySnap.storyRowId FROM StorySnap)", 0, null);
        }
        if (i <= 382 && i2 > 382) {
            ((C19506byj) interfaceC54340yek).c(num5, "CREATE TABLE IF NOT EXISTS MultipartUploadState(\n    _id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n    key TEXT NOT NULL,\n    partNumber INTEGER NOT NULL,\n    partSize INTEGER NOT NULL,\n    eTag TEXT NOT NULL,\n\n    UNIQUE(key, partNumber)\n)", 0, null);
        }
        if (i <= 383 && i2 > 383) {
            ((C19506byj) interfaceC54340yek).c(num5, "CREATE TABLE IF NOT EXISTS CombinedUsername(\n    _id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n    originalUsername TEXT NOT NULL UNIQUE,\n    mutableUsername TEXT UNIQUE,\n    encodedUsername TEXT\n)", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "CREATE TRIGGER IF NOT EXISTS CombinedUsernameUpdateTrigger\nAFTER UPDATE OF originalUsername, mutableUsername ON CombinedUsername\nFOR EACH ROW\nBEGIN\n    UPDATE CombinedUsername SET encodedUsername=new.originalUsername || '|' || COALESCE(new.mutableUsername,'')\n        WHERE _id = new._id;\nEND", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "CREATE TRIGGER IF NOT EXISTS CombinedUsernameInsertTrigger\nAFTER INSERT ON CombinedUsername\nFOR EACH ROW\nBEGIN\n    UPDATE CombinedUsername SET encodedUsername=new.originalUsername || '|' || COALESCE(new.mutableUsername,'')\n        WHERE _id = new._id;\nEND", 0, null);
        }
        if (i <= 384 && i2 > 384) {
            ((C19506byj) interfaceC54340yek).c(num5, "ALTER TABLE Friend\nADD COLUMN isCameosSharingSupported INTEGER NOT NULL DEFAULT 0", 0, null);
        }
        if (i <= 385 && i2 > 385) {
            ((C19506byj) interfaceC54340yek).c(num5, "PRAGMA legacy_alter_table=1", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "INSERT OR IGNORE INTO CombinedUsername(originalUsername)\nSELECT username FROM Friend", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "CREATE TABLE IF NOT EXISTS FriendTemp(\n    _id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n    _lastModifiedTimestamp INTEGER,\n    username TEXT NOT NULL UNIQUE,\n    combinedUsernameRowId INTEGER NOT NULL UNIQUE,\n    userId TEXT,\n\n    displayName TEXT,\n    bitmojiAvatarId TEXT,\n    bitmojiSelfieId TEXT,\n    friendmojis TEXT ,\n    friendmojiCategories TEXT, -- comma separated list of friendmoji categories returned by the server.\n    phone TEXT,\n    score INTEGER,\n--      Birthday as a long consisting of two integers representing the month and day.\n    birthday INTEGER ,\n    sentToMe INTEGER,\n    receivedFromMe INTEGER,\n    addedTimestamp INTEGER ,  -- timestamp WHEN the 'FROM user' added the 'TO user'\n    reverseAddedTimestamp INTEGER ,  -- timestamp WHEN the 'TO user' added the 'FROM user'\n\n    lastMessageId INTEGER,\n\n    unreadCount INTEGER,\n    friendmojiString INTEGER,\n    serverDisplayName TEXT,\n\n    streakLength INTEGER,\n    streakExpiration INTEGER,\n    friendLinkType INTEGER ,\n\n    storyMuted INTEGER  NOT NULL DEFAULT 0,\n\n    isPopular INTEGER  NOT NULL DEFAULT 0,\n    isOfficial INTEGER  NOT NULL DEFAULT 0,\n\n    isFideliusReady INTEGER  NOT NULL DEFAULT 1,\n\n    snapProId TEXT,\n    fideliusKeys BLOB ,\n\n    isBrand INTEGER  NOT NULL DEFAULT 0,\n    businessCategory INTEGER,\n\n    -- where the data in the Friend table was most recently sourced from, see the FriendSyncSource\n    -- enum for more details.\n    syncSource INTEGER  NOT NULL DEFAULT 0,\n\n    isCameosSharingSupported INTEGER NOT NULL DEFAULT 0\n)", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "INSERT INTO FriendTemp(\n    _id,\n    _lastModifiedTimestamp,\n    username,\n    combinedUsernameRowId,\n    userId,\n    displayName,\n    bitmojiAvatarId,\n    bitmojiSelfieId,\n    friendmojis,\n    friendmojiCategories,\n    phone,\n    score,\n    birthday,\n    sentToMe,\n    receivedFromMe,\n    addedTimestamp,\n    reverseAddedTimestamp,\n    lastMessageId,\n    unreadCount,\n    friendmojiString,\n    serverDisplayName,\n    streakLength,\n    streakExpiration,\n    friendLinkType,\n    storyMuted,\n    isPopular,\n    isOfficial,\n    isFideliusReady,\n    snapProId,\n    fideliusKeys,\n    isBrand,\n    businessCategory,\n    syncSource,\n    isCameosSharingSupported\n)\nSELECT\n    Friend._id,\n    _lastModifiedTimestamp,\n    username,\n    CombinedUsername._id,\n    userId,\n    displayName,\n    bitmojiAvatarId,\n    bitmojiSelfieId,\n    friendmojis,\n    friendmojiCategories,\n    phone,\n    score,\n    birthday,\n    sentToMe,\n    receivedFromMe,\n    addedTimestamp,\n    reverseAddedTimestamp,\n    lastMessageId,\n    unreadCount,\n    friendmojiString,\n    serverDisplayName,\n    streakLength,\n    streakExpiration,\n    friendLinkType,\n    storyMuted,\n    isPopular,\n    isOfficial,\n    isFideliusReady,\n    snapProId,\n    fideliusKeys,\n    isBrand,\n    businessCategory,\n    syncSource,\n    isCameosSharingSupported\nFROM Friend INNER JOIN CombinedUsername ON CombinedUsername.originalUsername=Friend.username", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "DROP TABLE Friend", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "ALTER TABLE FriendTemp RENAME TO Friend", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "CREATE UNIQUE INDEX IF NOT EXISTS friend_user_id_index ON Friend(userId)", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "CREATE TABLE IF NOT EXISTS FriendDeltaForceTemp(\n    _id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n    _lastModifiedTimestamp INTEGER,\n    username TEXT NOT NULL UNIQUE,\n    combinedUsernameRowId INTEGER NOT NULL UNIQUE,\n    userId TEXT,\n\n    displayName TEXT,\n    bitmojiAvatarId TEXT,\n    bitmojiSelfieId TEXT,\n    friendmojis TEXT ,\n    friendmojiCategories TEXT, -- comma separated list of friendmoji categories returned by the server.\n    phone TEXT,\n    score INTEGER,\n--      Birthday as a long consisting of two integers representing the month and day.\n    birthday INTEGER ,\n    sentToMe INTEGER,\n    receivedFromMe INTEGER,\n    addedTimestamp INTEGER ,  -- timestamp WHEN the 'FROM user' added the 'TO user'\n    reverseAddedTimestamp INTEGER ,  -- timestamp WHEN the 'TO user' added the 'FROM user'\n\n    lastMessageId INTEGER,\n\n    unreadCount INTEGER,\n    friendmojiString INTEGER,\n    serverDisplayName TEXT,\n\n    streakLength INTEGER,\n    streakExpiration INTEGER,\n    friendLinkType INTEGER ,\n\n    storyMuted INTEGER  NOT NULL DEFAULT 0,\n\n    isPopular INTEGER  NOT NULL DEFAULT 0,\n    isOfficial INTEGER  NOT NULL DEFAULT 0,\n\n    isFideliusReady INTEGER  NOT NULL DEFAULT 1,\n\n    snapProId TEXT,\n    fideliusKeys BLOB\n)", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "INSERT INTO FriendDeltaForceTemp(\n    _id,\n    _lastModifiedTimestamp,\n    username,\n    combinedUsernameRowId,\n    userId,\n    displayName,\n    bitmojiAvatarId,\n    bitmojiSelfieId,\n    friendmojis,\n    friendmojiCategories,\n    phone,\n    score,\n    birthday,\n    sentToMe,\n    receivedFromMe,\n    addedTimestamp,\n    reverseAddedTimestamp,\n    lastMessageId,\n    unreadCount,\n    friendmojiString,\n    serverDisplayName,\n    streakLength,\n    streakExpiration,\n    friendLinkType,\n    storyMuted,\n    isPopular,\n    isOfficial,\n    isFideliusReady,\n    snapProId,\n    fideliusKeys\n)\nSELECT\n    FriendDeltaForce._id,\n    _lastModifiedTimestamp,\n    username,\n    CombinedUsername._id,\n    userId,\n    displayName,\n    bitmojiAvatarId,\n    bitmojiSelfieId,\n    friendmojis,\n    friendmojiCategories,\n    phone,\n    score,\n    birthday,\n    sentToMe,\n    receivedFromMe,\n    addedTimestamp,\n    reverseAddedTimestamp,\n    lastMessageId,\n    unreadCount,\n    friendmojiString,\n    serverDisplayName,\n    streakLength,\n    streakExpiration,\n    friendLinkType,\n    storyMuted,\n    isPopular,\n    isOfficial,\n    isFideliusReady,\n    snapProId,\n    fideliusKeys\nFROM FriendDeltaForce INNER JOIN CombinedUsername ON CombinedUsername.originalUsername=FriendDeltaForce.username", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "DROP TABLE FriendDeltaForce", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "ALTER TABLE FriendDeltaForceTemp RENAME TO FriendDeltaForce", 0, null);
        }
        if (i <= 386 && i2 > 386) {
            ((C19506byj) interfaceC54340yek).c(num5, "ALTER TABLE StorySnap\nADD COLUMN taskQueueId TEXT", 0, null);
        }
        if (i <= 387 && i2 > 387) {
            ((C19506byj) interfaceC54340yek).c(num5, "ALTER TABLE MobStoryMetadata\nADD COLUMN groupStoryType INTEGER", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "ALTER TABLE MobStoryMetadata\nADD COLUMN memberUserIds TEXT", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "DROP VIEW IF EXISTS DiscoverFeedFriendStoriesViewV2", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "CREATE VIEW IF NOT EXISTS DiscoverFeedFriendStoriesViewV2\nAS SELECT\n    Story._id,\n    Story.storyId AS storyId,\n    FirstUnviewedSnap.snapId AS firstUnviewedSnapId,\n    Friend.userId AS friendUserId,\n    Friend.displayName AS friendDisplayName,\n    Friend.friendLinkType AS friendLinkType,\n    Friend.username AS friendUsername,\n    Story.friendStoryPosterUserId AS friendStoryPosterUserId,\n    Story.displayName AS storyDisplayName,\n    Feed.specifiedName AS feedSpecifiedName,\n    Feed.participantString AS feedParticipantString,\n    Feed._id AS feedId,\n    Friend.bitmojiAvatarId,\n    Friend.bitmojiSelfieId,\n    COALESCE(Friend.storyMuted, 0) AS storyMuted,\n    Story.groupStoryType,\n    Story.viewed AS storyViewed,\n    latestTimeStamp AS storyLatestTimestamp,\n    latestExpirationTimestamp AS storyLatestExpirationTimestamp,\n    rankingId AS storyRankingId,\n    Story.lastSyncRequestId AS lastSyncRequestId,\n    Story.totalMediaDurationMs\nFROM\nStoryViewActiveSnaps AS Story\nLEFT OUTER JOIN MobStoryMetadata ON (Story.kind = 1 AND MobStoryMetadata.storyRowId = Story._id)\nLEFT OUTER JOIN Friend ON Friend.userId = Story.friendStoryPosterUserId\nLEFT OUTER JOIN Feed ON Feed.friendRowId = Friend._id\nLEFT OUTER JOIN (\n    SELECT\n    StorySnap.storyRowId,\n    Snap.snapId,\n    min(Snap.timestamp)\n    FROM StorySnap\n    LEFT OUTER JOIN Snap ON Snap._id = StorySnap.snapRowId\n    WHERE StorySnap.viewed = 0\n    GROUP BY StorySnap.storyRowId\n) AS FirstUnviewedSnap ON Story._id = FirstUnviewedSnap.storyRowId\nWHERE (\n        Story.kind = 0 -- StoryKind.FRIEND\n        AND (\n            -- StoryKind.FRIEND could include OUTGOING|FOLLOWING friends. Only show MUTUAL friends.\n            -- If Friend table is not yet populated, use rankingId as a signal for mutual friends.\n            friendLinkType = 0 OR (friendLinkType IS NULL AND rankingId NOT NULL)\n        )\n    ) OR (\n        Story.kind = 1 -- StoryKind.GROUP\n        AND MobStoryMetadata.storyType IN (0, 1) -- CUSTOM(0) / PRIVATE(1) Group Stories only\n        AND COALESCE(MobStoryMetadata.customStorySubtype, -1) != 1 -- filter out snap reply custom stories\n    )", 0, null);
        }
        if (i <= 388 && i2 > 388) {
            ((C19506byj) interfaceC54340yek).c(num5, "ALTER TABLE RetroPersistenceEvents\nADD COLUMN adProduct TEXT NOT NULL DEFAULT ''", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "ALTER TABLE RetroPersistenceEvents\nADD COLUMN serveTimestamp INTEGER", 0, null);
        }
        if (i <= 389 && i2 > 389) {
            ((C19506byj) interfaceC54340yek).c(num5, "ALTER TABLE MobStoryMetadata\nADD COLUMN autoSaveToMemories INTEGER", 0, null);
        }
        if (i <= 390 && i2 > 390) {
            ((C19506byj) interfaceC54340yek).c(num5, "PRAGMA legacy_alter_table=1", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "CREATE TEMP TABLE LegacyOneOnOneConversations AS\n    SELECT _id AS feedRowId, key AS conversationId FROM Feed WHERE (isArroyo = 0 OR key LIKE '%~%') AND kind = 0", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "DELETE FROM Snap WHERE Snap._id IN (\n    SELECT MessagingSnap.snapRowId FROM MessagingSnap WHERE MessagingSnap.feedRowId IN (\n        SELECT feedRowId FROM LegacyOneOnOneConversations\n    )\n)", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "DELETE FROM LocalMessageAction WHERE conversationId IN (SELECT conversationId FROM LegacyOneOnOneConversations)", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "DELETE FROM Feed WHERE _id IN (SELECT feedRowId FROM LegacyOneOnOneConversations)", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "CREATE TEMP TABLE LegacyGroupConversations AS\n    SELECT _id AS feedRowId, key AS conversationId FROM Feed WHERE isArroyo = 0 AND kind = 1", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "DELETE FROM Snap WHERE Snap._id IN (\n    SELECT MessagingSnap.snapRowId FROM MessagingSnap WHERE MessagingSnap.feedRowId IN (\n        SELECT feedRowId FROM LegacyGroupConversations\n    )\n)", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "DELETE FROM LocalMessageAction WHERE conversationId IN (SELECT conversationId FROM LegacyGroupConversations)", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "DROP TRIGGER IF EXISTS markedForMigrationTimestampTrigger", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "CREATE TABLE IF NOT EXISTS new_Feed (\n    _id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n    key TEXT NOT NULL UNIQUE,\n\n    specifiedName TEXT, -- A name chosen by the group (not generated)\n    participantString TEXT, -- Displayable string with a group chat's members\n    fitScreenParticipantString TEXT, -- Shortened version of participantString to fit the screen.\n    participantsSize INTEGER NOT NULL DEFAULT 1,\n    friendRowId INTEGER, -- If this is a one-on-one chat, the friend's id.\n\n    displayTimestamp INTEGER NOT NULL DEFAULT 0,\n    displayInteractionType TEXT, -- the type of the last interaction\n\n    sortingTimestamp INTEGER NOT NULL DEFAULT 0, -- dedicated timestamp used for sorting\n\n    groupCreationTimestamp INTEGER DEFAULT 0,\n    lastInteractionTimestamp INTEGER DEFAULT 0,\n    lastInteractionUserId INTEGER, -- friend row id of the last user that write/read/screenshotted.\n    lastInteractionWriterId INTEGER, -- friend row id of the last writer.\n\n    clearedTimestamp INTEGER DEFAULT 0,\n\n    storySkipCount INTEGER NOT NULL DEFAULT 0, -- how many times the user has swiped to skip a story in the feed. AKA: FRIEND_STORY_AUTO_ADVANCE_SKIP_COUNT\n\n    lastReadTimestamp INTEGER,\n    lastReader TEXT,\n    lastWriteTimestamp INTEGER,\n    lastWriteType TEXT,\n    lastWriter TEXT, -- userId\n\n    myLastReadTimestamp INTEGER,\n    friendLastReadTimestamp INTEGER,\n\n    lastSnapType INTEGER,\n\n    -- Used in 1-1 24hr message retention, 0 represents immediate and 1440 is 24hr retention model\n    messageRetentionInMinutes INTEGER DEFAULT NULL,\n\n    kind INTEGER NOT NULL,\n\n    notificationMuted INTEGER DEFAULT 0,\n\n    cognacNotificationMuted INTEGER DEFAULT 0 NOT NULL,\n\n    sourcePage INTEGER DEFAULT 0 NOT NULL, -- the page id this item originated from\n\n    -- Used to show the retention prompt profile card only once per conversation\n    retentionPromptProfileCardHasBeenDismissed INTEGER NOT NULL DEFAULT 0,\n\n    -- Used to show the retention prompt chat card only once per conversation\n    retentionPromptChatCardHasBeenDismissed INTEGER NOT NULL DEFAULT 0,\n\n    -- Stores the latest timestamps for when a user saved messages in this conversation\n    userSavedTimestamps TEXT,\n\n    -- Number of times this conversation has shown the chat deletion explainer https://snapchat.quip.com/kJV6Ae3CajBj\n    numTimesShownChatDeletionExplainer INTEGER DEFAULT 0\n)", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "INSERT INTO new_Feed\nSELECT\n    _id,\n    key,\n    specifiedName,\n    participantString,\n    fitScreenParticipantString,\n    participantsSize,\n    friendRowId,\n    displayTimestamp,\n    displayInteractionType,\n    sortingTimestamp,\n    groupCreationTimestamp,\n    lastInteractionTimestamp,\n    lastInteractionUserId,\n    lastInteractionWriterId,\n    clearedTimestamp,\n    storySkipCount,\n    lastReadTimestamp,\n    lastReader,\n    lastWriteTimestamp,\n    lastWriteType,\n    lastWriter,\n    myLastReadTimestamp,\n    friendLastReadTimestamp,\n    lastSnapType,\n    messageRetentionInMinutes,\n    kind,\n    notificationMuted,\n    cognacNotificationMuted,\n    sourcePage,\n    retentionPromptProfileCardHasBeenDismissed,\n    retentionPromptChatCardHasBeenDismissed,\n    userSavedTimestamps,\n    numTimesShownChatDeletionExplainer\nFROM Feed", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "DROP TABLE Feed", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "ALTER TABLE new_Feed RENAME TO Feed", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "CREATE INDEX IF NOT EXISTS feed_timestamp ON Feed(lastInteractionTimestamp DESC)", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "CREATE INDEX IF NOT EXISTS feed_friendRowId ON Feed(friendRowId)", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "DROP VIEW IF EXISTS FriendsFeedView", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "CREATE VIEW IF NOT EXISTS FriendsFeedView\nAS SELECT\n    Feed._id,\n    coalesce(Feed.specifiedName, Feed.fitScreenParticipantString, Feed.participantString) AS feedDisplayName,\n    participantsSize,\n    Feed.lastInteractionTimestamp,\n    Feed.displayTimestamp,\n    Feed.displayInteractionType,\n    Feed.lastInteractionUserId,\n    Feed.clearedTimestamp,\n    Feed.kind,\n    Feed.key,\n    Friend._id AS friendRowId,\n    Friend.userId AS friendUserId,\n    Friend.friendmojiCategories,\n    Friend.displayName AS friendDisplayName,\n    Friend.username AS friendDisplayUsername,\n    Friend.friendmojiString,\n    Friend.streakLength,\n    Friend.streakExpiration,\n    Friend.bitmojiAvatarId,\n    Friend.bitmojiSelfieId,\n    Friend.birthday,\n    Friend.addedTimestamp,\n    Friend.reverseAddedTimestamp,\n    Friend.isOfficial,\n    Friend.isBrand,\n    Friend.businessCategory,\n    Friend.friendLinkType,\n    Friend.snapProId,\n    FriendStory.storyId AS friendStoryId,\n    FriendStory.isViewed AS friendStoryIsViewed,\n    FriendStory.latestSnapTimestamp AS friendStoryLatestTimestamp,\n    FriendStory.latestSnapExpirationTimestamp AS friendStoryLatestExpirationTimestamp,\n    FriendStory.firstUnviewedSnapId AS friendStoryFirstUnviewedSnapId,\n    Friend.storyMuted AS friendStoryMuted,\n    lastInteractionUser.displayName AS displayInteractionUserDisplayName,\n    lastInteractionUser.username AS displayInteractionUserUsername,\n    lastWriterUser.username AS lastWriterUsername,\n    FriendsFeedScore.score AS score,\n    FeedPostSnapAction.currentFeedAction AS currentFeedAction,\n    FeedPostSnapAction.expirationTimestamp AS postSnapActionExpirationTimestamp,\n    FeedPostSnapAction.contextSessionId AS postSnapActionContextSessionId,\n    FeedPostSnapAction.snapId AS postSnapActionLastViewedSnapId\nFROM\nFeed\nLEFT OUTER JOIN Friend AS Friend ON Feed.friendRowId = Friend._id\nLEFT OUTER JOIN Friend AS lastInteractionUser ON Feed.lastInteractionUserId = lastInteractionUser._id\nLEFT OUTER JOIN Friend AS lastWriterUser ON Feed.lastInteractionWriterId = lastWriterUser._id\nLEFT OUTER JOIN StoryViewFriendStoriesActiveSnaps AS FriendStory ON (Feed.kind = 0 AND Friend.userId = FriendStory.userId)\nLEFT OUTER JOIN FriendsFeedScore ON Feed._id = FriendsFeedScore.feedRowId\nLEFT OUTER JOIN (SELECT conversationId, currentFeedAction, max(expirationTimestamp) AS expirationTimestamp, contextSessionId, snapId FROM PostSnapAction GROUP BY conversationId) AS FeedPostSnapAction\nON (\n    Feed.key = FeedPostSnapAction.conversationId\n)", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "DROP TABLE InteractionMessages", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "DROP TABLE FeedSyncState", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "DROP TABLE FeedItemSyncState", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "DROP TABLE MessagingSnap", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "DROP TABLE MultiRecipientSnap", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "DROP TABLE Message", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "DROP TABLE NetworkMessage", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "DROP TABLE SequenceNumbers", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "DROP TABLE SeenSequenceNumbers", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "DROP TABLE NetworkGatewayInfo", 0, null);
        }
        if (i <= 391 && i2 > 391) {
            ((C19506byj) interfaceC54340yek).c(num5, "PRAGMA legacy_alter_table=1", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "DROP VIEW IF EXISTS FriendsFeedView", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "CREATE VIEW IF NOT EXISTS FriendsFeedView\nAS SELECT\n    Feed._id,\n    coalesce(Feed.specifiedName, Feed.fitScreenParticipantString, Feed.participantString) AS feedDisplayName,\n    participantsSize,\n    Feed.lastInteractionTimestamp,\n    Feed.displayTimestamp,\n    Feed.displayInteractionType,\n    Feed.lastInteractionUserId,\n    Feed.clearedTimestamp,\n    Feed.kind,\n    Feed.key,\n    Friend._id AS friendRowId,\n    Friend.userId AS friendUserId,\n    Friend.friendmojiCategories,\n    Friend.displayName AS friendDisplayName,\n    Friend.username AS friendDisplayUsername,\n    Friend.friendmojiString,\n    Friend.streakLength,\n    Friend.streakExpiration,\n    Friend.bitmojiAvatarId,\n    Friend.bitmojiSelfieId,\n    Friend.birthday,\n    Friend.addedTimestamp,\n    Friend.reverseAddedTimestamp,\n    Friend.isOfficial,\n    Friend.isBrand,\n    Friend.businessCategory,\n    Friend.friendLinkType,\n    Friend.snapProId,\n    FriendStory.storyId AS friendStoryId,\n    FriendStory.isViewed AS friendStoryIsViewed,\n    FriendStory.latestSnapTimestamp AS friendStoryLatestTimestamp,\n    FriendStory.latestSnapExpirationTimestamp AS friendStoryLatestExpirationTimestamp,\n    FriendStory.firstUnviewedSnapId AS friendStoryFirstUnviewedSnapId,\n    Friend.storyMuted AS friendStoryMuted,\n    lastInteractionUser.displayName AS displayInteractionUserDisplayName,\n    lastInteractionUser.username AS displayInteractionUserUsername,\n    lastWriterUser.username AS lastWriterUsername,\n    FriendsFeedScore.score AS score,\n    FeedPostSnapAction.currentFeedAction AS currentFeedAction,\n    FeedPostSnapAction.expirationTimestamp AS postSnapActionExpirationTimestamp,\n    FeedPostSnapAction.contextSessionId AS postSnapActionContextSessionId,\n    FeedPostSnapAction.snapId AS postSnapActionLastViewedSnapId\nFROM\nFeed\nLEFT OUTER JOIN Friend AS Friend ON Feed.friendRowId = Friend._id\nLEFT OUTER JOIN Friend AS lastInteractionUser ON Feed.lastInteractionUserId = lastInteractionUser._id\nLEFT OUTER JOIN Friend AS lastWriterUser ON Feed.lastInteractionWriterId = lastWriterUser._id\nLEFT OUTER JOIN StoryViewFriendStoriesActiveSnaps AS FriendStory ON (Feed.kind = 0 AND Friend.userId = FriendStory.userId)\nLEFT OUTER JOIN FriendsFeedScore ON Feed._id = FriendsFeedScore.feedRowId\nLEFT OUTER JOIN (SELECT conversationId, currentFeedAction, max(expirationTimestamp) AS expirationTimestamp, contextSessionId, snapId FROM PostSnapAction GROUP BY conversationId) AS FeedPostSnapAction\nON (\n    Feed.key = FeedPostSnapAction.conversationId\n)\nWHERE (Feed.lastInteractionTimestamp IS NOT NULL AND\n Feed.clearedTimestamp <= Feed.sortingTimestamp)", 0, null);
        }
        if (i <= 392 && i2 > 392) {
            ((C19506byj) interfaceC54340yek).c(num5, "ALTER TABLE UploadState\nADD COLUMN multipartMinChunkSizeBytes INTEGER NOT NULL DEFAULT 0", 0, null);
        }
        if (i <= 393 && i2 > 393) {
            ((C19506byj) interfaceC54340yek).c(num5, "PRAGMA legacy_alter_table=1", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "DROP VIEW IF EXISTS StoryViewPlayableFriendStoriesMapping", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "DROP VIEW IF EXISTS DiscoverFeedFriendStoriesViewV2", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "CREATE VIEW IF NOT EXISTS StoryViewPlayableFriendStoriesMapping AS\nSELECT\n    -- For Friend Stories, there is no linked MobStoryMetadata and Story.storyId resolves to username\n    Story.storyId AS storyId,\n    Story.userId AS userId,\n    Story._id AS storyRowId\nFROM Story\nLEFT OUTER JOIN MobStoryMetadata ON Story._id = MobStoryMetadata.storyRowId\nWHERE (\n    -- Include Friend Stories\n    Story.kind = 0 OR\n    -- Include Private Stories\n    (Story.kind = 1 AND MobStoryMetadata.groupStoryType = 1)\n)", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "CREATE VIEW IF NOT EXISTS DiscoverFeedFriendStoriesViewV2\nAS SELECT\n    Story._id,\n    Story.storyId AS storyId,\n    FirstUnviewedSnap.snapId AS firstUnviewedSnapId,\n    Friend.userId AS friendUserId,\n    Friend.displayName AS friendDisplayName,\n    Friend.friendLinkType AS friendLinkType,\n    Friend.username AS friendUsername,\n    Story.friendStoryPosterUserId AS friendStoryPosterUserId,\n    Story.displayName AS storyDisplayName,\n    Feed.specifiedName AS feedSpecifiedName,\n    Feed.participantString AS feedParticipantString,\n    Feed._id AS feedId,\n    Friend.bitmojiAvatarId,\n    Friend.bitmojiSelfieId,\n    COALESCE(Friend.storyMuted, 0) AS storyMuted,\n    Story.groupStoryType,\n    Story.viewed AS storyViewed,\n    latestTimeStamp AS storyLatestTimestamp,\n    latestExpirationTimestamp AS storyLatestExpirationTimestamp,\n    rankingId AS storyRankingId,\n    Story.lastSyncRequestId AS lastSyncRequestId,\n    Story.totalMediaDurationMs\nFROM\nStoryViewActiveSnaps AS Story\nLEFT OUTER JOIN MobStoryMetadata ON (Story.kind = 1 AND MobStoryMetadata.storyRowId = Story._id)\nLEFT OUTER JOIN Friend ON Friend.userId = Story.friendStoryPosterUserId\nLEFT OUTER JOIN Feed ON Feed.friendRowId = Friend._id\nLEFT OUTER JOIN (\n    SELECT\n    StorySnap.storyRowId,\n    Snap.snapId,\n    min(Snap.timestamp)\n    FROM StorySnap\n    LEFT OUTER JOIN Snap ON Snap._id = StorySnap.snapRowId\n    WHERE StorySnap.viewed = 0\n    GROUP BY StorySnap.storyRowId\n) AS FirstUnviewedSnap ON Story._id = FirstUnviewedSnap.storyRowId\nWHERE (\n        Story.kind = 0 -- StoryKind.FRIEND\n        AND (\n            -- StoryKind.FRIEND could include OUTGOING|FOLLOWING friends. Only show MUTUAL friends.\n            -- If Friend table is not yet populated, use rankingId as a signal for mutual friends.\n            friendLinkType = 0 OR (friendLinkType IS NULL AND rankingId NOT NULL)\n        )\n    ) OR (\n        Story.kind = 1 -- StoryKind.GROUP\n        AND MobStoryMetadata.groupStoryType IN (0, 1, 4) -- CUSTOM(0) / PRIVATE(1) / SHARED(4) Group Stories only\n        AND COALESCE(MobStoryMetadata.customStorySubtype, -1) != 1 -- filter out snap reply custom stories\n    )", 0, null);
        }
        if (i <= 394 && i2 > 394) {
            ((C19506byj) interfaceC54340yek).c(num5, "ALTER TABLE RetroPersistenceEvents\nADD COLUMN serveItemId TEXT", 0, null);
        }
        if (i <= 395 && i2 > 395) {
            ((C19506byj) interfaceC54340yek).c(num5, "ALTER TABLE Friend\nADD COLUMN bitmojiSceneId TEXT DEFAULT NULL", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "ALTER TABLE Friend\nADD COLUMN bitmojiBackgroundId TEXT DEFAULT NULL", 0, null);
        }
        if (i <= 396 && i2 > 396) {
            ((C19506byj) interfaceC54340yek).c(num5, "ALTER TABLE StorySnap\nADD COLUMN description TEXT DEFAULT NULL", 0, null);
        }
        if (i <= 397 && i2 > 397) {
            ((C19506byj) interfaceC54340yek).c(num5, "ALTER TABLE StorySnap\nADD COLUMN subscribeCount INTEGER", 0, null);
        }
        if (i <= 398 && i2 > 398) {
            ((C19506byj) interfaceC54340yek).c(num5, "CREATE TABLE IF NOT EXISTS PublicUserStory(\n    _id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n\n    -- Identifier of the Public story to which this saved timestamps belongs.\n    profileId TEXT NOT NULL UNIQUE,\n\n    -- The timestamp of when the last Ad happened\n    lastAdTimestamp INTEGER NOT NULL,\n\n    -- Content View time since last Ad\n    contentConsumedAfterLastAd INTEGER NOT NULL,\n\n    -- The timestamps of all snaps happened after an ad insertion\n    snapTimestamps TEXT NOT NULL\n)", 0, null);
        }
        if (i <= 399 && i2 > 399) {
            ((C19506byj) interfaceC54340yek).c(num5, "PRAGMA legacy_alter_table=1", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "ALTER TABLE Feed\nADD COLUMN lastMutatorUserId TEXT DEFAULT NULL", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "DROP VIEW IF EXISTS FriendsFeedView", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "CREATE VIEW IF NOT EXISTS FriendsFeedView\nAS SELECT\n    Feed._id,\n    coalesce(Feed.specifiedName, Feed.fitScreenParticipantString, Feed.participantString) AS feedDisplayName,\n    participantsSize,\n    Feed.lastInteractionTimestamp,\n    Feed.displayTimestamp,\n    Feed.displayInteractionType,\n    Feed.lastInteractionUserId,\n    Feed.clearedTimestamp,\n    Feed.kind,\n    Feed.key,\n    Friend._id AS friendRowId,\n    Friend.userId AS friendUserId,\n    Friend.friendmojiCategories,\n    Friend.displayName AS friendDisplayName,\n    Friend.username AS friendDisplayUsername,\n    Friend.friendmojiString,\n    Friend.streakLength,\n    Friend.streakExpiration,\n    Friend.bitmojiAvatarId,\n    Friend.bitmojiSelfieId,\n    Friend.birthday,\n    Friend.addedTimestamp,\n    Friend.reverseAddedTimestamp,\n    Friend.isOfficial,\n    Friend.isBrand,\n    Friend.businessCategory,\n    Friend.friendLinkType,\n    Friend.snapProId,\n    FriendStory.storyId AS friendStoryId,\n    FriendStory.isViewed AS friendStoryIsViewed,\n    FriendStory.latestSnapTimestamp AS friendStoryLatestTimestamp,\n    FriendStory.latestSnapExpirationTimestamp AS friendStoryLatestExpirationTimestamp,\n    FriendStory.firstUnviewedSnapId AS friendStoryFirstUnviewedSnapId,\n    Friend.storyMuted AS friendStoryMuted,\n    lastInteractionUser.userId AS displayInteractionUserId,\n    lastInteractionUser.displayName AS displayInteractionUserDisplayName,\n    lastInteractionUser.username AS displayInteractionUserUsername,\n    lastWriterUser.username AS lastWriterUsername,\n    Feed.lastMutatorUserId AS mutatorUserId,\n    FriendsFeedScore.score AS score,\n    FeedPostSnapAction.currentFeedAction AS currentFeedAction,\n    FeedPostSnapAction.expirationTimestamp AS postSnapActionExpirationTimestamp,\n    FeedPostSnapAction.contextSessionId AS postSnapActionContextSessionId,\n    FeedPostSnapAction.snapId AS postSnapActionLastViewedSnapId\nFROM\nFeed\nLEFT OUTER JOIN Friend AS Friend ON Feed.friendRowId = Friend._id\nLEFT OUTER JOIN Friend AS lastInteractionUser ON Feed.lastInteractionUserId = lastInteractionUser._id\nLEFT OUTER JOIN Friend AS lastWriterUser ON Feed.lastInteractionWriterId = lastWriterUser._id\nLEFT OUTER JOIN StoryViewFriendStoriesActiveSnaps AS FriendStory ON (Feed.kind = 0 AND Friend.userId = FriendStory.userId)\nLEFT OUTER JOIN FriendsFeedScore ON Feed._id = FriendsFeedScore.feedRowId\nLEFT OUTER JOIN (SELECT conversationId, currentFeedAction, max(expirationTimestamp) AS expirationTimestamp, contextSessionId, snapId FROM PostSnapAction GROUP BY conversationId) AS FeedPostSnapAction\nON (\n    Feed.key = FeedPostSnapAction.conversationId\n)\nWHERE (Feed.lastInteractionTimestamp IS NOT NULL AND\n Feed.clearedTimestamp <= Feed.sortingTimestamp)", 0, null);
        }
        if (i <= 400 && i2 > 400) {
            ((C19506byj) interfaceC54340yek).c(num5, "PRAGMA legacy_alter_table=1", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "DROP VIEW IF EXISTS FriendWithUsername", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "CREATE VIEW IF NOT EXISTS FriendWithUsername\nAS SELECT\n    Friend._id,\n    Friend._lastModifiedTimestamp,\n     -- Regarding nullability: CombinedUsername.encodedUsername is nullable to allow inserts to\n     -- work (an insert trigger adds encodedUsername, but SQLite does not allow it to be null in\n     -- the interim if it has the NOT NULL constraint). However, encodedUsername will never be null\n     -- in practice. There is a WHERE CombinedUsername.encodedUsername IS NOT NULL clause added to\n     -- this query just to eliminate even that outside chance.\n     -- When this was written, we were using SqlDelight 1.4, which does not infer from the IS NOT\n     -- NULL clause that username cannot be null, and emits the username model as nullable. It is\n     -- safe to cast these to non-nullable references using !!. SqlDelight 1.5 adds additional\n     -- non-nullable inferencing and fixes this particular case.\n    CombinedUsername.encodedUsername AS username,\n    Friend.userId,\n    Friend.displayName,\n    Friend.bitmojiAvatarId,\n    Friend.bitmojiSelfieId,\n    Friend.friendmojis,\n    Friend.friendmojiCategories,\n    Friend.phone,\n    Friend.score,\n    Friend.birthday,\n    Friend.sentToMe,\n    Friend.receivedFromMe,\n    Friend.addedTimestamp,\n    Friend.reverseAddedTimestamp,\n    Friend.lastMessageId,\n    Friend.unreadCount,\n    Friend.friendmojiString,\n    Friend.serverDisplayName,\n    Friend.streakLength,\n    Friend.streakExpiration,\n    Friend.friendLinkType,\n    Friend.storyMuted,\n    Friend.isPopular,\n    Friend.isOfficial,\n    Friend.isFideliusReady,\n    Friend.snapProId,\n    Friend.fideliusKeys,\n    Friend.isBrand,\n    Friend.businessCategory,\n    Friend.syncSource,\n    Friend.isCameosSharingSupported,\n    CombinedUsername.mutableUsername AS usernameForSorting\nFROM Friend\nINNER JOIN CombinedUsername ON Friend.combinedUsernameRowId=CombinedUsername._id\nWHERE CombinedUsername.encodedUsername IS NOT NULL", 0, null);
        }
        if (i <= 401 && i2 > 401) {
            ((C19506byj) interfaceC54340yek).c(num5, "ALTER TABLE Story ADD COLUMN adOrganicSignals BLOB", 0, null);
        }
        if (i <= 402 && i2 > 402) {
            ((C19506byj) interfaceC54340yek).c(num5, "CREATE TABLE IF NOT EXISTS SnapshotSnaps(\n    _id INTEGER NOT NULL PRIMARY KEY,\n\n    -- A user id associated with the snapshot\n    ownerId TEXT NOT NULL,\n\n    -- The source of this snapshot (friend sync, friend suggestion sync, etc)\n    sourceId INTEGER NOT NULL,\n\n    -- The actual snapshot snaps blob (proto)\n    snapshotSnaps BLOB NOT NULL\n)", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "CREATE UNIQUE INDEX IF NOT EXISTS SnapshotSnapsUnique ON SnapshotSnaps(ownerId)", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "CREATE INDEX IF NOT EXISTS SnapshotSnapsSourceId ON SnapshotSnaps(sourceId)", 0, null);
        }
        if (i <= 403 && i2 > 403) {
            ((C19506byj) interfaceC54340yek).c(num5, "ALTER TABLE MobStoryMetadata ADD COLUMN joinedTimestampMs INTEGER", 0, null);
        }
        if (i <= 404 && i2 > 404) {
            ((C19506byj) interfaceC54340yek).c(num5, "CREATE TABLE IF NOT EXISTS FeatureBadgeInteractions(\n    _id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n\n    -- unique identifier for placement\n    placementId INTEGER NOT NULL UNIQUE,\n\n    -- timestamp user last visited the placement\n    lastVisitTimestampMs INTEGER,\n\n    -- timestamp data was last synced for the placement\n    lastDataSyncTimestampMs INTEGER\n)", 0, null);
        }
        if (i <= 405 && i2 > 405) {
            ((C19506byj) interfaceC54340yek).c(num5, "DROP VIEW IF EXISTS DiscoverFeedFriendStoriesViewV2", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "CREATE VIEW IF NOT EXISTS DiscoverFeedFriendStoriesViewV2\nAS SELECT\n    Story._id,\n    Story.storyId AS storyId,\n    FirstUnviewedSnap.snapId AS firstUnviewedSnapId,\n    Friend.userId AS friendUserId,\n    Friend.displayName AS friendDisplayName,\n    Friend.friendLinkType AS friendLinkType,\n    Friend.username AS friendUsername,\n    Story.friendStoryPosterUserId AS friendStoryPosterUserId,\n    Story.displayName AS storyDisplayName,\n    Feed.specifiedName AS feedSpecifiedName,\n    Feed.participantString AS feedParticipantString,\n    Feed._id AS feedId,\n    Friend.bitmojiAvatarId,\n    Friend.bitmojiSelfieId,\n    COALESCE(Friend.storyMuted, 0) AS storyMuted,\n    Story.groupStoryType,\n    Story.viewed AS storyViewed,\n    latestTimeStamp AS storyLatestTimestamp,\n    latestExpirationTimestamp AS storyLatestExpirationTimestamp,\n    rankingId AS storyRankingId,\n    Story.lastSyncRequestId AS lastSyncRequestId,\n    Story.totalMediaDurationMs\nFROM\nStoryViewActiveSnaps AS Story\nLEFT OUTER JOIN MobStoryMetadata ON (Story.kind = 1 AND MobStoryMetadata.storyRowId = Story._id)\nLEFT OUTER JOIN FriendWithUsername AS Friend ON Friend.userId = Story.friendStoryPosterUserId\nLEFT OUTER JOIN Feed ON Feed.friendRowId = Friend._id\nLEFT OUTER JOIN (\n    SELECT\n    StorySnap.storyRowId,\n    Snap.snapId,\n    min(Snap.timestamp)\n    FROM StorySnap\n    LEFT OUTER JOIN Snap ON Snap._id = StorySnap.snapRowId\n    WHERE StorySnap.viewed = 0\n    GROUP BY StorySnap.storyRowId\n) AS FirstUnviewedSnap ON Story._id = FirstUnviewedSnap.storyRowId\nWHERE (\n        Story.kind = 0 -- StoryKind.FRIEND\n        AND (\n            -- StoryKind.FRIEND could include OUTGOING|FOLLOWING friends. Only show MUTUAL friends.\n            -- If Friend table is not yet populated, use rankingId as a signal for mutual friends.\n            friendLinkType = 0 OR (friendLinkType IS NULL AND rankingId NOT NULL)\n        )\n    ) OR (\n        Story.kind = 1 -- StoryKind.GROUP\n        AND MobStoryMetadata.groupStoryType IN (0, 1, 4) -- CUSTOM(0) / PRIVATE(1) / SHARED(4) Group Stories only\n        AND COALESCE(MobStoryMetadata.customStorySubtype, -1) != 1 -- filter out snap reply custom stories\n    )", 0, null);
        }
        if (i <= 406 && i2 > 406) {
            ((C19506byj) interfaceC54340yek).c(num5, "PRAGMA legacy_alter_table=1", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "DROP VIEW IF EXISTS FriendWithUsername", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "CREATE VIEW IF NOT EXISTS FriendWithUsername\nAS SELECT\n    Friend._id,\n    Friend._lastModifiedTimestamp,\n     -- Regarding nullability: CombinedUsername.encodedUsername is nullable to allow inserts to\n     -- work (an insert trigger adds encodedUsername, but SQLite does not allow it to be null in\n     -- the interim if it has the NOT NULL constraint). However, encodedUsername will never be null\n     -- in practice. There is a WHERE CombinedUsername.encodedUsername IS NOT NULL clause added to\n     -- this query just to eliminate even that outside chance.\n     -- When this was written, we were using SqlDelight 1.4, which does not infer from the IS NOT\n     -- NULL clause that username cannot be null, and emits the username model as nullable. It is\n     -- safe to cast these to non-nullable references using !!. SqlDelight 1.5 adds additional\n     -- non-nullable inferencing and fixes this particular case.\n    CombinedUsername.encodedUsername AS username,\n    Friend.userId,\n    Friend.displayName,\n    Friend.bitmojiAvatarId,\n    Friend.bitmojiSelfieId,\n    Friend.friendmojis,\n    Friend.friendmojiCategories,\n    Friend.phone,\n    Friend.score,\n    Friend.birthday,\n    Friend.sentToMe,\n    Friend.receivedFromMe,\n    Friend.addedTimestamp,\n    Friend.reverseAddedTimestamp,\n    Friend.lastMessageId,\n    Friend.unreadCount,\n    Friend.friendmojiString,\n    Friend.serverDisplayName,\n    Friend.streakLength,\n    Friend.streakExpiration,\n    Friend.friendLinkType,\n    Friend.storyMuted,\n    Friend.isPopular,\n    Friend.isOfficial,\n    Friend.isFideliusReady,\n    Friend.snapProId,\n    Friend.fideliusKeys,\n    Friend.isBrand,\n    Friend.businessCategory,\n    Friend.syncSource,\n    Friend.isCameosSharingSupported,\n    COALESCE(CombinedUsername.mutableUsername, CombinedUsername.originalUsername) AS usernameForSorting\nFROM Friend\nINNER JOIN CombinedUsername ON Friend.combinedUsernameRowId=CombinedUsername._id\nWHERE CombinedUsername.encodedUsername IS NOT NULL", 0, null);
        }
        if (i <= 407 && i2 > 407) {
            ((C19506byj) interfaceC54340yek).c(num5, "PRAGMA legacy_alter_table=1", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "DROP TRIGGER IF EXISTS CombinedUsernameUpdateTrigger", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "DROP TRIGGER IF EXISTS CombinedUsernameInsertTrigger", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "CREATE TABLE IF NOT EXISTS CombinedUsernameTemp(\n    _id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n    originalUsername TEXT NOT NULL UNIQUE,\n    mutableUsername TEXT UNIQUE,\n    encodedUsername TEXT NOT NULL\n)", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "INSERT INTO CombinedUsernameTemp(\n    _id,\n    originalUsername,\n    mutableUsername,\n    encodedUsername\n)\nSELECT\n    _id,\n    originalUsername,\n    mutableUsername,\n    encodedUsername\nFROM CombinedUsername", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "DROP TABLE CombinedUsername", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "ALTER TABLE CombinedUsernameTemp RENAME TO CombinedUsername", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "CREATE TRIGGER IF NOT EXISTS CombinedUsernameUpdateTrigger\nAFTER UPDATE OF originalUsername, mutableUsername ON CombinedUsername\nFOR EACH ROW\nBEGIN\n    UPDATE CombinedUsername SET encodedUsername=new.originalUsername || '|' || COALESCE(new.mutableUsername,'')\n        WHERE _id = new._id;\nEND", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "CREATE TRIGGER IF NOT EXISTS CombinedUsernameInsertTrigger\nAFTER INSERT ON CombinedUsername\nFOR EACH ROW\nBEGIN\n    UPDATE CombinedUsername SET encodedUsername=new.originalUsername || '|' || COALESCE(new.mutableUsername,'')\n        WHERE _id = new._id;\nEND", 0, null);
        }
        if (i <= 408 && i2 > 408) {
            ((C19506byj) interfaceC54340yek).c(num5, "DROP VIEW IF EXISTS FriendsFeedView", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "CREATE VIEW IF NOT EXISTS FriendsFeedView\nAS SELECT\n    Feed._id,\n    coalesce(Feed.specifiedName, Feed.fitScreenParticipantString, Feed.participantString) AS feedDisplayName,\n    participantsSize,\n    Feed.lastInteractionTimestamp,\n    Feed.displayTimestamp,\n    Feed.displayInteractionType,\n    Feed.lastInteractionUserId,\n    Feed.clearedTimestamp,\n    Feed.kind,\n    Feed.key,\n    Friend._id AS friendRowId,\n    Friend.userId AS friendUserId,\n    Friend.friendmojiCategories,\n    Friend.displayName AS friendDisplayName,\n    Friend.username AS friendDisplayUsername,\n    Friend.friendmojiString,\n    Friend.streakLength,\n    Friend.streakExpiration,\n    Friend.bitmojiAvatarId,\n    Friend.bitmojiSelfieId,\n    Friend.birthday,\n    Friend.addedTimestamp,\n    Friend.reverseAddedTimestamp,\n    Friend.isOfficial,\n    Friend.isBrand,\n    Friend.businessCategory,\n    Friend.friendLinkType,\n    Friend.snapProId,\n    FriendStory.storyId AS friendStoryId,\n    FriendStory.isViewed AS friendStoryIsViewed,\n    FriendStory.latestSnapTimestamp AS friendStoryLatestTimestamp,\n    FriendStory.latestSnapExpirationTimestamp AS friendStoryLatestExpirationTimestamp,\n    FriendStory.firstUnviewedSnapId AS friendStoryFirstUnviewedSnapId,\n    Friend.storyMuted AS friendStoryMuted,\n    lastInteractionUser.userId AS displayInteractionUserId,\n    lastInteractionUser.displayName AS displayInteractionUserDisplayName,\n    lastInteractionUser.username AS displayInteractionUserUsername,\n    lastWriterUser.username AS lastWriterUsername,\n    Feed.lastMutatorUserId AS mutatorUserId,\n    FriendsFeedScore.score AS score,\n    FeedPostSnapAction.currentFeedAction AS currentFeedAction,\n    FeedPostSnapAction.expirationTimestamp AS postSnapActionExpirationTimestamp,\n    FeedPostSnapAction.contextSessionId AS postSnapActionContextSessionId,\n    FeedPostSnapAction.snapId AS postSnapActionLastViewedSnapId\nFROM\nFeed\nLEFT OUTER JOIN FriendWithUsername AS Friend ON Feed.friendRowId = Friend._id\nLEFT OUTER JOIN Friend AS lastInteractionUser ON Feed.lastInteractionUserId = lastInteractionUser._id\nLEFT OUTER JOIN Friend AS lastWriterUser ON Feed.lastInteractionWriterId = lastWriterUser._id\nLEFT OUTER JOIN StoryViewFriendStoriesActiveSnaps AS FriendStory ON (Feed.kind = 0 AND Friend.userId = FriendStory.userId)\nLEFT OUTER JOIN FriendsFeedScore ON Feed._id = FriendsFeedScore.feedRowId\nLEFT OUTER JOIN (SELECT conversationId, currentFeedAction, max(expirationTimestamp) AS expirationTimestamp, contextSessionId, snapId FROM PostSnapAction GROUP BY conversationId) AS FeedPostSnapAction\nON (\n    Feed.key = FeedPostSnapAction.conversationId\n)\nWHERE (Feed.lastInteractionTimestamp IS NOT NULL AND\n Feed.clearedTimestamp <= Feed.sortingTimestamp)", 0, null);
        }
        if (i <= 409 && i2 > 409) {
            ((C19506byj) interfaceC54340yek).c(num5, "PRAGMA legacy_alter_table=1", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "DROP VIEW IF EXISTS FriendWithUsername", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "CREATE VIEW IF NOT EXISTS FriendWithUsername\nAS SELECT\n    Friend._id,\n    Friend._lastModifiedTimestamp,\n    CombinedUsername.encodedUsername AS username,\n    Friend.userId,\n    Friend.displayName,\n    Friend.bitmojiAvatarId,\n    Friend.bitmojiSelfieId,\n    Friend.bitmojiSceneId,\n    Friend.bitmojiBackgroundId,\n    Friend.friendmojis,\n    Friend.friendmojiCategories,\n    Friend.phone,\n    Friend.score,\n    Friend.birthday,\n    Friend.sentToMe,\n    Friend.receivedFromMe,\n    Friend.addedTimestamp,\n    Friend.reverseAddedTimestamp,\n    Friend.lastMessageId,\n    Friend.unreadCount,\n    Friend.friendmojiString,\n    Friend.serverDisplayName,\n    Friend.streakLength,\n    Friend.streakExpiration,\n    Friend.friendLinkType,\n    Friend.storyMuted,\n    Friend.isPopular,\n    Friend.isOfficial,\n    Friend.isFideliusReady,\n    Friend.snapProId,\n    Friend.fideliusKeys,\n    Friend.isBrand,\n    Friend.businessCategory,\n    Friend.syncSource,\n    Friend.isCameosSharingSupported,\n    COALESCE(CombinedUsername.mutableUsername, CombinedUsername.originalUsername) AS usernameForSorting\nFROM Friend\nINNER JOIN CombinedUsername ON Friend.combinedUsernameRowId=CombinedUsername._id\nWHERE CombinedUsername.encodedUsername IS NOT NULL", 0, null);
        }
        if (i <= 410 && i2 > 410) {
            ((C19506byj) interfaceC54340yek).c(num5, "ALTER TABLE Contact ADD COLUMN lastInteractionTimestamp INTEGER DEFAULT 0 NOT NULL", 0, null);
        }
        if (i <= 411 && i2 > 411) {
            ((C19506byj) interfaceC54340yek).c(num5, "ALTER TABLE UploadState\nADD COLUMN uploadLocationConfig TEXT DEFAULT NULL", 0, null);
        }
        if (i <= 412 && i2 > 412) {
            ((C19506byj) interfaceC54340yek).c(num5, "ALTER TABLE Contact ADD COLUMN lastOffPlatformShareDestination TEXT", 0, null);
        }
        if (i <= 413 && i2 > 413) {
            ((C19506byj) interfaceC54340yek).c(num5, "DROP VIEW IF EXISTS FriendsFeedView", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "CREATE VIEW IF NOT EXISTS FriendsFeedView\nAS SELECT\n    Feed._id,\n    coalesce(Feed.specifiedName, Feed.fitScreenParticipantString, Feed.participantString) AS feedDisplayName,\n    participantsSize,\n    Feed.lastInteractionTimestamp,\n    Feed.displayTimestamp,\n    Feed.displayInteractionType,\n    Feed.lastInteractionUserId,\n    Feed.clearedTimestamp,\n    Feed.kind,\n    Feed.key,\n    Friend._id AS friendRowId,\n    Friend.userId AS friendUserId,\n    Friend.friendmojiCategories,\n    Friend.displayName AS friendDisplayName,\n    Friend.username AS friendDisplayUsername,\n    Friend.friendmojiString,\n    Friend.streakLength,\n    Friend.streakExpiration,\n    Friend.bitmojiAvatarId,\n    Friend.bitmojiSelfieId,\n    Friend.birthday,\n    Friend.addedTimestamp,\n    Friend.reverseAddedTimestamp,\n    Friend.isOfficial,\n    Friend.isBrand,\n    Friend.businessCategory,\n    Friend.friendLinkType,\n    Friend.snapProId,\n    FriendStory.storyId AS friendStoryId,\n    FriendStory.isViewed AS friendStoryIsViewed,\n    FriendStory.latestSnapTimestamp AS friendStoryLatestTimestamp,\n    FriendStory.latestSnapExpirationTimestamp AS friendStoryLatestExpirationTimestamp,\n    FriendStory.firstUnviewedSnapId AS friendStoryFirstUnviewedSnapId,\n    Friend.storyMuted AS friendStoryMuted,\n    lastInteractionUser.userId AS displayInteractionUserId,\n    lastInteractionUser.displayName AS displayInteractionUserDisplayName,\n    lastInteractionUser.username AS displayInteractionUserUsername,\n    lastWriterUser.username AS lastWriterUsername,\n    Feed.lastMutatorUserId AS mutatorUserId,\n    FriendsFeedScore.score AS score,\n    FeedPostSnapAction.currentFeedAction AS currentFeedAction,\n    FeedPostSnapAction.expirationTimestamp AS postSnapActionExpirationTimestamp,\n    FeedPostSnapAction.contextSessionId AS postSnapActionContextSessionId,\n    FeedPostSnapAction.snapId AS postSnapActionLastViewedSnapId\nFROM\nFeed\nLEFT OUTER JOIN FriendWithUsername AS Friend ON Feed.friendRowId = Friend._id\nLEFT OUTER JOIN FriendWithUsername AS lastInteractionUser ON Feed.lastInteractionUserId = lastInteractionUser._id\nLEFT OUTER JOIN FriendWithUsername AS lastWriterUser ON Feed.lastInteractionWriterId = lastWriterUser._id\nLEFT OUTER JOIN StoryViewFriendStoriesActiveSnaps AS FriendStory ON (Feed.kind = 0 AND Friend.userId = FriendStory.userId)\nLEFT OUTER JOIN FriendsFeedScore ON Feed._id = FriendsFeedScore.feedRowId\nLEFT OUTER JOIN (SELECT conversationId, currentFeedAction, max(expirationTimestamp) AS expirationTimestamp, contextSessionId, snapId FROM PostSnapAction GROUP BY conversationId) AS FeedPostSnapAction\nON (\n    Feed.key = FeedPostSnapAction.conversationId\n)\nWHERE (Feed.lastInteractionTimestamp IS NOT NULL AND\n Feed.clearedTimestamp <= Feed.sortingTimestamp)", 0, null);
        }
        if (i <= 414 && i2 > 414) {
            ((C19506byj) interfaceC54340yek).c(num5, "ALTER TABLE StorySnap\nADD COLUMN bloopsGenders TEXT DEFAULT NULL", 0, null);
        }
        if (i <= 415 && i2 > 415) {
            ((C19506byj) interfaceC54340yek).c(num5, "CREATE TABLE IF NOT EXISTS InAppWarning (\n    _id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n    -- The unique warning id to identify the DF database entry, together with user id.\n    warningId TEXT NOT NULL UNIQUE,\n    -- Enum integer for warning type. See the protobuf defintion for the mapping.\n    -- https://github.sc-corp.net/Snapchat/pb_schema/blob/master/proto/abuse/support/in_app_warning.proto\n    -- Note that we do not add adapter to convert to-and-from integer because we want to allow backward\n    -- compatiblity if we introduce new warning types. But converting with a old protobuf libary will not\n    -- allow us to do so. We will be forwarding this enum integer to ask the backend for warning messages.\n    warningType INTEGER NOT NULL DEFAULT 0,\n    -- The acknowledgement timestamp in ms. It will be 0 for unacknowledged warnings.\n    acknowledgedAtTs INTEGER NOT NULL,\n    -- The warning creation timestamp in ms. It allows sorting of warning records for prompting order.\n    createdAtTs INTEGER NOT NULL\n)", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "CREATE INDEX IF NOT EXISTS inAppWarning_warningId ON InAppWarning(warningId)", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "CREATE INDEX IF NOT EXISTS inAppWarning_acknowledgedAtTs_createdAtTs ON InAppWarning(acknowledgedAtTs, createdAtTs)", 0, null);
        }
        if (i <= 416 && i2 > 416) {
            ((C19506byj) interfaceC54340yek).c(num5, "DROP INDEX IF EXISTS inAppWarning_acknowledgedAtTs_createdAtTs", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "CREATE INDEX IF NOT EXISTS inAppWarning_createdAtTs ON InAppWarning(createdAtTs)", 0, null);
        }
        if (i <= 417 && i2 > 417) {
            ((C19506byj) interfaceC54340yek).c(num5, "CREATE INDEX IF NOT EXISTS inAppWarning_acknowledgedAtTs ON InAppWarning(acknowledgedAtTs)", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "DROP INDEX IF EXISTS inAppWarning_createdAtTs", 0, null);
        }
        if (i <= 418 && i2 > 418) {
            ((C19506byj) interfaceC54340yek).c(num5, "ALTER TABLE StorySnap\nADD COLUMN sponsorProfileId TEXT DEFAULT NULL", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "ALTER TABLE StorySnap\nADD COLUMN sponsorDisplayName TEXT DEFAULT NULL", 0, null);
        }
        if (i <= 419 && i2 > 419) {
            ((C19506byj) interfaceC54340yek).c(num5, "ALTER TABLE InAppWarning ADD COLUMN lastModifiedVersion INTEGER NOT NULL DEFAULT 0", 0, null);
        }
        if (i <= 420 && i2 > 420) {
            ((C19506byj) interfaceC54340yek).c(num5, "ALTER TABLE MobStoryMetadata\nADD COLUMN exemptedBlockMemberUserIds TEXT", 0, null);
        }
        if (i <= 421 && i2 > 421) {
            ((C19506byj) interfaceC54340yek).c(num5, "ALTER TABLE UploadAssetResult ADD COLUMN assetId TEXT NOT NULL DEFAULT ''", 0, null);
        }
        if (i <= 422 && i2 > 422) {
            ((C19506byj) interfaceC54340yek).c(num5, "ALTER TABLE MobStoryMetadata\nADD COLUMN moderatorUserIds TEXT", 0, null);
        }
        if (i <= 423 && i2 > 423) {
            ((C19506byj) interfaceC54340yek).c(num5, "DROP TABLE IF EXISTS LocalMessageAction", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "DROP TABLE IF EXISTS MixedModeMediaRef", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "DROP TABLE IF EXISTS ProfileSavedMediaMessage", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "DROP TABLE IF EXISTS ProfileSavedMediaMessageFetchMetadata", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "DROP TABLE IF EXISTS ProfileSavedAttachmentMessage", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "DROP TABLE IF EXISTS ProfileSavedAttachmentMessageFetchMetadata", 0, null);
        }
        if (i <= 424 && i2 > 424) {
            ((C19506byj) interfaceC54340yek).c(num5, "CREATE TABLE IF NOT EXISTS OPSCameraPreviewState(\n    _id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n    uIState TEXT NOT NULL,\n    latestSnapSentTimestamp INTEGER NOT NULL,\n    onPlatformSnapSentCount INTEGER NOT NULL,\n    hasSeenTooltip TEXT NOT NULL\n)", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "INSERT INTO OPSCameraPreviewState (\nuIState,\nlatestSnapSentTimestamp,\nonPlatformSnapSentCount,\nhasSeenTooltip\n)\nVALUES (\"Disabled\", 0, 0, \"false\")", 0, null);
        }
        if (i <= 425 && i2 > 425) {
            ((C19506byj) interfaceC54340yek).c(num5, "ALTER TABLE Contact ADD COLUMN contactId INTEGER DEFAULT -1 NOT NULL", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "ALTER TABLE Contact ADD COLUMN lastSyncedTimestamp INTEGER DEFAULT 0 NOT NULL", 0, null);
        }
        if (i <= 426 && i2 > 426) {
            ((C19506byj) interfaceC54340yek).c(num5, "ALTER TABLE Friend\nADD COLUMN isBitmojiFriendmojiSharingSupported INTEGER NOT NULL DEFAULT 1", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "PRAGMA legacy_alter_table=1", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "DROP VIEW IF EXISTS FriendWithUsername", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "CREATE VIEW IF NOT EXISTS FriendWithUsername\nAS SELECT\n    Friend._id,\n    Friend._lastModifiedTimestamp,\n    CombinedUsername.encodedUsername AS username,\n    Friend.userId,\n    Friend.displayName,\n    Friend.bitmojiAvatarId,\n    Friend.bitmojiSelfieId,\n    Friend.bitmojiSceneId,\n    Friend.bitmojiBackgroundId,\n    Friend.friendmojis,\n    Friend.friendmojiCategories,\n    Friend.phone,\n    Friend.score,\n    Friend.birthday,\n    Friend.sentToMe,\n    Friend.receivedFromMe,\n    Friend.addedTimestamp,\n    Friend.reverseAddedTimestamp,\n    Friend.lastMessageId,\n    Friend.unreadCount,\n    Friend.friendmojiString,\n    Friend.serverDisplayName,\n    Friend.streakLength,\n    Friend.streakExpiration,\n    Friend.friendLinkType,\n    Friend.storyMuted,\n    Friend.isPopular,\n    Friend.isOfficial,\n    Friend.isFideliusReady,\n    Friend.snapProId,\n    Friend.fideliusKeys,\n    Friend.isBrand,\n    Friend.businessCategory,\n    Friend.syncSource,\n    Friend.isCameosSharingSupported,\n    Friend.isBitmojiFriendmojiSharingSupported,\n    COALESCE(CombinedUsername.mutableUsername, CombinedUsername.originalUsername) AS usernameForSorting\nFROM Friend\nINNER JOIN CombinedUsername ON Friend.combinedUsernameRowId=CombinedUsername._id\nWHERE CombinedUsername.encodedUsername IS NOT NULL", 0, null);
        }
        if (i <= 427 && i2 > 427) {
            ((C19506byj) interfaceC54340yek).c(num5, "ALTER TABLE Contact ADD COLUMN rawPhone TEXT DEFAULT NULL", 0, null);
        }
        if (i <= 428 && i2 > 428) {
            ((C19506byj) interfaceC54340yek).c(num5, "PRAGMA legacy_alter_table=1", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "ALTER TABLE Friend\nADD COLUMN cameosSharingPolicy INTEGER", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "DROP VIEW IF EXISTS FriendWithUsername", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "CREATE VIEW IF NOT EXISTS FriendWithUsername\nAS SELECT\n    Friend._id,\n    Friend._lastModifiedTimestamp,\n    CombinedUsername.encodedUsername AS username,\n    Friend.userId,\n    Friend.displayName,\n    Friend.bitmojiAvatarId,\n    Friend.bitmojiSelfieId,\n    Friend.bitmojiSceneId,\n    Friend.bitmojiBackgroundId,\n    Friend.friendmojis,\n    Friend.friendmojiCategories,\n    Friend.phone,\n    Friend.score,\n    Friend.birthday,\n    Friend.sentToMe,\n    Friend.receivedFromMe,\n    Friend.addedTimestamp,\n    Friend.reverseAddedTimestamp,\n    Friend.lastMessageId,\n    Friend.unreadCount,\n    Friend.friendmojiString,\n    Friend.serverDisplayName,\n    Friend.streakLength,\n    Friend.streakExpiration,\n    Friend.friendLinkType,\n    Friend.storyMuted,\n    Friend.isPopular,\n    Friend.isOfficial,\n    Friend.isFideliusReady,\n    Friend.snapProId,\n    Friend.fideliusKeys,\n    Friend.isBrand,\n    Friend.businessCategory,\n    Friend.syncSource,\n    Friend.isCameosSharingSupported,\n    Friend.isBitmojiFriendmojiSharingSupported,\n    Friend.cameosSharingPolicy,\n    COALESCE(CombinedUsername.mutableUsername, CombinedUsername.originalUsername) AS usernameForSorting\nFROM Friend\nINNER JOIN CombinedUsername ON Friend.combinedUsernameRowId=CombinedUsername._id\nWHERE CombinedUsername.encodedUsername IS NOT NULL", 0, null);
        }
        if (i <= 429 && i2 > 429) {
            ((C19506byj) interfaceC54340yek).c(num5, "CREATE TABLE IF NOT EXISTS FeatureBadge(\n    _id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n\n    -- unique identifier for badge\n    badgeId INTEGER NOT NULL UNIQUE,\n\n    -- unique identifier for placement\n    placementId INTEGER NOT NULL UNIQUE,\n\n    -- identifier for the badge targeting criteria\n    campaignId INTEGER NOT NULL,\n\n    -- epoch time when badge became eligible on server\n    eligibleTimestampMs INTEGER NOT NULL,\n\n    -- epoch time when badge expires\n    expirationTimestampMs INTEGER NOT NULL,\n\n    UNIQUE(placementId, campaignId, eligibleTimestampMs)\n)", 0, null);
        }
        if (i <= 430 && i2 > 430) {
            ((C19506byj) interfaceC54340yek).c(num5, "UPDATE OPSCameraPreviewState\nSET uIState = \"Disabled\",\n    latestSnapSentTimestamp = 0,\n    onPlatformSnapSentCount = 0,\n    hasSeenTooltip = \"false\"\nWHERE _id = 1", 0, null);
        }
        if (i <= 431 && i2 > 431) {
            ((C19506byj) interfaceC54340yek).c(num5, "CREATE TABLE IF NOT EXISTS BillboardStrings(\n    _id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n    stringKey TEXT NOT NULL,\n    locale TEXT NOT NULL,\n    message TEXT NOT NULL,\n    UNIQUE(stringKey, locale) ON CONFLICT REPLACE\n)", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "CREATE INDEX IF NOT EXISTS billboardStrings_key_locale ON BillboardStrings(stringKey, locale)", 0, null);
        }
        if (i <= 432 && i2 > 432) {
            ((C19506byj) interfaceC54340yek).c(num5, "ALTER TABLE ConnectedApps\nADD COLUMN isConnected INTEGER NOT NULL DEFAULT 1", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "ALTER TABLE ConnectedApps\nADD COLUMN hasPrivateStorageData INTEGER NOT NULL DEFAULT 0", 0, null);
        }
        if (i <= 433 && i2 > 433) {
            ((C19506byj) interfaceC54340yek).c(num5, "CREATE TABLE IF NOT EXISTS CkIdentityWebViewConsent(\n    _id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n    snapKitApplicationId TEXT NOT NULL UNIQUE,\n    lastConsentTimestamp INTEGER NOT NULL DEFAULT 0\n)", 0, null);
        }
        if (i <= 434 && i2 > 434) {
            ((C19506byj) interfaceC54340yek).c(num5, "ALTER TABLE StorySnap ADD COLUMN liveRepliesCount INTEGER", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "ALTER TABLE StorySnap ADD COLUMN pendingRepliesCount INTEGER", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "ALTER TABLE StorySnap ADD COLUMN newPendingRepliesCount INTEGER", 0, null);
        }
        if (i <= 435 && i2 > 435) {
            ((C19506byj) interfaceC54340yek).c(num5, "ALTER TABLE MobStoryMetadata ADD COLUMN verifiedCommunityProfileMetadata BLOB", 0, null);
        }
        if (i <= 436 && i2 > 436) {
            ((C19506byj) interfaceC54340yek).c(num5, "ALTER TABLE MultipartUploadState ADD COLUMN uploadUrl TEXT DEFAULT NULL", 0, null);
        }
        if (i <= 437 && i2 > 437) {
            ((C19506byj) interfaceC54340yek).c(num5, "PRAGMA legacy_alter_table=1", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "CREATE VIEW NullFriends AS SELECT Friend._id FROM Friend WHERE Friend.userId IS NULL", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "DELETE FROM FriendsFeedScore\nWHERE FriendsFeedScore.feedRowId IN (\n    SELECT Feed._id FROM Feed\n    WHERE Feed.friendRowId IN NullFriends OR Feed.lastInteractionUserId IN NullFriends\n)", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "DELETE FROM FeedMember\nWHERE FeedMember.feedRowId IN (\n    SELECT Feed._id FROM Feed\n    WHERE Feed.friendRowId IN NullFriends OR Feed.lastInteractionUserId IN NullFriends\n)", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "DELETE FROM Feed\nWHERE friendRowId IN NullFriends OR lastInteractionUserId IN NullFriends", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "DELETE FROM FeedMember WHERE friendRowId IN NullFriends", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "DELETE FROM FriendScore WHERE friendRowId IN NullFriends", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "DELETE FROM SuggestedFriendPlacement WHERE friendRowId IN NullFriends", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "DELETE FROM BestFriend WHERE friendRowId IN NullFriends", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "DELETE FROM Contact WHERE friendRowId IN NullFriends", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "DELETE FROM FriendWhoAddedMe WHERE friendRowId IN NullFriends", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "DELETE FROM SuggestedFriend WHERE friendRowId IN NullFriends", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "DELETE FROM InvalidFriend WHERE friendRowId IN NullFriends", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "DELETE FROM SuggestedFriendDeltaForce WHERE friendRowId IN NullFriends", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "DELETE FROM SuggestedFriendPlacementDeltaForce WHERE friendRowId IN NullFriends", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "DELETE FROM StoryReferences WHERE friendRowId IN NullFriends", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "DELETE FROM FriendCaching WHERE friendRowId IN NullFriends", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "DELETE FROM MobStoryMetadata WHERE creatorFriendRowId IN NullFriends", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "DROP VIEW IF EXISTS NullFriends", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "CREATE TABLE IF NOT EXISTS FriendTemp(\n    _id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n    _lastModifiedTimestamp INTEGER,\n    username TEXT NOT NULL UNIQUE,\n    combinedUsernameRowId INTEGER NOT NULL UNIQUE,\n    userId TEXT NOT NULL UNIQUE,\n\n    displayName TEXT,\n    bitmojiAvatarId TEXT,\n    bitmojiSelfieId TEXT,\n    friendmojis TEXT,\n    friendmojiCategories TEXT, -- comma separated list of friendmoji categories returned by the server.\n    phone TEXT,\n    score INTEGER,\n    birthday INTEGER,\n    sentToMe INTEGER,\n    receivedFromMe INTEGER,\n    addedTimestamp INTEGER,\n    reverseAddedTimestamp INTEGER,\n\n    lastMessageId INTEGER,\n\n    unreadCount INTEGER,\n    friendmojiString INTEGER,\n    serverDisplayName TEXT,\n\n    streakLength INTEGER,\n    streakExpiration INTEGER,\n    friendLinkType INTEGER,\n\n    storyMuted INTEGER NOT NULL DEFAULT 0,\n\n    isPopular INTEGER NOT NULL DEFAULT 0,\n    isOfficial INTEGER NOT NULL DEFAULT 0,\n\n    isFideliusReady INTEGER NOT NULL DEFAULT 1,\n\n    snapProId TEXT,\n    fideliusKeys BLOB ,\n\n    isBrand INTEGER NOT NULL DEFAULT 0,\n    businessCategory INTEGER,\n\n    syncSource INTEGER NOT NULL DEFAULT 0,\n\n    isCameosSharingSupported INTEGER NOT NULL DEFAULT 0,\n\n    bitmojiSceneId TEXT,\n    bitmojiBackgroundId TEXT,\n\n    isBitmojiFriendmojiSharingSupported INTEGER NOT NULL DEFAULT 1,\n\n    cameosSharingPolicy INTEGER\n)", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "INSERT INTO FriendTemp(\n    _id,\n    _lastModifiedTimestamp,\n    username,\n    combinedUsernameRowId,\n    userId,\n    displayName,\n    bitmojiAvatarId,\n    bitmojiSelfieId,\n    friendmojis,\n    friendmojiCategories,\n    phone,\n    score,\n    birthday,\n    sentToMe,\n    receivedFromMe,\n    addedTimestamp,\n    reverseAddedTimestamp,\n    lastMessageId,\n    unreadCount,\n    friendmojiString,\n    serverDisplayName,\n    streakLength,\n    streakExpiration,\n    friendLinkType,\n    storyMuted,\n    isPopular,\n    isOfficial,\n    isFideliusReady,\n    snapProId,\n    fideliusKeys,\n    isBrand,\n    businessCategory,\n    syncSource,\n    isCameosSharingSupported,\n    bitmojiSceneId,\n    bitmojiBackgroundId,\n    isBitmojiFriendmojiSharingSupported,\n    cameosSharingPolicy\n)\nSELECT\n    _id,\n    _lastModifiedTimestamp,\n    username,\n    combinedUsernameRowId,\n    userId,\n    displayName,\n    bitmojiAvatarId,\n    bitmojiSelfieId,\n    friendmojis,\n    friendmojiCategories,\n    phone,\n    score,\n    birthday,\n    sentToMe,\n    receivedFromMe,\n    addedTimestamp,\n    reverseAddedTimestamp,\n    lastMessageId,\n    unreadCount,\n    friendmojiString,\n    serverDisplayName,\n    streakLength,\n    streakExpiration,\n    friendLinkType,\n    storyMuted,\n    isPopular,\n    isOfficial,\n    isFideliusReady,\n    snapProId,\n    fideliusKeys,\n    isBrand,\n    businessCategory,\n    syncSource,\n    isCameosSharingSupported,\n    bitmojiSceneId,\n    bitmojiBackgroundId,\n    isBitmojiFriendmojiSharingSupported,\n    cameosSharingPolicy\nFROM Friend WHERE userId IS NOT NULL", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "DROP TABLE Friend", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "ALTER TABLE FriendTemp RENAME TO Friend", 0, null);
        }
        if (i <= 438 && i2 > 438) {
            ((C19506byj) interfaceC54340yek).c(num5, "ALTER TABLE OPSCameraPreviewState\nADD COLUMN shareSheetSessionStartTimestamp INTEGER NOT NULL DEFAULT 0", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "ALTER TABLE OPSCameraPreviewState\nADD COLUMN shareSheetSessionImpressionCount INTEGER NOT NULL DEFAULT 0", 0, null);
        }
        if (i <= 439 && i2 > 439) {
            ((C19506byj) interfaceC54340yek).c(num5, "PRAGMA legacy_alter_table=1", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "ALTER TABLE Feed\nADD COLUMN pinnedTimestamp INTEGER DEFAULT 0", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "DROP VIEW IF EXISTS FriendsFeedView", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "CREATE VIEW IF NOT EXISTS FriendsFeedView\nAS SELECT\n    Feed._id,\n    coalesce(Feed.specifiedName, Feed.fitScreenParticipantString, Feed.participantString) AS feedDisplayName,\n    participantsSize,\n    Feed.lastInteractionTimestamp,\n    Feed.displayTimestamp,\n    Feed.displayInteractionType,\n    Feed.lastInteractionUserId,\n    Feed.clearedTimestamp,\n    Feed.pinnedTimestamp,\n    Feed.kind,\n    Feed.key,\n    Friend._id AS friendRowId,\n    Friend.userId AS friendUserId,\n    Friend.friendmojiCategories,\n    Friend.displayName AS friendDisplayName,\n    Friend.username AS friendDisplayUsername,\n    Friend.friendmojiString,\n    Friend.streakLength,\n    Friend.streakExpiration,\n    Friend.bitmojiAvatarId,\n    Friend.bitmojiSelfieId,\n    Friend.birthday,\n    Friend.addedTimestamp,\n    Friend.reverseAddedTimestamp,\n    Friend.isOfficial,\n    Friend.isBrand,\n    Friend.businessCategory,\n    Friend.friendLinkType,\n    Friend.snapProId,\n    FriendStory.storyId AS friendStoryId,\n    FriendStory.isViewed AS friendStoryIsViewed,\n    FriendStory.latestSnapTimestamp AS friendStoryLatestTimestamp,\n    FriendStory.latestSnapExpirationTimestamp AS friendStoryLatestExpirationTimestamp,\n    FriendStory.firstUnviewedSnapId AS friendStoryFirstUnviewedSnapId,\n    Friend.storyMuted AS friendStoryMuted,\n    lastInteractionUser.userId AS displayInteractionUserId,\n    lastInteractionUser.displayName AS displayInteractionUserDisplayName,\n    lastInteractionUser.username AS displayInteractionUserUsername,\n    lastWriterUser.username AS lastWriterUsername,\n    Feed.lastMutatorUserId AS mutatorUserId,\n    FriendsFeedScore.score AS score,\n    FeedPostSnapAction.currentFeedAction AS currentFeedAction,\n    FeedPostSnapAction.expirationTimestamp AS postSnapActionExpirationTimestamp,\n    FeedPostSnapAction.contextSessionId AS postSnapActionContextSessionId,\n    FeedPostSnapAction.snapId AS postSnapActionLastViewedSnapId\nFROM\nFeed\nLEFT OUTER JOIN FriendWithUsername AS Friend ON Feed.friendRowId = Friend._id\nLEFT OUTER JOIN FriendWithUsername AS lastInteractionUser ON Feed.lastInteractionUserId = lastInteractionUser._id\nLEFT OUTER JOIN FriendWithUsername AS lastWriterUser ON Feed.lastInteractionWriterId = lastWriterUser._id\nLEFT OUTER JOIN StoryViewFriendStoriesActiveSnaps AS FriendStory ON (Feed.kind = 0 AND Friend.userId = FriendStory.userId)\nLEFT OUTER JOIN FriendsFeedScore ON Feed._id = FriendsFeedScore.feedRowId\nLEFT OUTER JOIN (SELECT conversationId, currentFeedAction, max(expirationTimestamp) AS expirationTimestamp, contextSessionId, snapId FROM PostSnapAction GROUP BY conversationId) AS FeedPostSnapAction\nON (\n    Feed.key = FeedPostSnapAction.conversationId\n)\nWHERE (Feed.lastInteractionTimestamp IS NOT NULL AND\n Feed.clearedTimestamp <= Feed.sortingTimestamp)", 0, null);
        }
        if (i <= 440 && i2 > 440) {
            ((C19506byj) interfaceC54340yek).c(num5, "CREATE TABLE IF NOT EXISTS InvitedFriend(\n    _id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n    -- temp user id till the user registers with their phone number\n    userID TEXT NOT NULL UNIQUE,\n    -- E.164 formatted number\n    formattedPhoneNumber TEXT NOT NULL,\n    -- display name from the invited friend link\n    displayName TEXT\n)", 0, null);
        }
        if (i <= 441 && i2 > 441) {
            ((C19506byj) interfaceC54340yek).c(num5, "PRAGMA legacy_alter_table=1", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "CREATE TABLE IF NOT EXISTS CombinedUsernameTemp(\n    _id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n    originalUsername TEXT NOT NULL UNIQUE,\n    mutableUsername TEXT,\n    encodedUsername TEXT NOT NULL\n)", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "INSERT INTO CombinedUsernameTemp(\n    _id,\n    originalUsername,\n    mutableUsername,\n    encodedUsername\n)\nSELECT\n    _id,\n    originalUsername,\n    mutableUsername,\n    encodedUsername\nFROM CombinedUsername", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "DROP TRIGGER IF EXISTS CombinedUsernameUpdateTrigger", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "DROP TRIGGER IF EXISTS CombinedUsernameInsertTrigger", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "DROP TABLE CombinedUsername", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "ALTER TABLE CombinedUsernameTemp RENAME TO CombinedUsername", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "CREATE INDEX IF NOT EXISTS combinedUsername_idx_usernameSearch ON CombinedUsername(mutableUsername)", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "CREATE TRIGGER IF NOT EXISTS CombinedUsernameUpdateTrigger\nAFTER UPDATE OF originalUsername, mutableUsername ON CombinedUsername\nFOR EACH ROW\nBEGIN\n    UPDATE CombinedUsername SET encodedUsername=new.originalUsername || '|' || COALESCE(new.mutableUsername,'')\n        WHERE _id = new._id;\nEND", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "CREATE TRIGGER IF NOT EXISTS CombinedUsernameInsertTrigger\nAFTER INSERT ON CombinedUsername\nFOR EACH ROW\nBEGIN\n    UPDATE CombinedUsername SET encodedUsername=new.originalUsername || '|' || COALESCE(new.mutableUsername,'')\n        WHERE _id = new._id;\nEND", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "CREATE TABLE IF NOT EXISTS FriendTemp(\n    _id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n    _lastModifiedTimestamp INTEGER,\n    username TEXT NOT NULL,\n    combinedUsernameRowId INTEGER NOT NULL,\n    userId TEXT NOT NULL UNIQUE,\n\n    displayName TEXT,\n    bitmojiAvatarId TEXT,\n    bitmojiSelfieId TEXT,\n    friendmojis TEXT,\n    friendmojiCategories TEXT, -- comma separated list of friendmoji categories returned by the server.\n    phone TEXT,\n    score INTEGER,\n    birthday INTEGER,\n    sentToMe INTEGER,\n    receivedFromMe INTEGER,\n    addedTimestamp INTEGER,\n    reverseAddedTimestamp INTEGER,\n\n    lastMessageId INTEGER,\n\n    unreadCount INTEGER,\n    friendmojiString INTEGER,\n    serverDisplayName TEXT,\n\n    streakLength INTEGER,\n    streakExpiration INTEGER,\n    friendLinkType INTEGER,\n\n    storyMuted INTEGER NOT NULL DEFAULT 0,\n\n    isPopular INTEGER NOT NULL DEFAULT 0,\n    isOfficial INTEGER NOT NULL DEFAULT 0,\n\n    isFideliusReady INTEGER NOT NULL DEFAULT 1,\n\n    snapProId TEXT,\n    fideliusKeys BLOB ,\n\n    isBrand INTEGER NOT NULL DEFAULT 0,\n    businessCategory INTEGER,\n\n    syncSource INTEGER NOT NULL DEFAULT 0,\n\n    isCameosSharingSupported INTEGER NOT NULL DEFAULT 0,\n\n    bitmojiSceneId TEXT,\n    bitmojiBackgroundId TEXT,\n\n    isBitmojiFriendmojiSharingSupported INTEGER NOT NULL DEFAULT 1,\n\n    cameosSharingPolicy INTEGER\n)", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "INSERT INTO FriendTemp(\n    _id,\n    _lastModifiedTimestamp,\n    username,\n    combinedUsernameRowId,\n    userId,\n    displayName,\n    bitmojiAvatarId,\n    bitmojiSelfieId,\n    friendmojis,\n    friendmojiCategories,\n    phone,\n    score,\n    birthday,\n    sentToMe,\n    receivedFromMe,\n    addedTimestamp,\n    reverseAddedTimestamp,\n    lastMessageId,\n    unreadCount,\n    friendmojiString,\n    serverDisplayName,\n    streakLength,\n    streakExpiration,\n    friendLinkType,\n    storyMuted,\n    isPopular,\n    isOfficial,\n    isFideliusReady,\n    snapProId,\n    fideliusKeys,\n    isBrand,\n    businessCategory,\n    syncSource,\n    isCameosSharingSupported,\n    bitmojiSceneId,\n    bitmojiBackgroundId,\n    isBitmojiFriendmojiSharingSupported,\n    cameosSharingPolicy\n)\nSELECT\n    _id,\n    _lastModifiedTimestamp,\n    username,\n    combinedUsernameRowId,\n    userId,\n    displayName,\n    bitmojiAvatarId,\n    bitmojiSelfieId,\n    friendmojis,\n    friendmojiCategories,\n    phone,\n    score,\n    birthday,\n    sentToMe,\n    receivedFromMe,\n    addedTimestamp,\n    reverseAddedTimestamp,\n    lastMessageId,\n    unreadCount,\n    friendmojiString,\n    serverDisplayName,\n    streakLength,\n    streakExpiration,\n    friendLinkType,\n    storyMuted,\n    isPopular,\n    isOfficial,\n    isFideliusReady,\n    snapProId,\n    fideliusKeys,\n    isBrand,\n    businessCategory,\n    syncSource,\n    isCameosSharingSupported,\n    bitmojiSceneId,\n    bitmojiBackgroundId,\n    isBitmojiFriendmojiSharingSupported,\n    cameosSharingPolicy\nFROM Friend", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "DROP TABLE Friend", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "ALTER TABLE FriendTemp RENAME TO Friend", 0, null);
        }
        if (i <= 442 && i2 > 442) {
            ((C19506byj) interfaceC54340yek).c(num5, "PRAGMA legacy_alter_table=1", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "ALTER TABLE Friend\nADD COLUMN reverseBestFriendRanking INTEGER", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "ALTER TABLE Friend\nADD COLUMN isPinnedBestFriend INTEGER NOT NULL DEFAULT 0", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "ALTER TABLE Friend\nADD COLUMN plusBadgeVisibility INTEGER NOT NULL DEFAULT 0", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "DROP VIEW IF EXISTS FriendWithUsername", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "CREATE VIEW IF NOT EXISTS FriendWithUsername\nAS SELECT\n    Friend._id,\n    Friend._lastModifiedTimestamp,\n     -- Regarding nullability: CombinedUsername.encodedUsername is nullable to allow inserts to\n     -- work (an insert trigger adds encodedUsername, but SQLite does not allow it to be null in\n     -- the interim if it has the NOT NULL constraint). However, encodedUsername will never be null\n     -- in practice. There is a WHERE CombinedUsername.encodedUsername IS NOT NULL clause added to\n     -- this query just to eliminate even that outside chance.\n     -- When this was written, we were using SqlDelight 1.4, which does not infer from the IS NOT\n     -- NULL clause that username cannot be null, and emits the username model as nullable. It is\n     -- safe to cast these to non-nullable references using !!. SqlDelight 1.5 adds additional\n     -- non-nullable inferencing and fixes this particular case.\n    CombinedUsername.encodedUsername AS username,\n    Friend.userId,\n    Friend.displayName,\n    Friend.bitmojiAvatarId,\n    Friend.bitmojiSelfieId,\n    Friend.bitmojiSceneId,\n    Friend.bitmojiBackgroundId,\n    Friend.friendmojis,\n    Friend.friendmojiCategories,\n    Friend.phone,\n    Friend.score,\n    Friend.birthday,\n    Friend.sentToMe,\n    Friend.receivedFromMe,\n    Friend.addedTimestamp,\n    Friend.reverseAddedTimestamp,\n    Friend.lastMessageId,\n    Friend.unreadCount,\n    Friend.friendmojiString,\n    Friend.serverDisplayName,\n    Friend.streakLength,\n    Friend.streakExpiration,\n    Friend.friendLinkType,\n    Friend.storyMuted,\n    Friend.isPopular,\n    Friend.isOfficial,\n    Friend.isFideliusReady,\n    Friend.snapProId,\n    Friend.fideliusKeys,\n    Friend.isBrand,\n    Friend.businessCategory,\n    Friend.syncSource,\n    Friend.isCameosSharingSupported,\n    Friend.isBitmojiFriendmojiSharingSupported,\n    Friend.cameosSharingPolicy,\n    Friend.reverseBestFriendRanking,    -- Added\n    Friend.isPinnedBestFriend,          -- Added\n    Friend.plusBadgeVisibility,         -- Added\n    COALESCE(CombinedUsername.mutableUsername, CombinedUsername.originalUsername) AS usernameForSorting\nFROM Friend\nINNER JOIN CombinedUsername ON Friend.combinedUsernameRowId=CombinedUsername._id\nWHERE CombinedUsername.encodedUsername IS NOT NULL", 0, null);
        }
        if (i <= 443 && i2 > 443) {
            ((C19506byj) interfaceC54340yek).c(num5, "CREATE TABLE IF NOT EXISTS PendingStoryGroup(\n    _id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n    groupId TEXT NOT NULL UNIQUE,\n    groupStoryType INTEGER NOT NULL,\n    displayName TEXT NOT NULL,\n    shortDisplayName TEXT,\n    communityMetadata BLOB,\n    expirationTimestampMs INTEGER NOT NULL DEFAULT 0\n)", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "CREATE UNIQUE INDEX IF NOT EXISTS group_id ON PendingStoryGroup(groupId)", 0, null);
        }
        if (i <= 444 && i2 > 444) {
            ((C19506byj) interfaceC54340yek).c(num5, "ALTER TABLE MobStoryMetadata\nADD COLUMN nonExemptedBlockMemberUserNames TEXT", 0, null);
        }
        if (i <= 445 && i2 > 445) {
            ((C19506byj) interfaceC54340yek).c(num5, "DROP TABLE IF EXISTS LinkDecoration", 0, null);
        }
        if (i <= 446 && i2 > 446) {
            ((C19506byj) interfaceC54340yek).c(num5, "ALTER TABLE StorySnap\nADD COLUMN rewatchCount INTEGER DEFAULT 0", 0, null);
        }
        if (i <= 447 && i2 > 447) {
            ((C19506byj) interfaceC54340yek).c(num5, "DROP VIEW IF EXISTS DiscoverFeedFriendStoriesViewV2", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "CREATE VIEW IF NOT EXISTS DiscoverFeedFriendStoriesViewV2\nAS SELECT\n    Story._id,\n    Story.storyId AS storyId,\n    FirstUnviewedSnap.snapId AS firstUnviewedSnapId,\n    Friend.userId AS friendUserId,\n    Friend.displayName AS friendDisplayName,\n    Friend.friendLinkType AS friendLinkType,\n    Friend.username AS friendUsername,\n    Story.friendStoryPosterUserId AS friendStoryPosterUserId,\n    Story.displayName AS storyDisplayName,\n    Feed.specifiedName AS feedSpecifiedName,\n    Feed.participantString AS feedParticipantString,\n    Feed._id AS feedId,\n    Friend.bitmojiAvatarId,\n    Friend.bitmojiSelfieId,\n    COALESCE(Friend.storyMuted, 0) AS storyMuted,\n    Story.groupStoryType,\n    Story.viewed AS storyViewed,\n    latestTimeStamp AS storyLatestTimestamp,\n    latestExpirationTimestamp AS storyLatestExpirationTimestamp,\n    rankingId AS storyRankingId,\n    Story.lastSyncRequestId AS lastSyncRequestId,\n    Story.totalMediaDurationMs\nFROM\nStoryViewActiveSnaps AS Story\nLEFT OUTER JOIN MobStoryMetadata ON (Story.kind = 1 AND MobStoryMetadata.storyRowId = Story._id)\nLEFT OUTER JOIN FriendWithUsername AS Friend ON Friend.userId = Story.friendStoryPosterUserId\nLEFT OUTER JOIN Feed ON Feed.friendRowId = Friend._id\nLEFT OUTER JOIN (\n    SELECT\n    StorySnap.storyRowId,\n    Snap.snapId,\n    min(Snap.timestamp)\n    FROM StorySnap\n    LEFT OUTER JOIN Snap ON Snap._id = StorySnap.snapRowId\n    WHERE StorySnap.viewed = 0\n    GROUP BY StorySnap.storyRowId\n) AS FirstUnviewedSnap ON Story._id = FirstUnviewedSnap.storyRowId\nWHERE (\n        Story.kind = 0 -- StoryKind.FRIEND\n        AND (\n            -- StoryKind.FRIEND could include OUTGOING|FOLLOWING friends. Only show MUTUAL friends.\n            -- If Friend table is not yet populated, use rankingId as a signal for mutual friends.\n            friendLinkType = 0 OR (friendLinkType IS NULL AND rankingId NOT NULL)\n        )\n    ) OR (\n        Story.kind = 1 -- StoryKind.GROUP\n        -- CUSTOM(0) / PRIVATE(1) / SHARED(4) / COMMUNITIES(6) Group Stories only\n        AND MobStoryMetadata.groupStoryType IN (0, 1, 4, 6)\n        AND COALESCE(MobStoryMetadata.customStorySubtype, -1) != 1 -- filter out snap reply custom stories\n    )", 0, null);
        }
        if (i <= 448 && i2 > 448) {
            ((C19506byj) interfaceC54340yek).c(num5, "PRAGMA legacy_alter_table=1", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "ALTER TABLE Friend\nADD COLUMN postViewEmoji TEXT", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "DROP VIEW IF EXISTS FriendWithUsername", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "CREATE VIEW IF NOT EXISTS FriendWithUsername\nAS SELECT\n    Friend._id,\n    Friend._lastModifiedTimestamp,\n     -- Regarding nullability: CombinedUsername.encodedUsername is nullable to allow inserts to\n     -- work (an insert trigger adds encodedUsername, but SQLite does not allow it to be null in\n     -- the interim if it has the NOT NULL constraint). However, encodedUsername will never be null\n     -- in practice. There is a WHERE CombinedUsername.encodedUsername IS NOT NULL clause added to\n     -- this query just to eliminate even that outside chance.\n     -- When this was written, we were using SqlDelight 1.4, which does not infer from the IS NOT\n     -- NULL clause that username cannot be null, and emits the username model as nullable. It is\n     -- safe to cast these to non-nullable references using !!. SqlDelight 1.5 adds additional\n     -- non-nullable inferencing and fixes this particular case.\n    CombinedUsername.encodedUsername AS username,\n    Friend.userId,\n    Friend.displayName,\n    Friend.bitmojiAvatarId,\n    Friend.bitmojiSelfieId,\n    Friend.bitmojiSceneId,\n    Friend.bitmojiBackgroundId,\n    Friend.friendmojis,\n    Friend.friendmojiCategories,\n    Friend.phone,\n    Friend.score,\n    Friend.birthday,\n    Friend.sentToMe,\n    Friend.receivedFromMe,\n    Friend.addedTimestamp,\n    Friend.reverseAddedTimestamp,\n    Friend.lastMessageId,\n    Friend.unreadCount,\n    Friend.friendmojiString,\n    Friend.serverDisplayName,\n    Friend.streakLength,\n    Friend.streakExpiration,\n    Friend.friendLinkType,\n    Friend.storyMuted,\n    Friend.isPopular,\n    Friend.isOfficial,\n    Friend.isFideliusReady,\n    Friend.snapProId,\n    Friend.fideliusKeys,\n    Friend.isBrand,\n    Friend.businessCategory,\n    Friend.syncSource,\n    Friend.isCameosSharingSupported,\n    Friend.isBitmojiFriendmojiSharingSupported,\n    Friend.cameosSharingPolicy,\n    Friend.reverseBestFriendRanking,\n    Friend.isPinnedBestFriend,\n    Friend.plusBadgeVisibility,\n    Friend.postViewEmoji, -- Added\n    COALESCE(CombinedUsername.mutableUsername, CombinedUsername.originalUsername) AS usernameForSorting\nFROM Friend\nINNER JOIN CombinedUsername ON Friend.combinedUsernameRowId=CombinedUsername._id\nWHERE CombinedUsername.encodedUsername IS NOT NULL", 0, null);
        }
        if (i <= 449 && i2 > 449) {
            ((C19506byj) interfaceC54340yek).c(num5, "CREATE TABLE IF NOT EXISTS EnhancedContacts(\n    _id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n    _lastModifiedTimestamp INTEGER,\n\n    userId TEXT NOT NULL UNIQUE,\n    rawPhone TEXT NOT NULL\n)", 0, null);
        }
        if (i <= 450 && i2 > 450) {
            ((C19506byj) interfaceC54340yek).c(num5, "ALTER TABLE Contact ADD COLUMN rankScore INTEGER NOT NULL DEFAULT 0", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "CREATE INDEX IF NOT EXISTS contact_idx_rankScore ON Contact(rankScore)", 0, null);
        }
        if (i <= 451 && i2 > 451) {
            ((C19506byj) interfaceC54340yek).c(num5, "ALTER TABLE SendToLastSnapRecipients ADD COLUMN storyKind INTEGER", 0, null);
        }
        if (i <= 452 && i2 > 452) {
            ((C19506byj) interfaceC54340yek).c(num5, "CREATE TABLE IF NOT EXISTS UploadRequestQueue(\n    _id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n    requestId TEXT NOT NULL UNIQUE,\n    request TEXT NOT NULL UNIQUE,\n    result TEXT,\n    resultEnum TEXT,\n    expirationTimestamp INTEGER\n)", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "CREATE INDEX IF NOT EXISTS request_id ON UploadRequestQueue(resultEnum)", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "CREATE INDEX IF NOT EXISTS result_enum ON UploadRequestQueue(requestId)", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "CREATE INDEX IF NOT EXISTS expiration_timestamp ON UploadRequestQueue(expirationTimestamp)", 0, null);
        }
        if (i <= 453 && i2 > 453) {
            ((C19506byj) interfaceC54340yek).c(num5, "DROP VIEW IF EXISTS StoryViewFriendStoriesActiveSnaps", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "CREATE VIEW IF NOT EXISTS StoryViewFriendStoriesActiveSnaps AS\nSELECT\n    FriendStories.storyId AS storyId,\n    FriendStories.userId AS userId,\n    FriendStories.isViewed AS isViewed,\n    FriendStories.numPrivateStories AS numPrivateStories,\n    FriendStories.latestSnapTimestamp AS latestSnapTimestamp,\n    FriendStories.latestSnapExpirationTimestamp AS latestSnapExpirationTimestamp,\n    COALESCE(FirstUnviewedSnap.snapId, '') AS firstUnviewedSnapId\nFROM (\n    SELECT\n        StoryViewPlayableFriendStoriesMapping.storyId AS storyId,\n        StoryViewPlayableFriendStoriesMapping.userId AS userId,\n        SUM(CASE WHEN Story.groupStoryType = 1 THEN 1 ELSE 0 END) AS numPrivateStories,\n        MAX(Snap.timestamp) AS latestSnapTimestamp,\n        MAX(StorySnap.expirationTimestamp) AS latestSnapExpirationTimestamp,\n        MIN(StorySnap.viewed) AS isViewed\n    FROM StorySnap\n    JOIN Snap ON StorySnap.snapRowId = Snap._id\n    JOIN Story ON StorySnap.storyRowId = Story._id\n    JOIN StoryViewPlayableFriendStoriesMapping ON StorySnap.storyRowId = StoryViewPlayableFriendStoriesMapping.storyRowId\n    GROUP BY StoryViewPlayableFriendStoriesMapping.userId\n) AS FriendStories\nLEFT OUTER JOIN (\n    SELECT * FROM (\n        SELECT StoryViewPlayableFriendStoriesMapping.storyId AS storyId,\n        StoryViewPlayableFriendStoriesMapping.userId AS userId,\n        Snap.snapId\n        FROM StorySnap\n        JOIN Snap ON StorySnap.snapRowId = Snap._id\n        JOIN StoryViewPlayableFriendStoriesMapping ON StorySnap.storyRowId = StoryViewPlayableFriendStoriesMapping.storyRowId\n        WHERE StorySnap.viewed = 0\n        ORDER BY Snap.timestamp DESC\n    ) GROUP BY userId\n) AS FirstUnviewedSnap ON (FriendStories.isViewed = 0 AND FirstUnviewedSnap.userId = FriendStories.userId)", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "DROP VIEW IF EXISTS FriendsFeedView", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "CREATE VIEW IF NOT EXISTS FriendsFeedView\nAS SELECT\n    Feed._id,\n    coalesce(Feed.specifiedName, Feed.fitScreenParticipantString, Feed.participantString) AS feedDisplayName,\n    participantsSize,\n    Feed.lastInteractionTimestamp,\n    Feed.displayTimestamp,\n    Feed.displayInteractionType,\n    Feed.lastInteractionUserId,\n    Feed.clearedTimestamp,\n    Feed.pinnedTimestamp,\n    Feed.kind,\n    Feed.key,\n    Friend._id AS friendRowId,\n    Friend.userId AS friendUserId,\n    Friend.friendmojiCategories,\n    Friend.displayName AS friendDisplayName,\n    Friend.username AS friendDisplayUsername,\n    Friend.friendmojiString,\n    Friend.streakLength,\n    Friend.streakExpiration,\n    Friend.bitmojiAvatarId,\n    Friend.bitmojiSelfieId,\n    Friend.birthday,\n    Friend.addedTimestamp,\n    Friend.reverseAddedTimestamp,\n    Friend.isOfficial,\n    Friend.isBrand,\n    Friend.businessCategory,\n    Friend.friendLinkType,\n    Friend.snapProId,\n    FriendStory.storyId AS friendStoryId,\n    FriendStory.numPrivateStories AS numPrivateStories,\n    FriendStory.isViewed AS friendStoryIsViewed,\n    FriendStory.latestSnapTimestamp AS friendStoryLatestTimestamp,\n    FriendStory.latestSnapExpirationTimestamp AS friendStoryLatestExpirationTimestamp,\n    FriendStory.firstUnviewedSnapId AS friendStoryFirstUnviewedSnapId,\n    Friend.storyMuted AS friendStoryMuted,\n    lastInteractionUser.userId AS displayInteractionUserId,\n    lastInteractionUser.displayName AS displayInteractionUserDisplayName,\n    lastInteractionUser.username AS displayInteractionUserUsername,\n    lastWriterUser.username AS lastWriterUsername,\n    Feed.lastMutatorUserId AS mutatorUserId,\n    FriendsFeedScore.score AS score,\n    FeedPostSnapAction.currentFeedAction AS currentFeedAction,\n    FeedPostSnapAction.expirationTimestamp AS postSnapActionExpirationTimestamp,\n    FeedPostSnapAction.contextSessionId AS postSnapActionContextSessionId,\n    FeedPostSnapAction.snapId AS postSnapActionLastViewedSnapId\nFROM\nFeed\nLEFT OUTER JOIN FriendWithUsername AS Friend ON Feed.friendRowId = Friend._id\nLEFT OUTER JOIN FriendWithUsername AS lastInteractionUser ON Feed.lastInteractionUserId = lastInteractionUser._id\nLEFT OUTER JOIN FriendWithUsername AS lastWriterUser ON Feed.lastInteractionWriterId = lastWriterUser._id\nLEFT OUTER JOIN StoryViewFriendStoriesActiveSnaps AS FriendStory ON (Feed.kind = 0 AND Friend.userId = FriendStory.userId)\nLEFT OUTER JOIN FriendsFeedScore ON Feed._id = FriendsFeedScore.feedRowId\nLEFT OUTER JOIN (SELECT conversationId, currentFeedAction, max(expirationTimestamp) AS expirationTimestamp, contextSessionId, snapId FROM PostSnapAction GROUP BY conversationId) AS FeedPostSnapAction\nON (\n    Feed.key = FeedPostSnapAction.conversationId\n)\nWHERE (Feed.lastInteractionTimestamp IS NOT NULL AND\n Feed.clearedTimestamp <= Feed.sortingTimestamp)", 0, null);
        }
        if (i <= 454 && i2 > 454) {
            ((C19506byj) interfaceC54340yek).c(num5, "CREATE TABLE IF NOT EXISTS SendToListInteraction (\n    listIdentifier TEXT NOT NULL PRIMARY KEY,\n    lastSendTimestamp INTEGER DEFAULT 0\n)", 0, null);
        }
        if (i <= 455 && i2 > 455) {
            ((C19506byj) interfaceC54340yek).c(num5, "PRAGMA legacy_alter_table=1", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "ALTER TABLE Feed\nADD COLUMN  isLocked INTEGER NOT NULL DEFAULT 0", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "DROP VIEW IF EXISTS FriendsFeedView", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "CREATE VIEW IF NOT EXISTS FriendsFeedView\nAS SELECT\n    Feed._id,\n    coalesce(Feed.specifiedName, Feed.fitScreenParticipantString, Feed.participantString) AS feedDisplayName,\n    participantsSize,\n    Feed.lastInteractionTimestamp,\n    Feed.displayTimestamp,\n    Feed.displayInteractionType,\n    Feed.lastInteractionUserId,\n    Feed.clearedTimestamp,\n    Feed.pinnedTimestamp,\n    Feed.isLocked,\n    Feed.kind,\n    Feed.key,\n    Friend._id AS friendRowId,\n    Friend.userId AS friendUserId,\n    Friend.friendmojiCategories,\n    Friend.displayName AS friendDisplayName,\n    Friend.username AS friendDisplayUsername,\n    Friend.friendmojiString,\n    Friend.streakLength,\n    Friend.streakExpiration,\n    Friend.bitmojiAvatarId,\n    Friend.bitmojiSelfieId,\n    Friend.birthday,\n    Friend.addedTimestamp,\n    Friend.reverseAddedTimestamp,\n    Friend.isOfficial,\n    Friend.isBrand,\n    Friend.businessCategory,\n    Friend.friendLinkType,\n    Friend.snapProId,\n    FriendStory.storyId AS friendStoryId,\n    FriendStory.numPrivateStories AS numPrivateStories,\n    FriendStory.isViewed AS friendStoryIsViewed,\n    FriendStory.latestSnapTimestamp AS friendStoryLatestTimestamp,\n    FriendStory.latestSnapExpirationTimestamp AS friendStoryLatestExpirationTimestamp,\n    FriendStory.firstUnviewedSnapId AS friendStoryFirstUnviewedSnapId,\n    Friend.storyMuted AS friendStoryMuted,\n    lastInteractionUser.userId AS displayInteractionUserId,\n    lastInteractionUser.displayName AS displayInteractionUserDisplayName,\n    lastInteractionUser.username AS displayInteractionUserUsername,\n    lastWriterUser.username AS lastWriterUsername,\n    Feed.lastMutatorUserId AS mutatorUserId,\n    FriendsFeedScore.score AS score,\n    FeedPostSnapAction.currentFeedAction AS currentFeedAction,\n    FeedPostSnapAction.expirationTimestamp AS postSnapActionExpirationTimestamp,\n    FeedPostSnapAction.contextSessionId AS postSnapActionContextSessionId,\n    FeedPostSnapAction.snapId AS postSnapActionLastViewedSnapId\nFROM\nFeed\nLEFT OUTER JOIN FriendWithUsername AS Friend ON Feed.friendRowId = Friend._id\nLEFT OUTER JOIN FriendWithUsername AS lastInteractionUser ON Feed.lastInteractionUserId = lastInteractionUser._id\nLEFT OUTER JOIN FriendWithUsername AS lastWriterUser ON Feed.lastInteractionWriterId = lastWriterUser._id\nLEFT OUTER JOIN StoryViewFriendStoriesActiveSnaps AS FriendStory ON (Feed.kind = 0 AND Friend.userId = FriendStory.userId)\nLEFT OUTER JOIN FriendsFeedScore ON Feed._id = FriendsFeedScore.feedRowId\nLEFT OUTER JOIN (SELECT conversationId, currentFeedAction, max(expirationTimestamp) AS expirationTimestamp, contextSessionId, snapId FROM PostSnapAction GROUP BY conversationId) AS FeedPostSnapAction\nON (\n    Feed.key = FeedPostSnapAction.conversationId\n)\nWHERE (Feed.lastInteractionTimestamp IS NOT NULL AND\n Feed.clearedTimestamp <= Feed.sortingTimestamp)", 0, null);
        }
        if (i <= 456 && i2 > 456) {
            ((C19506byj) interfaceC54340yek).c(num5, "PRAGMA legacy_alter_table=1", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "CREATE TABLE IF NOT EXISTS new_FriendsFeedScore(\n    feedRowId INTEGER NOT NULL PRIMARY KEY,\n    score REAL\n)", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "INSERT INTO new_FriendsFeedScore\nSELECT feedRowId, score FROM FriendsFeedScore", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "DROP TABLE FriendsFeedScore", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "ALTER TABLE new_FriendsFeedScore RENAME TO FriendsFeedScore", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "CREATE INDEX IF NOT EXISTS friendsFeedScore_score ON FriendsFeedScore(score, feedRowId)", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "DROP VIEW IF EXISTS FriendsFeedView", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "CREATE VIEW IF NOT EXISTS FriendsFeedView\nAS SELECT\n    Feed._id,\n    coalesce(Feed.specifiedName, Feed.fitScreenParticipantString, Feed.participantString) AS feedDisplayName,\n    participantsSize,\n    Feed.lastInteractionTimestamp,\n    Feed.displayTimestamp,\n    Feed.displayInteractionType,\n    Feed.lastInteractionUserId,\n    Feed.clearedTimestamp,\n    Feed.pinnedTimestamp,\n    Feed.isLocked,\n    Feed.kind,\n    Feed.key,\n    Friend._id AS friendRowId,\n    Friend.userId AS friendUserId,\n    Friend.friendmojiCategories,\n    Friend.displayName AS friendDisplayName,\n    Friend.username AS friendDisplayUsername,\n    Friend.friendmojiString,\n    Friend.streakLength,\n    Friend.streakExpiration,\n    Friend.bitmojiAvatarId,\n    Friend.bitmojiSelfieId,\n    Friend.birthday,\n    Friend.addedTimestamp,\n    Friend.reverseAddedTimestamp,\n    Friend.isOfficial,\n    Friend.isBrand,\n    Friend.businessCategory,\n    Friend.friendLinkType,\n    Friend.snapProId,\n    FriendStory.storyId AS friendStoryId,\n    FriendStory.numPrivateStories AS numPrivateStories,\n    FriendStory.isViewed AS friendStoryIsViewed,\n    FriendStory.latestSnapTimestamp AS friendStoryLatestTimestamp,\n    FriendStory.latestSnapExpirationTimestamp AS friendStoryLatestExpirationTimestamp,\n    FriendStory.firstUnviewedSnapId AS friendStoryFirstUnviewedSnapId,\n    Friend.storyMuted AS friendStoryMuted,\n    lastInteractionUser.userId AS displayInteractionUserId,\n    lastInteractionUser.displayName AS displayInteractionUserDisplayName,\n    lastInteractionUser.username AS displayInteractionUserUsername,\n    lastWriterUser.userId AS lastWriterUserId,\n    Feed.lastMutatorUserId AS mutatorUserId,\n    FriendsFeedScore.score AS score,\n    FeedPostSnapAction.currentFeedAction AS currentFeedAction,\n    FeedPostSnapAction.expirationTimestamp AS postSnapActionExpirationTimestamp,\n    FeedPostSnapAction.contextSessionId AS postSnapActionContextSessionId,\n    FeedPostSnapAction.snapId AS postSnapActionLastViewedSnapId\nFROM\nFeed\nLEFT OUTER JOIN FriendWithUsername AS Friend ON Feed.friendRowId = Friend._id\nLEFT OUTER JOIN FriendWithUsername AS lastInteractionUser ON Feed.lastInteractionUserId = lastInteractionUser._id\nLEFT OUTER JOIN FriendWithUsername AS lastWriterUser ON Feed.lastInteractionWriterId = lastWriterUser._id\nLEFT OUTER JOIN StoryViewFriendStoriesActiveSnaps AS FriendStory ON (Feed.kind = 0 AND Friend.userId = FriendStory.userId)\nLEFT OUTER JOIN FriendsFeedScore ON Feed._id = FriendsFeedScore.feedRowId\nLEFT OUTER JOIN (SELECT conversationId, currentFeedAction, max(expirationTimestamp) AS expirationTimestamp, contextSessionId, snapId FROM PostSnapAction GROUP BY conversationId) AS FeedPostSnapAction\nON (\n    Feed.key = FeedPostSnapAction.conversationId\n)\nWHERE (Feed.lastInteractionTimestamp IS NOT NULL AND\n Feed.clearedTimestamp <= Feed.sortingTimestamp)", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "DROP VIEW IF EXISTS FriendsFeedViewV2", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "CREATE VIEW IF NOT EXISTS FriendsFeedViewV2\nAS SELECT\n    Feed._id,\n    coalesce(Feed.specifiedName, Feed.fitScreenParticipantString, Feed.participantString) AS feedDisplayName,\n    participantsSize,\n    Feed.lastInteractionTimestamp,\n    Feed.displayTimestamp,\n    Feed.displayInteractionType,\n    Feed.lastInteractionUserId,\n    Feed.clearedTimestamp,\n    Feed.pinnedTimestamp,\n    Feed.isLocked,\n    Feed.kind,\n    Feed.key,\n    Friend._id AS friendRowId,\n    Friend.userId AS friendUserId,\n    Friend.friendmojiCategories,\n    Friend.displayName AS friendDisplayName,\n    Friend.username AS friendDisplayUsername,\n    Friend.friendmojiString,\n    Friend.streakLength,\n    Friend.streakExpiration,\n    Friend.bitmojiAvatarId,\n    Friend.bitmojiSelfieId,\n    Friend.birthday,\n    Friend.addedTimestamp,\n    Friend.reverseAddedTimestamp,\n    Friend.isOfficial,\n    Friend.isBrand,\n    Friend.businessCategory,\n    Friend.friendLinkType,\n    Friend.snapProId,\n    FriendStory.storyId AS friendStoryId,\n    FriendStory.numPrivateStories AS numPrivateStories,\n    FriendStory.isViewed AS friendStoryIsViewed,\n    FriendStory.latestSnapTimestamp AS friendStoryLatestTimestamp,\n    FriendStory.latestSnapExpirationTimestamp AS friendStoryLatestExpirationTimestamp,\n    FriendStory.firstUnviewedSnapId AS friendStoryFirstUnviewedSnapId,\n    Friend.storyMuted AS friendStoryMuted,\n    lastInteractionUser.userId AS displayInteractionUserId,\n    lastInteractionUser.displayName AS displayInteractionUserDisplayName,\n    lastInteractionUser.username AS displayInteractionUserUsername,\n    lastWriterUser.userId AS lastWriterUserId,\n    Feed.lastMutatorUserId AS mutatorUserId,\n    FriendsFeedScore.score AS score,\n    FeedPostSnapAction.currentFeedAction AS currentFeedAction,\n    FeedPostSnapAction.expirationTimestamp AS postSnapActionExpirationTimestamp,\n    FeedPostSnapAction.contextSessionId AS postSnapActionContextSessionId,\n    FeedPostSnapAction.snapId AS postSnapActionLastViewedSnapId\nFROM\nFeed\nINNER JOIN FriendsFeedScore ON Feed._id = FriendsFeedScore.feedRowId\nLEFT OUTER JOIN Friend AS Friend ON Feed.friendRowId = Friend._id\nLEFT OUTER JOIN CombinedUsername AS friendCombined ON Friend.combinedUsernameRowId = friendCombined._id\nLEFT OUTER JOIN Friend AS lastInteractionUser ON Feed.lastInteractionUserId = lastInteractionUser._id\nLEFT OUTER JOIN CombinedUsername AS lastInteractionUserCombined ON lastInteractionUser.combinedUsernameRowId = lastInteractionUserCombined._id\nLEFT OUTER JOIN Friend AS lastWriterUser ON Feed.lastInteractionWriterId = lastWriterUser._id\nLEFT OUTER JOIN StoryViewFriendStoriesActiveSnaps AS FriendStory ON (Feed.kind = 0 AND Friend.userId = FriendStory.userId)\nLEFT OUTER JOIN (SELECT conversationId, currentFeedAction, max(expirationTimestamp) AS expirationTimestamp, contextSessionId, snapId FROM PostSnapAction GROUP BY conversationId) AS FeedPostSnapAction\nON (\n    Feed.key = FeedPostSnapAction.conversationId\n)\nWHERE (Feed.lastInteractionTimestamp IS NOT NULL AND Feed.clearedTimestamp <= Feed.sortingTimestamp)", 0, null);
        }
        if (i <= 457 && i2 > 457) {
            ((C19506byj) interfaceC54340yek).c(num5, "ALTER TABLE StorySnap\nADD COLUMN spotlightRepostId TEXT DEFAULT NULL", 0, null);
        }
        if (i <= 458 && i2 > 458) {
            ((C19506byj) interfaceC54340yek).c(num5, "ALTER TABLE UploadAssetResult\nADD COLUMN reachability TEXT DEFAULT NULL", 0, null);
        }
        if (i <= 459 && i2 > 459) {
            ((C19506byj) interfaceC54340yek).c(num5, "ALTER TABLE Contact ADD COLUMN photoUri TEXT NOT NULL DEFAULT \"\"", 0, null);
        }
        if (i <= 460 && i2 > 460) {
            ((C19506byj) interfaceC54340yek).c(num5, "PRAGMA legacy_alter_table=1", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "DROP VIEW IF EXISTS FriendsFeedViewV2", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "CREATE VIEW IF NOT EXISTS FriendsFeedViewV2\nAS SELECT\n    Feed._id,\n    coalesce(Feed.specifiedName, Feed.fitScreenParticipantString, Feed.participantString) AS feedDisplayName,\n    participantsSize,\n    Feed.lastInteractionTimestamp,\n    Feed.displayTimestamp,\n    Feed.displayInteractionType,\n    Feed.lastInteractionUserId,\n    Feed.clearedTimestamp,\n    Feed.pinnedTimestamp,\n    Feed.isLocked,\n    Feed.kind,\n    Feed.key,\n    Friend._id AS friendRowId,\n    Friend.userId AS friendUserId,\n    Friend.friendmojiCategories,\n    Friend.displayName AS friendDisplayName,\n    Friend.username AS friendDisplayUsername,\n    Friend.friendmojiString,\n    Friend.streakLength,\n    Friend.streakExpiration,\n    Friend.bitmojiAvatarId,\n    Friend.bitmojiSelfieId,\n    Friend.birthday,\n    Friend.addedTimestamp,\n    Friend.reverseAddedTimestamp,\n    Friend.isOfficial,\n    Friend.isBrand,\n    Friend.businessCategory,\n    Friend.friendLinkType,\n    Friend.snapProId,\n    Friend.storyMuted AS friendStoryMuted,\n    lastInteractionUser.userId AS displayInteractionUserId,\n    lastInteractionUser.displayName AS displayInteractionUserDisplayName,\n    lastInteractionUser.username AS displayInteractionUserUsername,\n    lastWriterUser.userId AS lastWriterUserId,\n    Feed.lastMutatorUserId AS mutatorUserId,\n    FriendsFeedScore.score AS score,\n    FeedPostSnapAction.currentFeedAction AS currentFeedAction,\n    FeedPostSnapAction.expirationTimestamp AS postSnapActionExpirationTimestamp,\n    FeedPostSnapAction.contextSessionId AS postSnapActionContextSessionId,\n    FeedPostSnapAction.snapId AS postSnapActionLastViewedSnapId\nFROM\nFeed\nINNER JOIN FriendsFeedScore ON Feed._id = FriendsFeedScore.feedRowId\nLEFT OUTER JOIN Friend AS Friend ON Feed.friendRowId = Friend._id\nLEFT OUTER JOIN CombinedUsername AS friendCombined ON Friend.combinedUsernameRowId = friendCombined._id\nLEFT OUTER JOIN Friend AS lastInteractionUser ON Feed.lastInteractionUserId = lastInteractionUser._id\nLEFT OUTER JOIN CombinedUsername AS lastInteractionUserCombined ON lastInteractionUser.combinedUsernameRowId = lastInteractionUserCombined._id\nLEFT OUTER JOIN Friend AS lastWriterUser ON Feed.lastInteractionWriterId = lastWriterUser._id\nLEFT OUTER JOIN (SELECT conversationId, currentFeedAction, max(expirationTimestamp) AS expirationTimestamp, contextSessionId, snapId FROM PostSnapAction GROUP BY conversationId) AS FeedPostSnapAction\nON (\n    Feed.key = FeedPostSnapAction.conversationId\n)\nWHERE (Feed.lastInteractionTimestamp IS NOT NULL AND Feed.clearedTimestamp <= Feed.sortingTimestamp)", 0, null);
        }
        if (i <= 461 && i2 > 461) {
            ((C19506byj) interfaceC54340yek).c(num5, "CREATE TABLE IF NOT EXISTS MusicRecommendationResponse(\n\n    -- the key for the music recommendation response.\n    key TEXT NOT NULL PRIMARY KEY,\n\n    -- byte array containing the metadata for the music recommendation response\n    musicRecommendationResponse BLOB NOT NULL,\n\n    -- millisecond epoch timestamp for expiring the music recommendation response\n    expirationTimestamp INTEGER NOT NULL\n)", 0, null);
        }
        if (i <= 462 && i2 > 462) {
            ((C19506byj) interfaceC54340yek).c(num5, "PRAGMA legacy_alter_table=1", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "CREATE TABLE IF NOT EXISTS StorySnapTemp (\n    _id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n    snapRowId INTEGER NOT NULL,\n    username TEXT,\n    clientId TEXT NOT NULL,\n    storyRowId INTEGER NOT NULL,\n\n    captionTextDisplay TEXT,\n    filterId TEXT,\n    thumbnailUrl TEXT,\n    largeThumbnailUrl TEXT,\n    viewed INTEGER, -- true if the snap has been viewed\n    isPublic INTEGER,\n    mediaD2sUrl TEXT,\n    needAuth INTEGER NOT NULL,\n    storyFilterId TEXT,\n    thumbnailIv TEXT,\n    canonicalDisplayTime INTEGER,\n    expirationTimestamp INTEGER,\n    venueId TEXT,\n    flushableId TEXT, -- used to report read, screenshot, save states to servers\n    -- DEPRECATED(In mixer we join from username to get the displayName of the user)\n    -- Mixer will not populate this field and rely on the Friend table displayName for the info.\n    displayName TEXT, -- used for showing the display name of the snap's attributed user.\n    snapAttachmentUrl TEXT, -- used for URL attachments\n    contextHint TEXT, -- used for Context Cards\n    animatedSnapType TEXT, -- whether the snap contained animations, for analytics\n    lensMetadata TEXT, -- metadata for lenses analytics\n    filterLensId TEXT, -- metadata for lenses analytics\n    lensRankingId TEXT DEFAULT NULL, -- metadata for lenses analytics\n    unlockablesSnapInfo TEXT, -- metadata for unlockables analytics\n    encryptedGeoLoggingData TEXT, -- encrypted metadata about geo logging, for analytics\n    ruleFileParams TEXT, -- serialized map for controlling media quality for direct-to-storage downloads\n    brandFriendliness INTEGER, -- Brand friendliness from server story snap\n    clientStatus INTEGER,\n\n    friendScreenCaptureRecordingCount INTEGER,\n    friendScreenCaptureShotCount INTEGER,\n    friendScreenshotCount INTEGER,\n    friendSnapSaveCount INTEGER,\n    friendViewCount INTEGER,\n    otherScreenCaptureRecordingCount INTEGER,\n    otherScreenCaptureShotCount INTEGER,\n    otherScreenshotCount INTEGER,\n    otherSnapSaveCount INTEGER,\n    otherViewCount INTEGER,\n\n    pendingServerConfirmation INTEGER, -- whether posts are waiting to be confirmed by StoriesResponse\n    postedTimestamp INTEGER, -- used for posting timeout logic for detecting async posting failures\n\n    creationTimestamp INTEGER, -- used to display original creation time when posting from memories / camera roll\n    snapSource INTEGER, -- used to determine source when posting from memories / camera roll\n\n    creativeKitSourceAppName TEXT, -- used to display source app name when posting from Snap Kit Creative Kit\n    creativeKitSourceAppOAuthClientId TEXT, -- used to identify source app when posting from Snap Kit Creative Kit\n\n    serverRankingId TEXT, -- used for story story view blizzard event\n    -- story snap's sequence number used in delta fetch.\n    -- See https://docs.google.com/document/d/1uqIHEo8HX7UbOQtrMWHJIO9XcbPnKJznIctlNL1d0aA\n    sequence INTEGER,\n    -- ID used for fetching view count information for Our Story snaps\n    ourStoriesSnapId TEXT,\n\n    -- serialized SnapDocPersistenceWrapper client proto for fetching story snap media content via Bolt\n    boltInfo BLOB DEFAULT NULL,\n\n    -- userId of the poster. Custom stories have multiple posters so\n    -- we need to use poster's userId in StorySnap instead of Story.\n    userId TEXT,\n\n    -- Bolt CO thumbnail fields.\n    thumbnailContentObject BLOB DEFAULT NULL,\n    thumbnailCoKey TEXT,\n    thumbnailCoIv TEXT,\n\n    -- Spotlight counts\n    boostCount INTEGER,\n    shareCount INTEGER,\n\n   -- MultiSnap metadata\n   multiSnapBundleId TEXT,\n   multiSnapSegmentCount INTEGER,\n   multiSnapSegmentId INTEGER,\n\n   -- Set if snap was posted to Spotlight and/or Our Story\n   -- [ourStoryDestination] is deprecated, please use [ourStoryDestinations]\n   -- https://jira.sc-corp.net/browse/STORIES-23298\n   ourStoryDestination INTEGER, -- deprecated\n   ourStoryDestinations BLOB,\n\n   -- Set if snap was posted to Spotlight\n   spotlightSnapStatus INTEGER,\n\n   isTimeline INTEGER,\n\n    -- Used for arroyo story posting to identify snaps when retrying failed story snap sending.\n    taskQueueId TEXT,\n\n    -- Optionally added to story snap at posting time.\n    description TEXT DEFAULT NULL,\n\n    -- Spotlight subscription count\n    subscribeCount INTEGER,\n\n    -- Cameos specific params\n    bloopsGenders TEXT DEFAULT NULL,\n\n    -- Information about the sponsor of the story\n    sponsorProfileId TEXT DEFAULT NULL,\n    sponsorDisplayName TEXT DEFAULT NULL,\n\n    -- Spotlight replies counts\n    liveRepliesCount INTEGER,\n    pendingRepliesCount INTEGER,\n    newPendingRepliesCount INTEGER,\n\n    -- Rewatch counts\n    rewatchCount INTEGER,\n\n    -- If this Snap (My Story only) has been reposted to Spotlight an id will be stored here\n    spotlightRepostId TEXT DEFAULT NULL,\n\n    -- (storyRowId, clientId) should be unique and consistent across local and server synced snaps\n    UNIQUE(storyRowId, clientId),\n\n    -- should have unique snapRowId for each story\n    UNIQUE(storyRowId, snapRowId)\n)", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "INSERT INTO StorySnapTemp\nSELECT\n    _id,\n    snapRowId,\n    username,\n    clientId,\n    storyRowId,\n    captionTextDisplay,\n    filterId,\n    thumbnailUrl,\n    largeThumbnailUrl,\n    viewed,\n    isPublic,\n    mediaD2sUrl,\n    needAuth,\n    storyFilterId,\n    thumbnailIv,\n    canonicalDisplayTime,\n    expirationTimestamp,\n    venueId,\n    flushableId,\n    displayName,\n    snapAttachmentUrl,\n    contextHint,\n    animatedSnapType,\n    lensMetadata,\n    filterLensId,\n    null,\n    unlockablesSnapInfo,\n    encryptedGeoLoggingData,\n    ruleFileParams,\n    brandFriendliness,\n    clientStatus,\n    friendScreenCaptureRecordingCount,\n    friendScreenCaptureShotCount,\n    friendScreenshotCount,\n    friendSnapSaveCount,\n    friendViewCount,\n    otherScreenCaptureRecordingCount,\n    otherScreenCaptureShotCount,\n    otherScreenshotCount,\n    otherSnapSaveCount,\n    otherViewCount,\n    pendingServerConfirmation,\n    postedTimestamp,\n    creationTimestamp,\n    snapSource,\n    creativeKitSourceAppName,\n    creativeKitSourceAppOAuthClientId,\n    serverRankingId,\n    sequence,\n    ourStoriesSnapId,\n    boltInfo,\n    userId,\n    thumbnailContentObject,\n    thumbnailCoKey,\n    thumbnailCoIv,\n    boostCount,\n    shareCount,\n    multiSnapBundleId,\n    multiSnapSegmentCount,\n    multiSnapSegmentId,\n    ourStoryDestination,\n    ourStoryDestinations,\n    spotlightSnapStatus,\n    isTimeline,\n    taskQueueId,\n    description,\n    subscribeCount,\n    bloopsGenders,\n    sponsorProfileId,\n    sponsorDisplayName,\n    liveRepliesCount,\n    pendingRepliesCount,\n    newPendingRepliesCount,\n    rewatchCount,\n    spotlightRepostId\nFROM\n    StorySnap", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, str9, 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, str7, 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, str10, 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "CREATE INDEX IF NOT EXISTS story_snap_username ON StorySnap(username)", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "CREATE INDEX IF NOT EXISTS story_snap_userId ON StorySnap(userId)", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, str6, 0, null);
        }
        if (i <= 463 && i2 > 463) {
            ((C19506byj) interfaceC54340yek).c(num5, "DROP VIEW IF EXISTS DiscoverFeedFriendStoriesViewV2", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "CREATE VIEW IF NOT EXISTS DiscoverFeedFriendStoriesViewV2\nAS SELECT\n    Story._id,\n    Story.storyId AS storyId,\n    FirstUnviewedSnap.snapId AS firstUnviewedSnapId,\n    Friend.userId AS friendUserId,\n    Friend.displayName AS friendDisplayName,\n    Friend.friendLinkType AS friendLinkType,\n    Friend.username AS friendUsername,\n    Friend.isOfficial AS friendIsOfficialUser,\n    Story.friendStoryPosterUserId AS friendStoryPosterUserId,\n    Story.displayName AS storyDisplayName,\n    Feed.specifiedName AS feedSpecifiedName,\n    Feed.participantString AS feedParticipantString,\n    Feed._id AS feedId,\n    Friend.bitmojiAvatarId,\n    Friend.bitmojiSelfieId,\n    COALESCE(Friend.storyMuted, 0) AS storyMuted,\n    Story.groupStoryType,\n    Story.viewed AS storyViewed,\n    latestTimeStamp AS storyLatestTimestamp,\n    latestExpirationTimestamp AS storyLatestExpirationTimestamp,\n    rankingId AS storyRankingId,\n    Story.lastSyncRequestId AS lastSyncRequestId,\n    Story.totalMediaDurationMs\nFROM\nStoryViewActiveSnaps AS Story\nLEFT OUTER JOIN MobStoryMetadata ON (Story.kind = 1 AND MobStoryMetadata.storyRowId = Story._id)\nLEFT OUTER JOIN FriendWithUsername AS Friend ON Friend.userId = Story.friendStoryPosterUserId\nLEFT OUTER JOIN Feed ON Feed.friendRowId = Friend._id\nLEFT OUTER JOIN (\n    SELECT\n    StorySnap.storyRowId,\n    Snap.snapId,\n    min(Snap.timestamp)\n    FROM StorySnap\n    LEFT OUTER JOIN Snap ON Snap._id = StorySnap.snapRowId\n    WHERE StorySnap.viewed = 0\n    GROUP BY StorySnap.storyRowId\n) AS FirstUnviewedSnap ON Story._id = FirstUnviewedSnap.storyRowId\nWHERE (\n        Story.kind = 0 -- StoryKind.FRIEND\n        AND (\n            -- StoryKind.FRIEND could include OUTGOING|FOLLOWING friends. Only show MUTUAL friends.\n            -- If Friend table is not yet populated, use rankingId as a signal for mutual friends.\n            friendLinkType = 0 OR (friendLinkType IS NULL AND rankingId NOT NULL)\n        )\n    ) OR (\n        Story.kind = 1 -- StoryKind.GROUP\n        -- CUSTOM(0) / PRIVATE(1) / SHARED(4) / COMMUNITIES(6) Group Stories only\n        AND MobStoryMetadata.groupStoryType IN (0, 1, 4, 6)\n        AND COALESCE(MobStoryMetadata.customStorySubtype, -1) != 1 -- filter out snap reply custom stories\n    )", 0, null);
        }
        if (i <= 464 && i2 > 464) {
            ((C19506byj) interfaceC54340yek).c(num5, "PRAGMA legacy_alter_table=1", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "CREATE TABLE IF NOT EXISTS new_Feed (\n    _id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n    key TEXT NOT NULL UNIQUE, -- ConversationId\n\n    specifiedName TEXT, -- A name chosen by the group (not generated)\n    participantString TEXT, -- Displayable string with a group chat's members\n    fitScreenParticipantString TEXT, -- Shortened version of participantString to fit the screen.\n    participantsSize INTEGER NOT NULL DEFAULT 1,\n    friendRowId INTEGER, -- If this is a one-on-one chat, the friend's id.\n\n    displayTimestamp INTEGER NOT NULL DEFAULT 0,\n    displayInteractionType TEXT, -- the type of the last interaction\n\n    sortingTimestamp INTEGER NOT NULL DEFAULT 0, -- dedicated timestamp used for sorting\n\n    groupCreationTimestamp INTEGER DEFAULT 0,\n    lastInteractionTimestamp INTEGER DEFAULT 0,\n    lastInteractionUserId INTEGER, -- friend row id of the last user that write/read/screenshotted.\n    lastInteractionWriterId INTEGER, -- friend row id of the last writer.\n\n    clearedTimestamp INTEGER DEFAULT 0,\n\n    lastReadTimestamp INTEGER,\n    lastReader TEXT,\n    lastWriteTimestamp INTEGER,\n    lastWriteType TEXT,\n    lastWriter TEXT, -- userId\n\n    -- Used in 1-1 24hr message retention, 0 represents immediate and 1440 is 24hr retention model\n    messageRetentionInMinutes INTEGER DEFAULT NULL,\n\n    -- 0 for 1:1 Coversation, 1 for Group\n    kind INTEGER NOT NULL,\n\n    notificationMuted INTEGER DEFAULT 0,\n\n    -- used for features with a target user, such as bitmoji\n    lastMutatorUserId TEXT,\n\n    -- Stores the timestamp when user pins conversations\n    pinnedTimestamp INTEGER DEFAULT 0,\n\n    -- Stores the locked state of the feed item\n    isLocked INTEGER NOT NULL DEFAULT 0\n)", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "INSERT INTO new_Feed\nSELECT\n    _id,\n    key,\n    specifiedName,\n    participantString,\n    fitScreenParticipantString,\n    participantsSize,\n    friendRowId,\n    displayTimestamp,\n    displayInteractionType,\n    sortingTimestamp,\n    groupCreationTimestamp,\n    lastInteractionTimestamp,\n    lastInteractionUserId,\n    lastInteractionWriterId,\n    clearedTimestamp,\n    lastReadTimestamp,\n    lastReader,\n    lastWriteTimestamp,\n    lastWriteType,\n    lastWriter,\n    messageRetentionInMinutes,\n    kind,\n    notificationMuted,\n    lastMutatorUserId,\n    pinnedTimestamp,\n    isLocked\nFROM Feed", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "DROP TABLE Feed", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "ALTER TABLE new_Feed RENAME TO Feed", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "CREATE INDEX IF NOT EXISTS feed_timestamp ON Feed(lastInteractionTimestamp DESC)", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "CREATE INDEX IF NOT EXISTS feed_friendRowId ON Feed(friendRowId)", 0, null);
        }
        if (i <= 465 && i2 > 465) {
            ((C19506byj) interfaceC54340yek).c(num5, "PRAGMA legacy_alter_table=1", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "UPDATE Feed SET notificationMuted = 0 WHERE notificationMuted IS NULL", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "CREATE TABLE IF NOT EXISTS new_Feed (\n    _id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n    key TEXT NOT NULL UNIQUE, -- ConversationId\n\n    specifiedName TEXT, -- A name chosen by the group (not generated)\n    participantString TEXT, -- Displayable string with a group chat's members\n    fitScreenParticipantString TEXT, -- Shortened version of participantString to fit the screen.\n    participantsSize INTEGER NOT NULL DEFAULT 1,\n    friendRowId INTEGER, -- If this is a one-on-one chat, the friend's id.\n\n    displayTimestamp INTEGER NOT NULL DEFAULT 0,\n    displayInteractionType TEXT, -- the type of the last interaction\n\n    sortingTimestamp INTEGER NOT NULL DEFAULT 0, -- dedicated timestamp used for sorting\n\n    groupCreationTimestamp INTEGER DEFAULT 0,\n    lastInteractionTimestamp INTEGER DEFAULT 0,\n    lastInteractionUserId INTEGER, -- friend row id of the last user that write/read/screenshotted.\n    lastInteractionWriterId INTEGER, -- friend row id of the last writer.\n\n    clearedTimestamp INTEGER DEFAULT 0,\n\n    lastReadTimestamp INTEGER,\n    lastReader TEXT,\n    lastWriteTimestamp INTEGER,\n    lastWriteType TEXT,\n    lastWriter TEXT, -- userId\n\n    -- Used in 1-1 24hr message retention, 0 represents immediate and 1440 is 24hr retention model\n    messageRetentionInMinutes INTEGER DEFAULT NULL,\n\n    -- 0 for 1:1 Coversation, 1 for Group\n    kind INTEGER NOT NULL,\n\n    -- 0 ALL, 1 SILENT, 2 MENTIONS_ONLY\n    notificationPreferences INTEGER DEFAULT 0 NOT NULL,\n\n    -- used for features with a target user, such as bitmoji\n    lastMutatorUserId TEXT,\n\n    -- Stores the timestamp when user pins conversations\n    pinnedTimestamp INTEGER DEFAULT 0,\n\n    -- Stores the locked state of the feed item\n    isLocked INTEGER NOT NULL DEFAULT 0\n)", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "INSERT INTO new_Feed\nSELECT\n    _id,\n    key,\n    specifiedName,\n    participantString,\n    fitScreenParticipantString,\n    participantsSize,\n    friendRowId,\n    displayTimestamp,\n    displayInteractionType,\n    sortingTimestamp,\n    groupCreationTimestamp,\n    lastInteractionTimestamp,\n    lastInteractionUserId,\n    lastInteractionWriterId,\n    clearedTimestamp,\n    lastReadTimestamp,\n    lastReader,\n    lastWriteTimestamp,\n    lastWriteType,\n    lastWriter,\n    messageRetentionInMinutes,\n    kind,\n    notificationMuted AS notificationPreferences,\n    lastMutatorUserId,\n    pinnedTimestamp,\n    isLocked\nFROM Feed", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "DROP TABLE Feed", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "ALTER TABLE new_Feed RENAME TO Feed", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "CREATE INDEX IF NOT EXISTS feed_timestamp ON Feed(lastInteractionTimestamp DESC)", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "CREATE INDEX IF NOT EXISTS feed_friendRowId ON Feed(friendRowId)", 0, null);
        }
        if (i <= 466 && i2 > 466) {
            ((C19506byj) interfaceC54340yek).c(num5, "PRAGMA legacy_alter_table=1", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "ALTER TABLE Feed\nADD COLUMN  isStreakRestorable INTEGER DEFAULT 0", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "ALTER TABLE Feed\nADD COLUMN  expiredStreakCount INTEGER DEFAULT 0", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "DROP VIEW IF EXISTS FriendsFeedView", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "CREATE VIEW IF NOT EXISTS FriendsFeedView\nAS SELECT\n    Feed._id,\n    coalesce(Feed.specifiedName, Feed.fitScreenParticipantString, Feed.participantString) AS feedDisplayName,\n    participantsSize,\n    Feed.lastInteractionTimestamp,\n    Feed.displayTimestamp,\n    Feed.displayInteractionType,\n    Feed.lastInteractionUserId,\n    Feed.clearedTimestamp,\n    Feed.pinnedTimestamp,\n    Feed.isLocked,\n    Feed.isStreakRestorable,\n    Feed.expiredStreakCount,\n    Feed.kind,\n    Feed.key,\n    Friend._id AS friendRowId,\n    Friend.userId AS friendUserId,\n    Friend.friendmojiCategories,\n    Friend.displayName AS friendDisplayName,\n    Friend.username AS friendDisplayUsername,\n    Friend.friendmojiString,\n    Friend.streakLength,\n    Friend.streakExpiration,\n    Friend.bitmojiAvatarId,\n    Friend.bitmojiSelfieId,\n    Friend.birthday,\n    Friend.addedTimestamp,\n    Friend.reverseAddedTimestamp,\n    Friend.isOfficial,\n    Friend.isBrand,\n    Friend.businessCategory,\n    Friend.friendLinkType,\n    Friend.snapProId,\n    FriendStory.storyId AS friendStoryId,\n    FriendStory.numPrivateStories AS numPrivateStories,\n    FriendStory.isViewed AS friendStoryIsViewed,\n    FriendStory.latestSnapTimestamp AS friendStoryLatestTimestamp,\n    FriendStory.latestSnapExpirationTimestamp AS friendStoryLatestExpirationTimestamp,\n    FriendStory.firstUnviewedSnapId AS friendStoryFirstUnviewedSnapId,\n    Friend.storyMuted AS friendStoryMuted,\n    lastInteractionUser.userId AS displayInteractionUserId,\n    lastInteractionUser.displayName AS displayInteractionUserDisplayName,\n    lastInteractionUser.username AS displayInteractionUserUsername,\n    lastWriterUser.userId AS lastWriterUserId,\n    Feed.lastMutatorUserId AS mutatorUserId,\n    FriendsFeedScore.score AS score,\n    FeedPostSnapAction.currentFeedAction AS currentFeedAction,\n    FeedPostSnapAction.expirationTimestamp AS postSnapActionExpirationTimestamp,\n    FeedPostSnapAction.contextSessionId AS postSnapActionContextSessionId,\n    FeedPostSnapAction.snapId AS postSnapActionLastViewedSnapId\nFROM\nFeed\nLEFT OUTER JOIN FriendWithUsername AS Friend ON Feed.friendRowId = Friend._id\nLEFT OUTER JOIN FriendWithUsername AS lastInteractionUser ON Feed.lastInteractionUserId = lastInteractionUser._id\nLEFT OUTER JOIN FriendWithUsername AS lastWriterUser ON Feed.lastInteractionWriterId = lastWriterUser._id\nLEFT OUTER JOIN StoryViewFriendStoriesActiveSnaps AS FriendStory ON (Feed.kind = 0 AND Friend.userId = FriendStory.userId)\nLEFT OUTER JOIN FriendsFeedScore ON Feed._id = FriendsFeedScore.feedRowId\nLEFT OUTER JOIN (SELECT conversationId, currentFeedAction, max(expirationTimestamp) AS expirationTimestamp, contextSessionId, snapId FROM PostSnapAction GROUP BY conversationId) AS FeedPostSnapAction\nON (\n    Feed.key = FeedPostSnapAction.conversationId\n)\nWHERE (Feed.lastInteractionTimestamp IS NOT NULL AND\n Feed.clearedTimestamp <= Feed.sortingTimestamp)", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "DROP VIEW IF EXISTS FriendsFeedViewV2", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "CREATE VIEW IF NOT EXISTS FriendsFeedViewV2\nAS SELECT\n    Feed._id,\n    coalesce(Feed.specifiedName, Feed.fitScreenParticipantString, Feed.participantString) AS feedDisplayName,\n    participantsSize,\n    Feed.lastInteractionTimestamp,\n    Feed.displayTimestamp,\n    Feed.displayInteractionType,\n    Feed.lastInteractionUserId,\n    Feed.clearedTimestamp,\n    Feed.pinnedTimestamp,\n    Feed.isLocked,\n    Feed.isStreakRestorable,\n    Feed.expiredStreakCount,\n    Feed.kind,\n    Feed.key,\n    Friend._id AS friendRowId,\n    Friend.userId AS friendUserId,\n    Friend.friendmojiCategories,\n    Friend.displayName AS friendDisplayName,\n    Friend.username AS friendDisplayUsername,\n    Friend.friendmojiString,\n    Friend.streakLength,\n    Friend.streakExpiration,\n    Friend.bitmojiAvatarId,\n    Friend.bitmojiSelfieId,\n    Friend.birthday,\n    Friend.addedTimestamp,\n    Friend.reverseAddedTimestamp,\n    Friend.isOfficial,\n    Friend.isBrand,\n    Friend.businessCategory,\n    Friend.friendLinkType,\n    Friend.snapProId,\n    Friend.storyMuted AS friendStoryMuted,\n    lastInteractionUser.userId AS displayInteractionUserId,\n    lastInteractionUser.displayName AS displayInteractionUserDisplayName,\n    lastInteractionUser.username AS displayInteractionUserUsername,\n    lastWriterUser.userId AS lastWriterUserId,\n    Feed.lastMutatorUserId AS mutatorUserId,\n    FriendsFeedScore.score AS score,\n    FeedPostSnapAction.currentFeedAction AS currentFeedAction,\n    FeedPostSnapAction.expirationTimestamp AS postSnapActionExpirationTimestamp,\n    FeedPostSnapAction.contextSessionId AS postSnapActionContextSessionId,\n    FeedPostSnapAction.snapId AS postSnapActionLastViewedSnapId\nFROM\nFeed\nINNER JOIN FriendsFeedScore ON Feed._id = FriendsFeedScore.feedRowId\nLEFT OUTER JOIN Friend AS Friend ON Feed.friendRowId = Friend._id\nLEFT OUTER JOIN CombinedUsername AS friendCombined ON Friend.combinedUsernameRowId = friendCombined._id\nLEFT OUTER JOIN Friend AS lastInteractionUser ON Feed.lastInteractionUserId = lastInteractionUser._id\nLEFT OUTER JOIN CombinedUsername AS lastInteractionUserCombined ON lastInteractionUser.combinedUsernameRowId = lastInteractionUserCombined._id\nLEFT OUTER JOIN Friend AS lastWriterUser ON Feed.lastInteractionWriterId = lastWriterUser._id\nLEFT OUTER JOIN (SELECT conversationId, currentFeedAction, max(expirationTimestamp) AS expirationTimestamp, contextSessionId, snapId FROM PostSnapAction GROUP BY conversationId) AS FeedPostSnapAction\nON (\n    Feed.key = FeedPostSnapAction.conversationId\n)\nWHERE (Feed.lastInteractionTimestamp IS NOT NULL AND Feed.clearedTimestamp <= Feed.sortingTimestamp)", 0, null);
        }
        if (i <= 467 && i2 > 467) {
            ((C19506byj) interfaceC54340yek).c(num5, "CREATE TABLE IF NOT EXISTS SmartLensCta(\n    conversationId TEXT NOT NULL,\n    triggerType INTEGER NOT NULL,\n    priority INTEGER NOT NULL,\n    impressionCount INTEGER NOT NULL,\n    lastImpressionSessionId TEXT,\n    creationTimestamp INTEGER NOT NULL,\n    expirationTimestamp INTEGER NOT NULL,\n    isObsolete INTEGER NOT NULL DEFAULT 0,\n\n    PRIMARY KEY (conversationId, triggerType)\n)", 0, null);
        }
        if (i <= 468 && i2 > 468) {
            ((C19506byj) interfaceC54340yek).c(num5, "ALTER TABLE Story\nADD COLUMN hpoData TEXT", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, str8, 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "CREATE VIEW IF NOT EXISTS StoryViewActiveSnaps AS\nSELECT\n    Story._id,\n    Story.storyId,\n    Story.userId AS friendStoryPosterUserId,\n    Story.displayName,\n    Story.kind,\n    Story.groupStoryType,\n    Story.rankingId,\n    Story.lastSyncRequestId,\n    Story.hpoData,\n    StorySnaps.isViewed AS viewed,\n    StorySnaps.latestSnapTimestamp AS latestTimeStamp,\n    StorySnaps.latestSnapExpirationTimestamp AS latestExpirationTimestamp,\n    StorySnaps.totalMediaDurationMs\nFROM Story\nLEFT OUTER JOIN (\n    SELECT\n        StorySnap.storyRowId,\n        MAX(Snap.timestamp) AS latestSnapTimestamp,\n        MAX(StorySnap.expirationTimestamp) AS latestSnapExpirationTimestamp,\n        MIN(StorySnap.viewed) = 1 AS isViewed,\n        SUM(Snap.durationInMs) AS totalMediaDurationMs\n    FROM StorySnap\n    JOIN Snap ON StorySnap.snapRowId = Snap._id\n    GROUP BY StorySnap.storyRowId\n) AS StorySnaps ON Story._id = StorySnaps.storyRowId\nWHERE Story._id IN (SELECT DISTINCT StorySnap.storyRowId FROM StorySnap)", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "DROP VIEW IF EXISTS DiscoverFeedFriendStoriesViewV2", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "CREATE VIEW IF NOT EXISTS DiscoverFeedFriendStoriesViewV2\nAS SELECT\n    Story._id,\n    Story.storyId AS storyId,\n    FirstUnviewedSnap.snapId AS firstUnviewedSnapId,\n    Friend.userId AS friendUserId,\n    Friend.displayName AS friendDisplayName,\n    Friend.friendLinkType AS friendLinkType,\n    Friend.username AS friendUsername,\n    Friend.isOfficial AS friendIsOfficialUser,\n    Story.friendStoryPosterUserId AS friendStoryPosterUserId,\n    Story.displayName AS storyDisplayName,\n    Feed.specifiedName AS feedSpecifiedName,\n    Feed.participantString AS feedParticipantString,\n    Feed._id AS feedId,\n    Friend.bitmojiAvatarId,\n    Friend.bitmojiSelfieId,\n    COALESCE(Friend.storyMuted, 0) AS storyMuted,\n    Story.groupStoryType,\n    Story.viewed AS storyViewed,\n    latestTimeStamp AS storyLatestTimestamp,\n    latestExpirationTimestamp AS storyLatestExpirationTimestamp,\n    rankingId AS storyRankingId,\n    Story.lastSyncRequestId AS lastSyncRequestId,\n    Story.hpoData AS hpoData,\n    Story.totalMediaDurationMs\nFROM\nStoryViewActiveSnaps AS Story\nLEFT OUTER JOIN MobStoryMetadata ON (Story.kind = 1 AND MobStoryMetadata.storyRowId = Story._id)\nLEFT OUTER JOIN FriendWithUsername AS Friend ON Friend.userId = Story.friendStoryPosterUserId\nLEFT OUTER JOIN Feed ON Feed.friendRowId = Friend._id\nLEFT OUTER JOIN (\n    SELECT\n    StorySnap.storyRowId,\n    Snap.snapId,\n    min(Snap.timestamp)\n    FROM StorySnap\n    LEFT OUTER JOIN Snap ON Snap._id = StorySnap.snapRowId\n    WHERE StorySnap.viewed = 0\n    GROUP BY StorySnap.storyRowId\n) AS FirstUnviewedSnap ON Story._id = FirstUnviewedSnap.storyRowId\nWHERE (\n        Story.kind = 0 -- StoryKind.FRIEND\n        AND (\n            -- StoryKind.FRIEND could include OUTGOING|FOLLOWING friends. Only show MUTUAL friends.\n            -- If Friend table is not yet populated, use rankingId as a signal for mutual friends.\n            friendLinkType = 0 OR (friendLinkType IS NULL AND rankingId NOT NULL)\n        )\n    ) OR (\n        Story.kind = 1 -- StoryKind.GROUP\n        -- CUSTOM(0) / PRIVATE(1) / SHARED(4) / COMMUNITIES(6) Group Stories only\n        AND MobStoryMetadata.groupStoryType IN (0, 1, 4, 6)\n        AND COALESCE(MobStoryMetadata.customStorySubtype, -1) != 1 -- filter out snap reply custom stories\n    )", 0, null);
        }
        if (i <= 469 && i2 > 469) {
            ((C19506byj) interfaceC54340yek).c(num5, "ALTER TABLE StorySnap\nADD COLUMN spotlightRejectionReason INTEGER", 0, null);
        }
        if (i <= 470 && i2 > 470) {
            ((C19506byj) interfaceC54340yek).c(num5, "PRAGMA legacy_alter_table=1", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "ALTER TABLE Friend\nADD COLUMN bitmojiBackgroundUrl Text", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "ALTER TABLE Friend\nADD COLUMN bitmojiBackgroundUrlType Text", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "DROP VIEW IF EXISTS FriendWithUsername", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "CREATE VIEW IF NOT EXISTS FriendWithUsername\nAS SELECT\n    Friend._id,\n    Friend._lastModifiedTimestamp,\n     -- Regarding nullability: CombinedUsername.encodedUsername is nullable to allow inserts to\n     -- work (an insert trigger adds encodedUsername, but SQLite does not allow it to be null in\n     -- the interim if it has the NOT NULL constraint). However, encodedUsername will never be null\n     -- in practice. There is a WHERE CombinedUsername.encodedUsername IS NOT NULL clause added to\n     -- this query just to eliminate even that outside chance.\n     -- When this was written, we were using SqlDelight 1.4, which does not infer from the IS NOT\n     -- NULL clause that username cannot be null, and emits the username model as nullable. It is\n     -- safe to cast these to non-nullable references using !!. SqlDelight 1.5 adds additional\n     -- non-nullable inferencing and fixes this particular case.\n    CombinedUsername.encodedUsername AS username,\n    Friend.userId,\n    Friend.displayName,\n    Friend.bitmojiAvatarId,\n    Friend.bitmojiSelfieId,\n    Friend.bitmojiSceneId,\n    Friend.bitmojiBackgroundId,\n    Friend.friendmojis,\n    Friend.friendmojiCategories,\n    Friend.phone,\n    Friend.score,\n    Friend.birthday,\n    Friend.sentToMe,\n    Friend.receivedFromMe,\n    Friend.addedTimestamp,\n    Friend.reverseAddedTimestamp,\n    Friend.lastMessageId,\n    Friend.unreadCount,\n    Friend.friendmojiString,\n    Friend.serverDisplayName,\n    Friend.streakLength,\n    Friend.streakExpiration,\n    Friend.friendLinkType,\n    Friend.storyMuted,\n    Friend.isPopular,\n    Friend.isOfficial,\n    Friend.isFideliusReady,\n    Friend.snapProId,\n    Friend.fideliusKeys,\n    Friend.isBrand,\n    Friend.businessCategory,\n    Friend.syncSource,\n    Friend.isCameosSharingSupported,\n    Friend.isBitmojiFriendmojiSharingSupported,\n    Friend.cameosSharingPolicy,\n    Friend.reverseBestFriendRanking,\n    Friend.isPinnedBestFriend,\n    Friend.plusBadgeVisibility,\n    Friend.postViewEmoji,\n    Friend.bitmojiBackgroundUrl,\n    Friend.bitmojiBackgroundUrlType,\n    COALESCE(CombinedUsername.mutableUsername, CombinedUsername.originalUsername) AS usernameForSorting\nFROM Friend\nINNER JOIN CombinedUsername ON Friend.combinedUsernameRowId=CombinedUsername._id\nWHERE CombinedUsername.encodedUsername IS NOT NULL", 0, null);
        }
        if (i <= 471 && i2 > 471) {
            ((C19506byj) interfaceC54340yek).c(num5, "CREATE TABLE IF NOT EXISTS TopSuggestedFriendV2 (\n    -- IDs\n    _id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n    friendId INTEGER NOT NULL UNIQUE,\n    userId TEXT NOT NULL,\n\n    -- Suggestion-related info\n    -- Corresponding display info (bitmoji, etc.) is stored on Friend table\n    suggestionReason TEXT,\n    suggestionToken TEXT,\n    suggestionPlacement INTEGER NOT NULL,\n    seen INTEGER DEFAULT 0 NOT NULL,\n    hidden INTEGER DEFAULT 0 NOT NULL,\n\n    -- Pinned suggestion related info\n    isIMC INTEGER DEFAULT 0 NOT NULL, -- Suggestion is In My Contacts (or not)\n    suggestionArrivalTimestamp INTEGER, -- Arrival time of notification containing suggestion\n    impressionCount INTEGER DEFAULT 0   -- Num of times that suggestion was seen by user\n)", 0, null);
        }
        if (i <= 472 && i2 > 472) {
            ((C19506byj) interfaceC54340yek).c(num5, "CREATE TABLE IF NOT EXISTS FriendShortcut(\n    _id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n    shortcutId TEXT NOT NULL UNIQUE,\n    -- emoji, if set, is always displayed, no matter if the shortcut is selected or not\n    emoji TEXT,\n    -- imageSrc is displayed when emoji is not set\n    imageSrc TEXT,\n    -- name is displayed when the shortcut is selected, together with the emoji/imageSrc\n    name TEXT NOT NULL\n)", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "CREATE TABLE IF NOT EXISTS FriendWithShortcut(\n    _id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n    shortcutRowId INTEGER NOT NULL,\n    friendRowId INTEGER NOT NULL,\n    UNIQUE (shortcutRowId, friendRowId)\n)", 0, null);
        }
        if (i <= 473 && i2 > 473) {
            ((C19506byj) interfaceC54340yek).c(num5, "ALTER TABLE StorySnap ADD COLUMN remixCount INTEGER", 0, null);
        }
        if (i <= 474 && i2 > 474) {
            ((C19506byj) interfaceC54340yek).c(num5, "DROP TABLE IF EXISTS FeedMember", 0, null);
        }
        if (i <= 475 && i2 > 475) {
            ((C19506byj) interfaceC54340yek).c(num5, "PRAGMA legacy_alter_table=1", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "CREATE TABLE IF NOT EXISTS new_Feed (\n    _id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n    key TEXT NOT NULL UNIQUE, -- ConversationId\n\n    specifiedName TEXT, -- A name chosen by the group (not generated)\n    participantString TEXT, -- Displayable string with a group chat's members\n    fitScreenParticipantString TEXT, -- Shortened version of participantString to fit the screen.\n    participantsSize INTEGER NOT NULL DEFAULT 1,\n    friendRowId INTEGER, -- If this is a one-on-one chat, the friend's id.\n\n    displayTimestamp INTEGER NOT NULL DEFAULT 0,\n    displayInteractionType TEXT, -- the type of the last interaction\n\n    sortingTimestamp INTEGER NOT NULL DEFAULT 0, -- dedicated timestamp used for sorting\n\n    groupCreationTimestamp INTEGER DEFAULT 0,\n    lastInteractionTimestamp INTEGER DEFAULT 0,\n    lastInteractionUserId INTEGER, -- friend row id of the last user that write/read/screenshotted.\n    lastInteractionWriterId INTEGER, -- friend row id of the last writer.\n\n    clearedTimestamp INTEGER DEFAULT 0,\n\n    lastWriter TEXT, -- userId\n\n    -- Used in 1-1 24hr message retention, 0 represents immediate and 1440 is 24hr retention model\n    messageRetentionInMinutes INTEGER DEFAULT NULL,\n\n    -- 0 for 1:1 Coversation, 1 for Group\n    kind INTEGER NOT NULL,\n\n    -- 0 ALL, 1 SILENT, 2 MENTIONS_ONLY\n    notificationPreferences INTEGER DEFAULT 0 NOT NULL,\n\n    -- used for features with a target user, such as bitmoji\n    lastMutatorUserId TEXT,\n\n    -- Stores the timestamp when user pins conversations\n    pinnedTimestamp INTEGER DEFAULT 0,\n\n    -- Stores the locked state of the feed item\n    isLocked INTEGER NOT NULL DEFAULT 0,\n\n    -- Stores the streak restorable state\n    isStreakRestorable INTEGER DEFAULT 0,\n\n    -- Stores Expired Streak Count\n    expiredStreakCount INTEGER DEFAULT 0\n)", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "INSERT INTO new_Feed\nSELECT\n    _id,\n    key,\n    specifiedName,\n    participantString,\n    fitScreenParticipantString,\n    participantsSize,\n    friendRowId,\n    displayTimestamp,\n    displayInteractionType,\n    sortingTimestamp,\n    groupCreationTimestamp,\n    lastInteractionTimestamp,\n    lastInteractionUserId,\n    lastInteractionWriterId,\n    clearedTimestamp,\n    lastWriter,\n    messageRetentionInMinutes,\n    kind,\n    notificationPreferences,\n    lastMutatorUserId,\n    pinnedTimestamp,\n    isLocked,\n    isStreakRestorable,\n    expiredStreakCount\nFROM Feed", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "DROP TABLE Feed", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "ALTER TABLE new_Feed RENAME TO Feed", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "CREATE INDEX IF NOT EXISTS feed_timestamp ON Feed(lastInteractionTimestamp DESC)", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "CREATE INDEX IF NOT EXISTS feed_friendRowId ON Feed(friendRowId)", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "CREATE INDEX IF NOT EXISTS feed_conversationId ON Feed(key)", 0, null);
        }
        if (i <= 476 && i2 > 476) {
            ((C19506byj) interfaceC54340yek).c(num5, "CREATE TABLE IF NOT EXISTS RecentlyActiveFriend(\n    _id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n    userId TEXT NOT NULL UNIQUE,\n    active INTEGER NOT NULL,\n    lastUpdatedTimestampMs INTEGER NOT NULL\n)", 0, null);
        }
        if (i <= 477 && i2 > 477) {
            ((C19506byj) interfaceC54340yek).c(num5, "ALTER TABLE StorySnap\nADD COLUMN sponsorStatus INTEGER DEFAULT 0", 0, null);
        }
        if (i <= 478 && i2 > 478) {
            ((C19506byj) interfaceC54340yek).c(num5, "DROP VIEW IF EXISTS FriendsFeedView", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "CREATE VIEW IF NOT EXISTS FriendsFeedView\nAS SELECT\n    Feed._id,\n    coalesce(Feed.specifiedName, Feed.fitScreenParticipantString, Feed.participantString) AS feedDisplayName,\n    participantsSize,\n    Feed.lastInteractionTimestamp,\n    Feed.displayTimestamp,\n    Feed.displayInteractionType,\n    Feed.lastInteractionUserId,\n    Feed.clearedTimestamp,\n    Feed.pinnedTimestamp,\n    Feed.isLocked,\n    Feed.isStreakRestorable,\n    Feed.expiredStreakCount,\n    Feed.kind,\n    Feed.key,\n    Friend._id AS friendRowId,\n    Friend.userId AS friendUserId,\n    Friend.friendmojiCategories,\n    Friend.displayName AS friendDisplayName,\n    Friend.username AS friendDisplayUsername,\n    Friend.friendmojiString,\n    Friend.streakLength,\n    Friend.streakExpiration,\n    Friend.bitmojiAvatarId,\n    Friend.bitmojiSelfieId,\n    Friend.bitmojiBackgroundId,\n    Friend.birthday,\n    Friend.addedTimestamp,\n    Friend.reverseAddedTimestamp,\n    Friend.isOfficial,\n    Friend.isBrand,\n    Friend.businessCategory,\n    Friend.friendLinkType,\n    Friend.snapProId,\n    FriendStory.storyId AS friendStoryId,\n    FriendStory.numPrivateStories AS numPrivateStories,\n    FriendStory.isViewed AS friendStoryIsViewed,\n    FriendStory.latestSnapTimestamp AS friendStoryLatestTimestamp,\n    FriendStory.latestSnapExpirationTimestamp AS friendStoryLatestExpirationTimestamp,\n    FriendStory.firstUnviewedSnapId AS friendStoryFirstUnviewedSnapId,\n    Friend.storyMuted AS friendStoryMuted,\n    lastInteractionUser.userId AS displayInteractionUserId,\n    lastInteractionUser.displayName AS displayInteractionUserDisplayName,\n    lastInteractionUser.username AS displayInteractionUserUsername,\n    lastWriterUser.userId AS lastWriterUserId,\n    Feed.lastMutatorUserId AS mutatorUserId,\n    FriendsFeedScore.score AS score,\n    FeedPostSnapAction.currentFeedAction AS currentFeedAction,\n    FeedPostSnapAction.expirationTimestamp AS postSnapActionExpirationTimestamp,\n    FeedPostSnapAction.contextSessionId AS postSnapActionContextSessionId,\n    FeedPostSnapAction.snapId AS postSnapActionLastViewedSnapId\nFROM\nFeed\nLEFT OUTER JOIN FriendWithUsername AS Friend ON Feed.friendRowId = Friend._id\nLEFT OUTER JOIN FriendWithUsername AS lastInteractionUser ON Feed.lastInteractionUserId = lastInteractionUser._id\nLEFT OUTER JOIN FriendWithUsername AS lastWriterUser ON Feed.lastInteractionWriterId = lastWriterUser._id\nLEFT OUTER JOIN StoryViewFriendStoriesActiveSnaps AS FriendStory ON (Feed.kind = 0 AND Friend.userId = FriendStory.userId)\nLEFT OUTER JOIN FriendsFeedScore ON Feed._id = FriendsFeedScore.feedRowId\nLEFT OUTER JOIN (SELECT conversationId, currentFeedAction, max(expirationTimestamp) AS expirationTimestamp, contextSessionId, snapId FROM PostSnapAction GROUP BY conversationId) AS FeedPostSnapAction\nON (\n    Feed.key = FeedPostSnapAction.conversationId\n)\nWHERE (Feed.lastInteractionTimestamp IS NOT NULL AND\n Feed.clearedTimestamp <= Feed.sortingTimestamp)", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "PRAGMA legacy_alter_table=1", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "DROP VIEW IF EXISTS FriendsFeedViewV2", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "CREATE VIEW IF NOT EXISTS FriendsFeedViewV2\nAS SELECT\n    Feed._id,\n    coalesce(Feed.specifiedName, Feed.fitScreenParticipantString, Feed.participantString) AS feedDisplayName,\n    participantsSize,\n    Feed.lastInteractionTimestamp,\n    Feed.displayTimestamp,\n    Feed.displayInteractionType,\n    Feed.lastInteractionUserId,\n    Feed.clearedTimestamp,\n    Feed.pinnedTimestamp,\n    Feed.isLocked,\n    Feed.isStreakRestorable,\n    Feed.expiredStreakCount,\n    Feed.kind,\n    Feed.key,\n    Friend._id AS friendRowId,\n    Friend.userId AS friendUserId,\n    Friend.friendmojiCategories,\n    Friend.displayName AS friendDisplayName,\n    Friend.username AS friendDisplayUsername,\n    Friend.friendmojiString,\n    Friend.streakLength,\n    Friend.streakExpiration,\n    Friend.bitmojiAvatarId,\n    Friend.bitmojiSelfieId,\n    Friend.bitmojiBackgroundId,\n    Friend.birthday,\n    Friend.addedTimestamp,\n    Friend.reverseAddedTimestamp,\n    Friend.isOfficial,\n    Friend.isBrand,\n    Friend.businessCategory,\n    Friend.friendLinkType,\n    Friend.snapProId,\n    Friend.storyMuted AS friendStoryMuted,\n    lastInteractionUser.userId AS displayInteractionUserId,\n    lastInteractionUser.displayName AS displayInteractionUserDisplayName,\n    lastInteractionUser.username AS displayInteractionUserUsername,\n    lastWriterUser.userId AS lastWriterUserId,\n    Feed.lastMutatorUserId AS mutatorUserId,\n    FriendsFeedScore.score AS score,\n    FeedPostSnapAction.currentFeedAction AS currentFeedAction,\n    FeedPostSnapAction.expirationTimestamp AS postSnapActionExpirationTimestamp,\n    FeedPostSnapAction.contextSessionId AS postSnapActionContextSessionId,\n    FeedPostSnapAction.snapId AS postSnapActionLastViewedSnapId\nFROM\nFeed\nINNER JOIN FriendsFeedScore ON Feed._id = FriendsFeedScore.feedRowId\nLEFT OUTER JOIN Friend AS Friend ON Feed.friendRowId = Friend._id\nLEFT OUTER JOIN CombinedUsername AS friendCombined ON Friend.combinedUsernameRowId = friendCombined._id\nLEFT OUTER JOIN Friend AS lastInteractionUser ON Feed.lastInteractionUserId = lastInteractionUser._id\nLEFT OUTER JOIN CombinedUsername AS lastInteractionUserCombined ON lastInteractionUser.combinedUsernameRowId = lastInteractionUserCombined._id\nLEFT OUTER JOIN Friend AS lastWriterUser ON Feed.lastInteractionWriterId = lastWriterUser._id\nLEFT OUTER JOIN (SELECT conversationId, currentFeedAction, max(expirationTimestamp) AS expirationTimestamp, contextSessionId, snapId FROM PostSnapAction GROUP BY conversationId) AS FeedPostSnapAction\nON (\n    Feed.key = FeedPostSnapAction.conversationId\n)\nWHERE (Feed.lastInteractionTimestamp IS NOT NULL AND Feed.clearedTimestamp <= Feed.sortingTimestamp)", 0, null);
        }
        if (i <= 479 && i2 > 479) {
            ((C19506byj) interfaceC54340yek).c(num5, "DROP VIEW IF EXISTS FriendsFeedView", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "CREATE VIEW IF NOT EXISTS FriendsFeedView\nAS SELECT\n    Feed._id,\n    coalesce(Feed.specifiedName, Feed.fitScreenParticipantString, Feed.participantString) AS feedDisplayName,\n    participantsSize,\n    Feed.lastInteractionTimestamp,\n    Feed.displayTimestamp,\n    Feed.displayInteractionType,\n    Feed.lastInteractionUserId,\n    Feed.clearedTimestamp,\n    Feed.pinnedTimestamp,\n    Feed.isLocked,\n    Feed.isStreakRestorable,\n    Feed.expiredStreakCount,\n    Feed.kind,\n    Feed.key,\n    Friend._id AS friendRowId,\n    Friend.userId AS friendUserId,\n    Friend.friendmojiCategories,\n    Friend.displayName AS friendDisplayName,\n    Friend.username AS friendDisplayUsername,\n    Friend.friendmojiString,\n    Friend.streakLength,\n    Friend.streakExpiration,\n    Friend.bitmojiAvatarId,\n    Friend.bitmojiSelfieId,\n    Friend.bitmojiBackgroundId,\n    Friend.bitmojiBackgroundUrl,\n    Friend.birthday,\n    Friend.addedTimestamp,\n    Friend.reverseAddedTimestamp,\n    Friend.isOfficial,\n    Friend.isBrand,\n    Friend.businessCategory,\n    Friend.friendLinkType,\n    Friend.snapProId,\n    FriendStory.storyId AS friendStoryId,\n    FriendStory.numPrivateStories AS numPrivateStories,\n    FriendStory.isViewed AS friendStoryIsViewed,\n    FriendStory.latestSnapTimestamp AS friendStoryLatestTimestamp,\n    FriendStory.latestSnapExpirationTimestamp AS friendStoryLatestExpirationTimestamp,\n    FriendStory.firstUnviewedSnapId AS friendStoryFirstUnviewedSnapId,\n    Friend.storyMuted AS friendStoryMuted,\n    lastInteractionUser.userId AS displayInteractionUserId,\n    lastInteractionUser.displayName AS displayInteractionUserDisplayName,\n    lastInteractionUser.username AS displayInteractionUserUsername,\n    lastWriterUser.userId AS lastWriterUserId,\n    Feed.lastMutatorUserId AS mutatorUserId,\n    FriendsFeedScore.score AS score,\n    FeedPostSnapAction.currentFeedAction AS currentFeedAction,\n    FeedPostSnapAction.expirationTimestamp AS postSnapActionExpirationTimestamp,\n    FeedPostSnapAction.contextSessionId AS postSnapActionContextSessionId,\n    FeedPostSnapAction.snapId AS postSnapActionLastViewedSnapId\nFROM\nFeed\nLEFT OUTER JOIN FriendWithUsername AS Friend ON Feed.friendRowId = Friend._id\nLEFT OUTER JOIN FriendWithUsername AS lastInteractionUser ON Feed.lastInteractionUserId = lastInteractionUser._id\nLEFT OUTER JOIN FriendWithUsername AS lastWriterUser ON Feed.lastInteractionWriterId = lastWriterUser._id\nLEFT OUTER JOIN StoryViewFriendStoriesActiveSnaps AS FriendStory ON (Feed.kind = 0 AND Friend.userId = FriendStory.userId)\nLEFT OUTER JOIN FriendsFeedScore ON Feed._id = FriendsFeedScore.feedRowId\nLEFT OUTER JOIN (SELECT conversationId, currentFeedAction, max(expirationTimestamp) AS expirationTimestamp, contextSessionId, snapId FROM PostSnapAction GROUP BY conversationId) AS FeedPostSnapAction\nON (\n    Feed.key = FeedPostSnapAction.conversationId\n)\nWHERE (Feed.lastInteractionTimestamp IS NOT NULL AND\n Feed.clearedTimestamp <= Feed.sortingTimestamp)", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "PRAGMA legacy_alter_table=1", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "DROP VIEW IF EXISTS FriendsFeedViewV2", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "CREATE VIEW IF NOT EXISTS FriendsFeedViewV2\nAS SELECT\n    Feed._id,\n    coalesce(Feed.specifiedName, Feed.fitScreenParticipantString, Feed.participantString) AS feedDisplayName,\n    participantsSize,\n    Feed.lastInteractionTimestamp,\n    Feed.displayTimestamp,\n    Feed.displayInteractionType,\n    Feed.lastInteractionUserId,\n    Feed.clearedTimestamp,\n    Feed.pinnedTimestamp,\n    Feed.isLocked,\n    Feed.isStreakRestorable,\n    Feed.expiredStreakCount,\n    Feed.kind,\n    Feed.key,\n    Friend._id AS friendRowId,\n    Friend.userId AS friendUserId,\n    Friend.friendmojiCategories,\n    Friend.displayName AS friendDisplayName,\n    Friend.username AS friendDisplayUsername,\n    Friend.friendmojiString,\n    Friend.streakLength,\n    Friend.streakExpiration,\n    Friend.bitmojiAvatarId,\n    Friend.bitmojiSelfieId,\n    Friend.bitmojiBackgroundId,\n    Friend.bitmojiBackgroundUrl,\n    Friend.birthday,\n    Friend.addedTimestamp,\n    Friend.reverseAddedTimestamp,\n    Friend.isOfficial,\n    Friend.isBrand,\n    Friend.businessCategory,\n    Friend.friendLinkType,\n    Friend.snapProId,\n    Friend.storyMuted AS friendStoryMuted,\n    lastInteractionUser.userId AS displayInteractionUserId,\n    lastInteractionUser.displayName AS displayInteractionUserDisplayName,\n    lastInteractionUser.username AS displayInteractionUserUsername,\n    lastWriterUser.userId AS lastWriterUserId,\n    Feed.lastMutatorUserId AS mutatorUserId,\n    FriendsFeedScore.score AS score,\n    FeedPostSnapAction.currentFeedAction AS currentFeedAction,\n    FeedPostSnapAction.expirationTimestamp AS postSnapActionExpirationTimestamp,\n    FeedPostSnapAction.contextSessionId AS postSnapActionContextSessionId,\n    FeedPostSnapAction.snapId AS postSnapActionLastViewedSnapId\nFROM\nFeed\nINNER JOIN FriendsFeedScore ON Feed._id = FriendsFeedScore.feedRowId\nLEFT OUTER JOIN Friend AS Friend ON Feed.friendRowId = Friend._id\nLEFT OUTER JOIN CombinedUsername AS friendCombined ON Friend.combinedUsernameRowId = friendCombined._id\nLEFT OUTER JOIN Friend AS lastInteractionUser ON Feed.lastInteractionUserId = lastInteractionUser._id\nLEFT OUTER JOIN CombinedUsername AS lastInteractionUserCombined ON lastInteractionUser.combinedUsernameRowId = lastInteractionUserCombined._id\nLEFT OUTER JOIN Friend AS lastWriterUser ON Feed.lastInteractionWriterId = lastWriterUser._id\nLEFT OUTER JOIN (SELECT conversationId, currentFeedAction, max(expirationTimestamp) AS expirationTimestamp, contextSessionId, snapId FROM PostSnapAction GROUP BY conversationId) AS FeedPostSnapAction\nON (\n    Feed.key = FeedPostSnapAction.conversationId\n)\nWHERE (Feed.lastInteractionTimestamp IS NOT NULL AND Feed.clearedTimestamp <= Feed.sortingTimestamp)", 0, null);
        }
        if (i <= 480 && i2 > 480) {
            ((C19506byj) interfaceC54340yek).c(num5, "DROP VIEW IF EXISTS FriendsFeedView", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "CREATE VIEW IF NOT EXISTS FriendsFeedView\nAS SELECT\n    Feed._id,\n    coalesce(Feed.specifiedName, Feed.fitScreenParticipantString, Feed.participantString) AS feedDisplayName,\n    participantsSize,\n    Feed.lastInteractionTimestamp,\n    Feed.displayTimestamp,\n    Feed.displayInteractionType,\n    Feed.lastInteractionUserId,\n    Feed.clearedTimestamp,\n    Feed.pinnedTimestamp,\n    Feed.isLocked,\n    Feed.isStreakRestorable,\n    Feed.expiredStreakCount,\n    Feed.kind,\n    Feed.key,\n    Feed.notificationPreferences,\n    Friend._id AS friendRowId,\n    Friend.userId AS friendUserId,\n    Friend.friendmojiCategories,\n    Friend.displayName AS friendDisplayName,\n    Friend.username AS friendDisplayUsername,\n    Friend.friendmojiString,\n    Friend.streakLength,\n    Friend.streakExpiration,\n    Friend.bitmojiAvatarId,\n    Friend.bitmojiSelfieId,\n    Friend.bitmojiBackgroundId,\n    Friend.bitmojiBackgroundUrl,\n    Friend.birthday,\n    Friend.addedTimestamp,\n    Friend.reverseAddedTimestamp,\n    Friend.isOfficial,\n    Friend.isBrand,\n    Friend.businessCategory,\n    Friend.friendLinkType,\n    Friend.snapProId,\n    FriendStory.storyId AS friendStoryId,\n    FriendStory.numPrivateStories AS numPrivateStories,\n    FriendStory.isViewed AS friendStoryIsViewed,\n    FriendStory.latestSnapTimestamp AS friendStoryLatestTimestamp,\n    FriendStory.latestSnapExpirationTimestamp AS friendStoryLatestExpirationTimestamp,\n    FriendStory.firstUnviewedSnapId AS friendStoryFirstUnviewedSnapId,\n    Friend.storyMuted AS friendStoryMuted,\n    lastInteractionUser.userId AS displayInteractionUserId,\n    lastInteractionUser.displayName AS displayInteractionUserDisplayName,\n    lastInteractionUser.username AS displayInteractionUserUsername,\n    lastWriterUser.userId AS lastWriterUserId,\n    Feed.lastMutatorUserId AS mutatorUserId,\n    FriendsFeedScore.score AS score,\n    FeedPostSnapAction.currentFeedAction AS currentFeedAction,\n    FeedPostSnapAction.expirationTimestamp AS postSnapActionExpirationTimestamp,\n    FeedPostSnapAction.contextSessionId AS postSnapActionContextSessionId,\n    FeedPostSnapAction.snapId AS postSnapActionLastViewedSnapId\nFROM\nFeed\nLEFT OUTER JOIN FriendWithUsername AS Friend ON Feed.friendRowId = Friend._id\nLEFT OUTER JOIN FriendWithUsername AS lastInteractionUser ON Feed.lastInteractionUserId = lastInteractionUser._id\nLEFT OUTER JOIN FriendWithUsername AS lastWriterUser ON Feed.lastInteractionWriterId = lastWriterUser._id\nLEFT OUTER JOIN StoryViewFriendStoriesActiveSnaps AS FriendStory ON (Feed.kind = 0 AND Friend.userId = FriendStory.userId)\nLEFT OUTER JOIN FriendsFeedScore ON Feed._id = FriendsFeedScore.feedRowId\nLEFT OUTER JOIN (SELECT conversationId, currentFeedAction, max(expirationTimestamp) AS expirationTimestamp, contextSessionId, snapId FROM PostSnapAction GROUP BY conversationId) AS FeedPostSnapAction\nON (\n    Feed.key = FeedPostSnapAction.conversationId\n)\nWHERE (Feed.lastInteractionTimestamp IS NOT NULL AND\n Feed.clearedTimestamp <= Feed.sortingTimestamp)", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "PRAGMA legacy_alter_table=1", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "DROP VIEW IF EXISTS FriendsFeedViewV2", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "CREATE VIEW IF NOT EXISTS FriendsFeedViewV2\nAS SELECT\n    Feed._id,\n    coalesce(Feed.specifiedName, Feed.fitScreenParticipantString, Feed.participantString) AS feedDisplayName,\n    participantsSize,\n    Feed.lastInteractionTimestamp,\n    Feed.displayTimestamp,\n    Feed.displayInteractionType,\n    Feed.lastInteractionUserId,\n    Feed.clearedTimestamp,\n    Feed.pinnedTimestamp,\n    Feed.isLocked,\n    Feed.isStreakRestorable,\n    Feed.expiredStreakCount,\n    Feed.kind,\n    Feed.key,\n    Feed.notificationPreferences,\n    Friend._id AS friendRowId,\n    Friend.userId AS friendUserId,\n    Friend.friendmojiCategories,\n    Friend.displayName AS friendDisplayName,\n    Friend.username AS friendDisplayUsername,\n    Friend.friendmojiString,\n    Friend.streakLength,\n    Friend.streakExpiration,\n    Friend.bitmojiAvatarId,\n    Friend.bitmojiSelfieId,\n    Friend.bitmojiBackgroundId,\n    Friend.bitmojiBackgroundUrl,\n    Friend.birthday,\n    Friend.addedTimestamp,\n    Friend.reverseAddedTimestamp,\n    Friend.isOfficial,\n    Friend.isBrand,\n    Friend.businessCategory,\n    Friend.friendLinkType,\n    Friend.snapProId,\n    Friend.storyMuted AS friendStoryMuted,\n    lastInteractionUser.userId AS displayInteractionUserId,\n    lastInteractionUser.displayName AS displayInteractionUserDisplayName,\n    lastInteractionUser.username AS displayInteractionUserUsername,\n    lastWriterUser.userId AS lastWriterUserId,\n    Feed.lastMutatorUserId AS mutatorUserId,\n    FriendsFeedScore.score AS score,\n    FeedPostSnapAction.currentFeedAction AS currentFeedAction,\n    FeedPostSnapAction.expirationTimestamp AS postSnapActionExpirationTimestamp,\n    FeedPostSnapAction.contextSessionId AS postSnapActionContextSessionId,\n    FeedPostSnapAction.snapId AS postSnapActionLastViewedSnapId\nFROM\nFeed\nINNER JOIN FriendsFeedScore ON Feed._id = FriendsFeedScore.feedRowId\nLEFT OUTER JOIN Friend AS Friend ON Feed.friendRowId = Friend._id\nLEFT OUTER JOIN CombinedUsername AS friendCombined ON Friend.combinedUsernameRowId = friendCombined._id\nLEFT OUTER JOIN Friend AS lastInteractionUser ON Feed.lastInteractionUserId = lastInteractionUser._id\nLEFT OUTER JOIN CombinedUsername AS lastInteractionUserCombined ON lastInteractionUser.combinedUsernameRowId = lastInteractionUserCombined._id\nLEFT OUTER JOIN Friend AS lastWriterUser ON Feed.lastInteractionWriterId = lastWriterUser._id\nLEFT OUTER JOIN (SELECT conversationId, currentFeedAction, max(expirationTimestamp) AS expirationTimestamp, contextSessionId, snapId FROM PostSnapAction GROUP BY conversationId) AS FeedPostSnapAction\nON (\n    Feed.key = FeedPostSnapAction.conversationId\n)\nWHERE (Feed.lastInteractionTimestamp IS NOT NULL AND Feed.clearedTimestamp <= Feed.sortingTimestamp)", 0, null);
        }
        if (i <= 481 && i2 > 481) {
            ((C19506byj) interfaceC54340yek).c(num5, "CREATE TABLE IF NOT EXISTS BestFriendViewedPosition(\n    _id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n    friendRowId INTEGER NOT NULL,\n    viewedPosition INTEGER NOT NULL\n)", 0, null);
        }
        if (i <= 482 && i2 > 482) {
            ((C19506byj) interfaceC54340yek).c(num5, "CREATE TABLE IF NOT EXISTS ExtendedBestFriend(\n    _id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n    friendRowId INTEGER NOT NULL\n)", 0, null);
        }
        if (i <= 483 && i2 > 483) {
            ((C19506byj) interfaceC54340yek).c(num5, "ALTER TABLE Story\nADD COLUMN isFriendOfFriend INTEGER", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, str8, 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "CREATE VIEW IF NOT EXISTS StoryViewActiveSnaps AS\nSELECT\n    Story._id,\n    Story.storyId,\n    Story.userId AS friendStoryPosterUserId,\n    Story.displayName,\n    Story.kind,\n    Story.groupStoryType,\n    Story.rankingId,\n    Story.lastSyncRequestId,\n    Story.hpoData,\n    Story.isFriendOfFriend,\n    StorySnaps.isViewed AS viewed,\n    StorySnaps.latestSnapTimestamp AS latestTimeStamp,\n    StorySnaps.latestSnapExpirationTimestamp AS latestExpirationTimestamp,\n    StorySnaps.totalMediaDurationMs\nFROM Story\nLEFT OUTER JOIN (\n    SELECT\n        StorySnap.storyRowId,\n        MAX(Snap.timestamp) AS latestSnapTimestamp,\n        MAX(StorySnap.expirationTimestamp) AS latestSnapExpirationTimestamp,\n        MIN(StorySnap.viewed) = 1 AS isViewed,\n        SUM(Snap.durationInMs) AS totalMediaDurationMs\n    FROM StorySnap\n    JOIN Snap ON StorySnap.snapRowId = Snap._id\n    GROUP BY StorySnap.storyRowId\n) AS StorySnaps ON Story._id = StorySnaps.storyRowId\nWHERE Story._id IN (SELECT DISTINCT StorySnap.storyRowId FROM StorySnap)", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "DROP VIEW IF EXISTS DiscoverFeedFriendStoriesViewV2", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "CREATE VIEW IF NOT EXISTS DiscoverFeedFriendStoriesViewV2\nAS SELECT\n    Story._id,\n    Story.storyId AS storyId,\n    FirstUnviewedSnap.snapId AS firstUnviewedSnapId,\n    Friend.userId AS friendUserId,\n    Friend.displayName AS friendDisplayName,\n    Friend.friendLinkType AS friendLinkType,\n    Friend.username AS friendUsername,\n    Friend.isOfficial AS friendIsOfficialUser,\n    Story.friendStoryPosterUserId AS friendStoryPosterUserId,\n    Story.displayName AS storyDisplayName,\n    Feed.specifiedName AS feedSpecifiedName,\n    Feed.participantString AS feedParticipantString,\n    Feed._id AS feedId,\n    Friend.bitmojiAvatarId,\n    Friend.bitmojiSelfieId,\n    COALESCE(Friend.storyMuted, 0) AS storyMuted,\n    Story.groupStoryType,\n    Story.viewed AS storyViewed,\n    latestTimeStamp AS storyLatestTimestamp,\n    latestExpirationTimestamp AS storyLatestExpirationTimestamp,\n    rankingId AS storyRankingId,\n    Story.lastSyncRequestId AS lastSyncRequestId,\n    Story.hpoData AS hpoData,\n    Story.isFriendOfFriend AS isFriendOfFriend,\n    Story.totalMediaDurationMs\nFROM StoryViewActiveSnaps AS Story\nLEFT OUTER JOIN MobStoryMetadata ON (Story.kind = 1 AND MobStoryMetadata.storyRowId = Story._id)\nLEFT OUTER JOIN FriendWithUsername AS Friend ON Friend.userId = Story.friendStoryPosterUserId\nLEFT OUTER JOIN Feed ON Feed.friendRowId = Friend._id\nLEFT OUTER JOIN (\n    SELECT\n    StorySnap.storyRowId,\n    Snap.snapId,\n    min(Snap.timestamp)\n    FROM StorySnap\n    LEFT OUTER JOIN Snap ON Snap._id = StorySnap.snapRowId\n    WHERE StorySnap.viewed = 0\n    GROUP BY StorySnap.storyRowId\n) AS FirstUnviewedSnap ON Story._id = FirstUnviewedSnap.storyRowId\nWHERE (\n        Story.kind = 0 -- StoryKind.FRIEND\n        AND (\n            -- StoryKind.FRIEND could include OUTGOING|FOLLOWING friends. Only show MUTUAL friends.\n            -- If Friend table is not yet populated, use rankingId as a signal for mutual friends.\n            friendLinkType = 0 OR (friendLinkType IS NULL AND rankingId NOT NULL)\n        )\n    ) OR (\n        Story.kind = 1 -- StoryKind.GROUP\n        -- CUSTOM(0) / PRIVATE(1) / SHARED(4) / COMMUNITIES(6) Group Stories only\n        AND MobStoryMetadata.groupStoryType IN (0, 1, 4, 6)\n        AND COALESCE(MobStoryMetadata.customStorySubtype, -1) != 1 -- filter out snap reply custom stories\n    ) OR (\n        Story.kind = 6 -- StoryKind.BUSINESS\n        AND MobStoryMetadata.groupStoryType IN (3)\n        -- Suggested Stories part of the normal friend stories; tested more and more realized that read receipt on iOS is stored separately\n        -- custom story aggregated, grap story as friend story can't propagate the receipt; can't bypass the filter. first red flag\n        -- not so ideal ways to bypass them, part of friend stroy, a lot of information might be missing, feels bad after tackling the corner cases\n        -- decided to rewrite it as a new story type\n        -- now write them to different database object, and fetch them differently and set up different logging types\n        -- client works fine if we keep it, every time we talk to the backend we only have limited fields\n        -- want to better describe it, when we talk to backend we need a new type\n    )", 0, null);
        }
        if (i <= 484 && i2 > 484) {
            ((C19506byj) interfaceC54340yek).c(num5, "ALTER TABLE StorySnap ADD COLUMN encodedContentModerationStatus BLOB DEFAULT NULL", 0, null);
        }
        if (i <= 485 && i2 > 485) {
            ((C19506byj) interfaceC54340yek).c(num5, "ALTER TABLE MobStoryMetadata ADD COLUMN privateStoryMetadata BLOB", 0, null);
        }
        if (i <= 486 && i2 > 486) {
            ((C19506byj) interfaceC54340yek).c(num5, "PRAGMA legacy_alter_table=1", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "ALTER TABLE Friend\nADD COLUMN dreamsGenerationPolicy INTEGER", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "DROP VIEW IF EXISTS FriendWithUsername", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "CREATE VIEW IF NOT EXISTS FriendWithUsername\nAS SELECT\n    Friend._id,\n    Friend._lastModifiedTimestamp,\n     -- Regarding nullability: CombinedUsername.encodedUsername is nullable to allow inserts to\n     -- work (an insert trigger adds encodedUsername, but SQLite does not allow it to be null in\n     -- the interim if it has the NOT NULL constraint). However, encodedUsername will never be null\n     -- in practice. There is a WHERE CombinedUsername.encodedUsername IS NOT NULL clause added to\n     -- this query just to eliminate even that outside chance.\n     -- When this was written, we were using SqlDelight 1.4, which does not infer from the IS NOT\n     -- NULL clause that username cannot be null, and emits the username model as nullable. It is\n     -- safe to cast these to non-nullable references using !!. SqlDelight 1.5 adds additional\n     -- non-nullable inferencing and fixes this particular case.\n    CombinedUsername.encodedUsername AS username,\n    Friend.userId,\n    Friend.displayName,\n    Friend.bitmojiAvatarId,\n    Friend.bitmojiSelfieId,\n    Friend.bitmojiSceneId,\n    Friend.bitmojiBackgroundId,\n    Friend.friendmojis,\n    Friend.friendmojiCategories,\n    Friend.phone,\n    Friend.score,\n    Friend.birthday,\n    Friend.sentToMe,\n    Friend.receivedFromMe,\n    Friend.addedTimestamp,\n    Friend.reverseAddedTimestamp,\n    Friend.lastMessageId,\n    Friend.unreadCount,\n    Friend.friendmojiString,\n    Friend.serverDisplayName,\n    Friend.streakLength,\n    Friend.streakExpiration,\n    Friend.friendLinkType,\n    Friend.storyMuted,\n    Friend.isPopular,\n    Friend.isOfficial,\n    Friend.isFideliusReady,\n    Friend.snapProId,\n    Friend.fideliusKeys,\n    Friend.isBrand,\n    Friend.businessCategory,\n    Friend.syncSource,\n    Friend.isCameosSharingSupported,\n    Friend.isBitmojiFriendmojiSharingSupported,\n    Friend.cameosSharingPolicy,\n    Friend.reverseBestFriendRanking,\n    Friend.isPinnedBestFriend,\n    Friend.plusBadgeVisibility,\n    Friend.postViewEmoji,\n    Friend.bitmojiBackgroundUrl,\n    Friend.bitmojiBackgroundUrlType,\n    Friend.dreamsGenerationPolicy,\n    COALESCE(CombinedUsername.mutableUsername, CombinedUsername.originalUsername) AS usernameForSorting\nFROM Friend\nINNER JOIN CombinedUsername ON Friend.combinedUsernameRowId=CombinedUsername._id\nWHERE CombinedUsername.encodedUsername IS NOT NULL", 0, null);
        }
        if (i <= 487 && i2 > 487) {
            ((C19506byj) interfaceC54340yek).c(num5, "CREATE TABLE IF NOT EXISTS ContactFriend(\n    _id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n    friendRowId INTEGER NOT NULL\n)", 0, null);
        }
        if (i <= 488 && i2 > 488) {
            ((C19506byj) interfaceC54340yek).c(num5, "CREATE TABLE IF NOT EXISTS ChatBirthdayUpsell(\n    _id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n    friendUserId TEXT NOT NULL UNIQUE,\n    lastInteractionYear INTEGER NOT NULL DEFAULT 0\n)", 0, null);
        }
        if (i <= 489 && i2 > 489) {
            ((C19506byj) interfaceC54340yek).c(num5, "ALTER TABLE Contact ADD COLUMN hashedPhoneNumber TEXT NOT NULL DEFAULT \"\"", 0, null);
        }
        if (i <= 490 && i2 > 490) {
            ((C19506byj) interfaceC54340yek).c(num5, "DROP VIEW IF EXISTS FriendsFeedView", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "CREATE VIEW IF NOT EXISTS FriendsFeedView\nAS SELECT\n    Feed._id,\n    coalesce(Feed.specifiedName, Feed.fitScreenParticipantString, Feed.participantString) AS feedDisplayName,\n    participantsSize,\n    Feed.lastInteractionTimestamp,\n    Feed.displayTimestamp,\n    Feed.displayInteractionType,\n    Feed.lastInteractionUserId,\n    Feed.clearedTimestamp,\n    Feed.pinnedTimestamp,\n    Feed.isLocked,\n    Feed.isStreakRestorable,\n    Feed.expiredStreakCount,\n    Feed.kind,\n    Feed.key,\n    Feed.notificationPreferences,\n    Friend._id AS friendRowId,\n    Friend.userId AS friendUserId,\n    Friend.friendmojiCategories,\n    Friend.displayName AS friendDisplayName,\n    Friend.username AS friendDisplayUsername,\n    Friend.friendmojiString,\n    Friend.streakLength,\n    Friend.streakExpiration,\n    Friend.bitmojiAvatarId,\n    Friend.bitmojiSelfieId,\n    Friend.bitmojiBackgroundId,\n    Friend.bitmojiBackgroundUrl,\n    Friend.birthday,\n    Friend.addedTimestamp,\n    Friend.reverseAddedTimestamp,\n    Friend.isOfficial,\n    Friend.isBrand,\n    Friend.businessCategory,\n    Friend.friendLinkType,\n    Friend.snapProId,\n    FriendStory.storyId AS friendStoryId,\n    FriendStory.numPrivateStories AS numPrivateStories,\n    FriendStory.isViewed AS friendStoryIsViewed,\n    FriendStory.latestSnapTimestamp AS friendStoryLatestTimestamp,\n    FriendStory.latestSnapExpirationTimestamp AS friendStoryLatestExpirationTimestamp,\n    FriendStory.firstUnviewedSnapId AS friendStoryFirstUnviewedSnapId,\n    Friend.storyMuted AS friendStoryMuted,\n    lastInteractionUser.userId AS displayInteractionUserId,\n    lastInteractionUser.displayName AS displayInteractionUserDisplayName,\n    lastInteractionUser.username AS displayInteractionUserUsername,\n    lastWriterUser.userId AS lastWriterUserId,\n    Feed.lastMutatorUserId AS mutatorUserId,\n    FriendsFeedScore.score AS score,\n    FeedPostSnapAction.currentFeedAction AS currentFeedAction,\n    FeedPostSnapAction.expirationTimestamp AS postSnapActionExpirationTimestamp,\n    FeedPostSnapAction.contextSessionId AS postSnapActionContextSessionId,\n    FeedPostSnapAction.snapId AS postSnapActionLastViewedSnapId,\n    MobStoryMetadata.privateStoryMetadata\nFROM\nFeed\nLEFT OUTER JOIN FriendWithUsername AS Friend ON Feed.friendRowId = Friend._id\nLEFT OUTER JOIN FriendWithUsername AS lastInteractionUser ON Feed.lastInteractionUserId = lastInteractionUser._id\nLEFT OUTER JOIN FriendWithUsername AS lastWriterUser ON Feed.lastInteractionWriterId = lastWriterUser._id\nLEFT OUTER JOIN StoryViewFriendStoriesActiveSnaps AS FriendStory ON (Feed.kind = 0 AND Friend.userId = FriendStory.userId)\nLEFT OUTER JOIN FriendsFeedScore ON Feed._id = FriendsFeedScore.feedRowId\nLEFT OUTER JOIN (SELECT conversationId, currentFeedAction, max(expirationTimestamp) AS expirationTimestamp, contextSessionId, snapId FROM PostSnapAction GROUP BY conversationId) AS FeedPostSnapAction\nON (\n    Feed.key = FeedPostSnapAction.conversationId\n)\nLEFT OUTER JOIN MobStoryMetadata ON Friend._id = MobStoryMetadata.storyRowId\nWHERE (Feed.lastInteractionTimestamp IS NOT NULL AND\n Feed.clearedTimestamp <= Feed.sortingTimestamp)", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "PRAGMA legacy_alter_table=1", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "DROP VIEW IF EXISTS FriendsFeedViewV2", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "CREATE VIEW IF NOT EXISTS FriendsFeedViewV2\nAS SELECT\n    Feed._id,\n    coalesce(Feed.specifiedName, Feed.fitScreenParticipantString, Feed.participantString) AS feedDisplayName,\n    participantsSize,\n    Feed.lastInteractionTimestamp,\n    Feed.displayTimestamp,\n    Feed.displayInteractionType,\n    Feed.lastInteractionUserId,\n    Feed.clearedTimestamp,\n    Feed.pinnedTimestamp,\n    Feed.isLocked,\n    Feed.isStreakRestorable,\n    Feed.expiredStreakCount,\n    Feed.kind,\n    Feed.key,\n    Feed.notificationPreferences,\n    Friend._id AS friendRowId,\n    Friend.userId AS friendUserId,\n    Friend.friendmojiCategories,\n    Friend.displayName AS friendDisplayName,\n    Friend.username AS friendDisplayUsername,\n    Friend.friendmojiString,\n    Friend.streakLength,\n    Friend.streakExpiration,\n    Friend.bitmojiAvatarId,\n    Friend.bitmojiSelfieId,\n    Friend.bitmojiBackgroundId,\n    Friend.bitmojiBackgroundUrl,\n    Friend.birthday,\n    Friend.addedTimestamp,\n    Friend.reverseAddedTimestamp,\n    Friend.isOfficial,\n    Friend.isBrand,\n    Friend.businessCategory,\n    Friend.friendLinkType,\n    Friend.snapProId,\n    Friend.storyMuted AS friendStoryMuted,\n    lastInteractionUser.userId AS displayInteractionUserId,\n    lastInteractionUser.displayName AS displayInteractionUserDisplayName,\n    lastInteractionUser.username AS displayInteractionUserUsername,\n    lastWriterUser.userId AS lastWriterUserId,\n    Feed.lastMutatorUserId AS mutatorUserId,\n    FriendsFeedScore.score AS score,\n    FeedPostSnapAction.currentFeedAction AS currentFeedAction,\n    FeedPostSnapAction.expirationTimestamp AS postSnapActionExpirationTimestamp,\n    FeedPostSnapAction.contextSessionId AS postSnapActionContextSessionId,\n    FeedPostSnapAction.snapId AS postSnapActionLastViewedSnapId,\n    MobStoryMetadata.privateStoryMetadata\nFROM\nFeed\nINNER JOIN FriendsFeedScore ON Feed._id = FriendsFeedScore.feedRowId\nLEFT OUTER JOIN Friend AS Friend ON Feed.friendRowId = Friend._id\nLEFT OUTER JOIN CombinedUsername AS friendCombined ON Friend.combinedUsernameRowId = friendCombined._id\nLEFT OUTER JOIN Friend AS lastInteractionUser ON Feed.lastInteractionUserId = lastInteractionUser._id\nLEFT OUTER JOIN CombinedUsername AS lastInteractionUserCombined ON lastInteractionUser.combinedUsernameRowId = lastInteractionUserCombined._id\nLEFT OUTER JOIN Friend AS lastWriterUser ON Feed.lastInteractionWriterId = lastWriterUser._id\nLEFT OUTER JOIN (SELECT conversationId, currentFeedAction, max(expirationTimestamp) AS expirationTimestamp, contextSessionId, snapId FROM PostSnapAction GROUP BY conversationId) AS FeedPostSnapAction\nON (\n    Feed.key = FeedPostSnapAction.conversationId\n)\nLEFT OUTER JOIN MobStoryMetadata ON Friend._id = MobStoryMetadata.storyRowId\nWHERE (Feed.lastInteractionTimestamp IS NOT NULL AND Feed.clearedTimestamp <= Feed.sortingTimestamp)", 0, null);
        }
        if (i <= 491 && i2 > 491) {
            ((C19506byj) interfaceC54340yek).c(num5, "CREATE TABLE IF NOT EXISTS SeenSuggestedFriend(\n    _id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n    userId TEXT NOT NULL UNIQUE\n)", 0, null);
        }
        if (i <= 492 && i2 > 492) {
            ((C19506byj) interfaceC54340yek).c(num5, "CREATE TABLE IF NOT EXISTS DisplayedNotification (\n    _id INTEGER PRIMARY KEY AUTOINCREMENT,\n\n    -- ID of the notification specified by PNS\n    notificationId TEXT NOT NULL,\n\n    -- the type of the notification, com.snap.notification.api.NotificationType\n    type TEXT NOT NULL,\n\n    -- the timestamp of the notification\n    timestamp INTEGER NOT NULL,\n\n    -- the category of the notification, growth or messaging\n    category INTEGER NOT NULL\n)", 0, null);
        }
        if (i <= 493 && i2 > 493) {
            ((C19506byj) interfaceC54340yek).c(num5, "DROP VIEW IF EXISTS FriendsFeedView", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "CREATE VIEW IF NOT EXISTS FriendsFeedView\nAS SELECT\n    Feed._id,\n    coalesce(Feed.specifiedName, Feed.fitScreenParticipantString, Feed.participantString) AS feedDisplayName,\n    participantsSize,\n    Feed.lastInteractionTimestamp,\n    Feed.displayTimestamp,\n    Feed.displayInteractionType,\n    Feed.lastInteractionUserId,\n    Feed.clearedTimestamp,\n    Feed.pinnedTimestamp,\n    Feed.isLocked,\n    Feed.isStreakRestorable,\n    Feed.expiredStreakCount,\n    Feed.kind,\n    Feed.key,\n    Feed.notificationPreferences,\n    Friend._id AS friendRowId,\n    Friend.userId AS friendUserId,\n    Friend.friendmojiCategories,\n    Friend.displayName AS friendDisplayName,\n    Friend.username AS friendDisplayUsername,\n    Friend.friendmojiString,\n    Friend.streakLength,\n    Friend.streakExpiration,\n    Friend.bitmojiAvatarId,\n    Friend.bitmojiSelfieId,\n    Friend.bitmojiBackgroundId,\n    Friend.bitmojiBackgroundUrl,\n    Friend.birthday,\n    Friend.addedTimestamp,\n    Friend.reverseAddedTimestamp,\n    Friend.isOfficial,\n    Friend.isBrand,\n    Friend.businessCategory,\n    Friend.friendLinkType,\n    Friend.snapProId,\n    FriendStory.storyId AS friendStoryId,\n    FriendStory.numPrivateStories AS numPrivateStories,\n    FriendStory.isViewed AS friendStoryIsViewed,\n    FriendStory.latestSnapTimestamp AS friendStoryLatestTimestamp,\n    FriendStory.latestSnapExpirationTimestamp AS friendStoryLatestExpirationTimestamp,\n    FriendStory.firstUnviewedSnapId AS friendStoryFirstUnviewedSnapId,\n    Friend.storyMuted AS friendStoryMuted,\n    lastInteractionUser.userId AS displayInteractionUserId,\n    lastInteractionUser.displayName AS displayInteractionUserDisplayName,\n    lastInteractionUser.username AS displayInteractionUserUsername,\n    lastWriterUser.userId AS lastWriterUserId,\n    Feed.lastMutatorUserId AS mutatorUserId,\n    FriendsFeedScore.score AS score,\n    FeedPostSnapAction.currentFeedAction AS currentFeedAction,\n    FeedPostSnapAction.expirationTimestamp AS postSnapActionExpirationTimestamp,\n    FeedPostSnapAction.contextSessionId AS postSnapActionContextSessionId,\n    FeedPostSnapAction.snapId AS postSnapActionLastViewedSnapId,\n    MobStoryMetadata.privateStoryMetadata\nFROM\nFeed\nLEFT OUTER JOIN FriendWithUsername AS Friend ON Feed.friendRowId = Friend._id\nLEFT OUTER JOIN FriendWithUsername AS lastInteractionUser ON Feed.lastInteractionUserId = lastInteractionUser._id\nLEFT OUTER JOIN FriendWithUsername AS lastWriterUser ON Feed.lastInteractionWriterId = lastWriterUser._id\nLEFT OUTER JOIN StoryViewFriendStoriesActiveSnaps AS FriendStory ON (Feed.kind = 0 AND Friend.userId = FriendStory.userId)\nLEFT OUTER JOIN FriendsFeedScore ON Feed._id = FriendsFeedScore.feedRowId\nLEFT OUTER JOIN (SELECT conversationId, currentFeedAction, max(expirationTimestamp) AS expirationTimestamp, contextSessionId, snapId FROM PostSnapAction GROUP BY conversationId) AS FeedPostSnapAction\nON (\n    Feed.key = FeedPostSnapAction.conversationId\n)\nLEFT OUTER JOIN StoryViewPlayableFriendStoriesMapping AS FriendStory2 ON FriendStory2.userId = Friend.userId AND FriendStory.storyId = FriendStory2.storyId\nLEFT OUTER JOIN MobStoryMetadata ON FriendStory2.storyRowId = MobStoryMetadata.storyRowId\nWHERE (Feed.lastInteractionTimestamp IS NOT NULL AND\n Feed.clearedTimestamp <= Feed.sortingTimestamp)", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "PRAGMA legacy_alter_table=1", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "DROP VIEW IF EXISTS FriendsFeedViewV2", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "CREATE VIEW IF NOT EXISTS FriendsFeedViewV2\nAS SELECT\n    Feed._id,\n    coalesce(Feed.specifiedName, Feed.fitScreenParticipantString, Feed.participantString) AS feedDisplayName,\n    participantsSize,\n    Feed.lastInteractionTimestamp,\n    Feed.displayTimestamp,\n    Feed.displayInteractionType,\n    Feed.lastInteractionUserId,\n    Feed.clearedTimestamp,\n    Feed.pinnedTimestamp,\n    Feed.isLocked,\n    Feed.isStreakRestorable,\n    Feed.expiredStreakCount,\n    Feed.kind,\n    Feed.key,\n    Feed.notificationPreferences,\n    Friend._id AS friendRowId,\n    Friend.userId AS friendUserId,\n    Friend.friendmojiCategories,\n    Friend.displayName AS friendDisplayName,\n    Friend.username AS friendDisplayUsername,\n    Friend.friendmojiString,\n    Friend.streakLength,\n    Friend.streakExpiration,\n    Friend.bitmojiAvatarId,\n    Friend.bitmojiSelfieId,\n    Friend.bitmojiBackgroundId,\n    Friend.bitmojiBackgroundUrl,\n    Friend.birthday,\n    Friend.addedTimestamp,\n    Friend.reverseAddedTimestamp,\n    Friend.isOfficial,\n    Friend.isBrand,\n    Friend.businessCategory,\n    Friend.friendLinkType,\n    Friend.snapProId,\n    Friend.storyMuted AS friendStoryMuted,\n    lastInteractionUser.userId AS displayInteractionUserId,\n    lastInteractionUser.displayName AS displayInteractionUserDisplayName,\n    lastInteractionUser.username AS displayInteractionUserUsername,\n    lastWriterUser.userId AS lastWriterUserId,\n    Feed.lastMutatorUserId AS mutatorUserId,\n    FriendsFeedScore.score AS score,\n    FeedPostSnapAction.currentFeedAction AS currentFeedAction,\n    FeedPostSnapAction.expirationTimestamp AS postSnapActionExpirationTimestamp,\n    FeedPostSnapAction.contextSessionId AS postSnapActionContextSessionId,\n    FeedPostSnapAction.snapId AS postSnapActionLastViewedSnapId,\n    MobStoryMetadata.privateStoryMetadata\nFROM\nFeed\nINNER JOIN FriendsFeedScore ON Feed._id = FriendsFeedScore.feedRowId\nLEFT OUTER JOIN Friend AS Friend ON Feed.friendRowId = Friend._id\nLEFT OUTER JOIN CombinedUsername AS friendCombined ON Friend.combinedUsernameRowId = friendCombined._id\nLEFT OUTER JOIN Friend AS lastInteractionUser ON Feed.lastInteractionUserId = lastInteractionUser._id\nLEFT OUTER JOIN CombinedUsername AS lastInteractionUserCombined ON lastInteractionUser.combinedUsernameRowId = lastInteractionUserCombined._id\nLEFT OUTER JOIN Friend AS lastWriterUser ON Feed.lastInteractionWriterId = lastWriterUser._id\nLEFT OUTER JOIN (SELECT conversationId, currentFeedAction, max(expirationTimestamp) AS expirationTimestamp, contextSessionId, snapId FROM PostSnapAction GROUP BY conversationId) AS FeedPostSnapAction\nON (\n    Feed.key = FeedPostSnapAction.conversationId\n)\nLEFT OUTER JOIN StoryViewFriendStoriesActiveSnaps AS FriendStory ON (Feed.kind = 0 AND Friend.userId = FriendStory.userId)\nLEFT OUTER JOIN StoryViewPlayableFriendStoriesMapping AS FriendStory2 ON FriendStory2.userId = Friend.userId AND FriendStory.storyId = FriendStory2.storyId\nLEFT OUTER JOIN MobStoryMetadata ON FriendStory2.storyRowId = MobStoryMetadata.storyRowId\nWHERE (Feed.lastInteractionTimestamp IS NOT NULL AND Feed.clearedTimestamp <= Feed.sortingTimestamp)", 0, null);
        }
        if (i <= 494 && i2 > 494) {
            ((C19506byj) interfaceC54340yek).c(num5, "DROP TABLE IF EXISTS Unlockables", 0, null);
        }
        if (i <= 495 && i2 > 495) {
            ((C19506byj) interfaceC54340yek).c(num5, "CREATE INDEX IF NOT EXISTS friend_link_type ON Friend(friendLinkType)", 0, null);
            ((C19506byj) interfaceC54340yek).c(num5, "CREATE INDEX IF NOT EXISTS suggestion_placement_friend_row_id ON SuggestedFriendPlacement(friendRowId)", 0, null);
        }
        if (i <= 496 && i2 > 496) {
            ((C19506byj) interfaceC54340yek).c(num5, "ALTER TABLE MobStoryMetadata ADD COLUMN shortcutId TEXT", 0, null);
        }
        if (i > 497 || i2 <= 497) {
            return;
        }
        ((C19506byj) interfaceC54340yek).c(num5, "PRAGMA legacy_alter_table=1", 0, null);
        ((C19506byj) interfaceC54340yek).c(num5, "ALTER TABLE Friend\nADD COLUMN bitmojiAvatarMetadata BLOB", 0, null);
        ((C19506byj) interfaceC54340yek).c(num5, "DROP VIEW IF EXISTS FriendWithUsername", 0, null);
        ((C19506byj) interfaceC54340yek).c(num5, "CREATE VIEW IF NOT EXISTS FriendWithUsername\nAS SELECT\n    Friend._id,\n    Friend._lastModifiedTimestamp,\n     -- Regarding nullability: CombinedUsername.encodedUsername is nullable to allow inserts to\n     -- work (an insert trigger adds encodedUsername, but SQLite does not allow it to be null in\n     -- the interim if it has the NOT NULL constraint). However, encodedUsername will never be null\n     -- in practice. There is a WHERE CombinedUsername.encodedUsername IS NOT NULL clause added to\n     -- this query just to eliminate even that outside chance.\n     -- When this was written, we were using SqlDelight 1.4, which does not infer from the IS NOT\n     -- NULL clause that username cannot be null, and emits the username model as nullable. It is\n     -- safe to cast these to non-nullable references using !!. SqlDelight 1.5 adds additional\n     -- non-nullable inferencing and fixes this particular case.\n    CombinedUsername.encodedUsername AS username,\n    Friend.userId,\n    Friend.displayName,\n    Friend.bitmojiAvatarId,\n    Friend.bitmojiSelfieId,\n    Friend.bitmojiSceneId,\n    Friend.bitmojiBackgroundId,\n    Friend.friendmojis,\n    Friend.friendmojiCategories,\n    Friend.phone,\n    Friend.score,\n    Friend.birthday,\n    Friend.sentToMe,\n    Friend.receivedFromMe,\n    Friend.addedTimestamp,\n    Friend.reverseAddedTimestamp,\n    Friend.lastMessageId,\n    Friend.unreadCount,\n    Friend.friendmojiString,\n    Friend.serverDisplayName,\n    Friend.streakLength,\n    Friend.streakExpiration,\n    Friend.friendLinkType,\n    Friend.storyMuted,\n    Friend.isPopular,\n    Friend.isOfficial,\n    Friend.isFideliusReady,\n    Friend.snapProId,\n    Friend.fideliusKeys,\n    Friend.isBrand,\n    Friend.businessCategory,\n    Friend.syncSource,\n    Friend.isCameosSharingSupported,\n    Friend.isBitmojiFriendmojiSharingSupported,\n    Friend.cameosSharingPolicy,\n    Friend.reverseBestFriendRanking,\n    Friend.isPinnedBestFriend,\n    Friend.plusBadgeVisibility,\n    Friend.postViewEmoji,\n    Friend.bitmojiBackgroundUrl,\n    Friend.bitmojiBackgroundUrlType,\n    Friend.dreamsGenerationPolicy,\n    Friend.bitmojiAvatarMetadata,\n    COALESCE(CombinedUsername.mutableUsername, CombinedUsername.originalUsername) AS usernameForSorting\nFROM Friend\nINNER JOIN CombinedUsername ON Friend.combinedUsernameRowId=CombinedUsername._id\nWHERE CombinedUsername.encodedUsername IS NOT NULL", 0, null);
    }

    @Override // io.reactivex.rxjava3.functions.Function
    public Object apply(Object obj) {
        return ((AbstractC33391l00) obj).a();
    }

    @Override // defpackage.InterfaceC0149Aek
    public void f(InterfaceC54340yek interfaceC54340yek) {
        ((C19506byj) interfaceC54340yek).c(null, "CREATE TABLE IF NOT EXISTS BenchmarkRequestRecord (\n    _id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n    benchmarkId INTEGER NOT NULL UNIQUE,\n    expirationTsSec INTEGER,\n    hasBeenScheduled INTEGER DEFAULT 0,\n    benchmarkResult BLOB DEFAULT NULL\n)", 0, null);
        ((C19506byj) interfaceC54340yek).c(null, "CREATE TABLE IF NOT EXISTS BestFriend(\n    _id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n    friendRowId INTEGER NOT NULL\n)", 0, null);
        ((C19506byj) interfaceC54340yek).c(null, "CREATE TABLE IF NOT EXISTS BestFriendViewedPosition(\n    _id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n    friendRowId INTEGER NOT NULL,\n    viewedPosition INTEGER NOT NULL\n)", 0, null);
        ((C19506byj) interfaceC54340yek).c(null, "CREATE TABLE IF NOT EXISTS BillboardStrings(\n    _id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n    stringKey TEXT NOT NULL,\n    locale TEXT NOT NULL,\n    message TEXT NOT NULL,\n    UNIQUE(stringKey, locale) ON CONFLICT REPLACE\n)", 0, null);
        ((C19506byj) interfaceC54340yek).c(null, "CREATE TABLE IF NOT EXISTS BlacklistFriend(\n    _id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n    friendId TEXT NOT NULL UNIQUE\n)", 0, null);
        ((C19506byj) interfaceC54340yek).c(null, "CREATE TABLE IF NOT EXISTS CharmsOwnerMetadata(\n    _id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n    ownerId TEXT NOT NULL UNIQUE,\n    syncToken BLOB NOT NULL,\n    unviewedCount INTEGER NOT NULL DEFAULT 0\n)", 0, null);
        ((C19506byj) interfaceC54340yek).c(null, "CREATE TABLE IF NOT EXISTS Charms(\n    _id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n    ownerId TEXT NOT NULL,\n    charmId INTEGER NOT NULL,\n    ownerType INTEGER NOT NULL DEFAULT 0,\n    displayName TEXT NOT NULL,\n    descriptionTemplate TEXT NOT NULL,\n    descriptionVariables TEXT,  -- array of variables\n    descriptionVariablesMetadata TEXT, -- array of variable metadata\n\n    dialogButtonText TEXT,\n    hideable INTEGER NOT NULL DEFAULT 0,\n    displayOrder INTEGER NOT NULL DEFAULT 0,\n    unviewed INTEGER NOT NULL DEFAULT 0,\n\n    staticImageStickerId TEXT NOT NULL,\n\n    solomojiTemplateId TEXT,\n    friendmojiTemplateId TEXT,\n    bitmojiTemplateUser1Id TEXT,\n    bitmojiTemplateUser2Id TEXT,\n\n    locale TEXT NOT NULL,\n    source INTEGER NOT NULL DEFAULT 0,\n    hidden INTEGER NOT NULL DEFAULT 0,\n    isTemplate INTEGER NOT NULL DEFAULT 0,\n\n    displayCount INTEGER\n)", 0, null);
        ((C19506byj) interfaceC54340yek).c(null, "CREATE TABLE IF NOT EXISTS ChatBirthdayUpsell(\n    _id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n    friendUserId TEXT NOT NULL UNIQUE,\n    lastInteractionYear INTEGER NOT NULL DEFAULT 0\n)", 0, null);
        ((C19506byj) interfaceC54340yek).c(null, "CREATE TABLE IF NOT EXISTS CkIdentityWebViewConsent(\n    _id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n    snapKitApplicationId TEXT NOT NULL UNIQUE,\n    lastConsentTimestamp INTEGER NOT NULL DEFAULT 0\n)", 0, null);
        ((C19506byj) interfaceC54340yek).c(null, "CREATE TABLE IF NOT EXISTS CognacLocalStorage (\n    _id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n\n    appId TEXT NOT NULL,\n    key TEXT NOT NULL,\n    value TEXT NOT NULL\n)", 0, null);
        ((C19506byj) interfaceC54340yek).c(null, "CREATE TABLE IF NOT EXISTS CognacRV (\n    _id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n    requestId TEXT NOT NULL UNIQUE,\n\n    appId TEXT NOT NULL,\n    slotId TEXT NOT NULL,\n    timestamp INTEGER NOT NULL,\n    payload TEXT\n)", 0, null);
        ((C19506byj) interfaceC54340yek).c(null, "CREATE TABLE IF NOT EXISTS CognacState (\n    _id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n    conversationId TEXT NOT NULL UNIQUE,\n    lastInteractionTimestamp INTEGER NOT NULL\n)", 0, null);
        ((C19506byj) interfaceC54340yek).c(null, "CREATE TABLE IF NOT EXISTS CombinedUsername(\n    _id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n    originalUsername TEXT NOT NULL UNIQUE,\n    mutableUsername TEXT,\n    encodedUsername TEXT NOT NULL\n)", 0, null);
        ((C19506byj) interfaceC54340yek).c(null, "CREATE TABLE IF NOT EXISTS CommerceCheckoutCart(\n    _id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n    storeId TEXT NOT NULL UNIQUE,\n    cart BLOB NOT NULL\n)", 0, null);
        ((C19506byj) interfaceC54340yek).c(null, "CREATE TABLE IF NOT EXISTS ConfigEtag (\n    _id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n    etag TEXT NOT NULL\n)", 0, null);
        ((C19506byj) interfaceC54340yek).c(null, "CREATE TABLE IF NOT EXISTS ConfigRule (\n    _id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n    rule_id BLOB NOT NULL,\n    config_id TEXT NOT NULL,\n    priority INTEGER,\n    config_result BLOB NOT NULL,\n    namespace INTEGER,\n    UNIQUE(rule_id, config_id) ON CONFLICT REPLACE\n)", 0, null);
        ((C19506byj) interfaceC54340yek).c(null, "CREATE TABLE IF NOT EXISTS ConnectedAppScopes(\n    _id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n    appId TEXT NOT NULL,\n    name TEXT NOT NULL,\n    description TEXT,\n    toggleable INTEGER,\n    iconUrl TEXT,\n    isSnapKitFeature INTEGER NOT NULL DEFAULT 0,\n\n    UNIQUE(appId, name)\n)", 0, null);
        ((C19506byj) interfaceC54340yek).c(null, "CREATE TABLE IF NOT EXISTS ConnectedApps(\n    _id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n   appId TEXT NOT NULL UNIQUE, -- uuid format\n   appName TEXT NOT NULL,\n   appIconUrl TEXT,\n   appStoryDisplayName TEXT,\n   appStoryIconUrl TEXT,\n   appStoryTTLDays INTEGER,\n   appStoryEnabled INTEGER,\n   appType INTEGER NOT NULL DEFAULT 0,\n   isConnected INTEGER NOT NULL DEFAULT 1,\n   hasPrivateStorageData INTEGER NOT NULL DEFAULT 0\n)", 0, null);
        ((C19506byj) interfaceC54340yek).c(null, "CREATE TABLE IF NOT EXISTS ContactFriend(\n    _id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n    friendRowId INTEGER NOT NULL\n)", 0, null);
        ((C19506byj) interfaceC54340yek).c(null, "CREATE TABLE IF NOT EXISTS Contact(\n    _id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n    friendRowId INTEGER,\n    displayName TEXT,\n    -- Formatted number suitable for UI\n    phone TEXT NOT NULL,\n    -- Last modified timestamp from android contacts provider\n    lastModifiedTimestamp INTEGER,\n    isSnapchatter INTEGER DEFAULT 0 NOT NULL,\n    added INTEGER DEFAULT 0 NOT NULL,\n    -- Timestamp of last time this phone contact was selected\n    lastInteractionTimestamp INTEGER DEFAULT 0 NOT NULL,\n    -- Most recently selected off platform share destination for this phone number\n    lastOffPlatformShareDestination TEXT,\n    -- Contact ID obtained from ContactsContract. Default set to -1 as 0 can be a valid id\n    contactId INTEGER DEFAULT -1 NOT NULL,\n    -- Last synced timestamp when the contact row changed on sync\n    lastSyncedTimestamp INTEGER DEFAULT 0 NOT NULL,\n    -- Raw phone number as read from the Android contacts provider\n    rawPhone TEXT,\n    -- Rank Score\n    rankScore INTEGER DEFAULT 0 NOT NULL,\n    -- Contact Photo URI\n    photoUri TEXT DEFAULT \"\" NOT NULL,\n    -- hashed phone number\n    hashedPhoneNumber TEXT DEFAULT \"\" NOT NULL\n)", 0, null);
        ((C19506byj) interfaceC54340yek).c(null, "CREATE TABLE IF NOT EXISTS CustomFriend(\n    _id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n    friendId TEXT NOT NULL UNIQUE\n)", 0, null);
        ((C19506byj) interfaceC54340yek).c(null, "CREATE TABLE IF NOT EXISTS DdmlData(\n    _id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n    dataId TEXT,\n    record TEXT,\n    timestamp INTEGER NOT NULL\n)", 0, null);
        ((C19506byj) interfaceC54340yek).c(null, "CREATE TABLE IF NOT EXISTS DdmlModel(\n    _id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n    applicationId TEXT NOT NULL UNIQUE,\n    modelId TEXT NOT NULL UNIQUE,\n    modelSpecAndParams BLOB NOT NULL,\n    timestamp INTEGER NOT NULL\n)", 0, null);
        ((C19506byj) interfaceC54340yek).c(null, "CREATE TABLE IF NOT EXISTS DeltaForceSync(\n     _id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n     client_key TEXT NOT NULL,\n     group_key TEXT NOT NULL UNIQUE,\n     sync_token BLOB\n)", 0, null);
        ((C19506byj) interfaceC54340yek).c(null, "CREATE TABLE IF NOT EXISTS DisplayedNotification (\n    _id INTEGER PRIMARY KEY AUTOINCREMENT,\n\n    -- ID of the notification specified by PNS\n    notificationId TEXT NOT NULL,\n\n    -- the type of the notification, com.snap.notification.api.NotificationType\n    type TEXT NOT NULL,\n\n    -- the timestamp of the notification\n    timestamp INTEGER NOT NULL,\n\n    -- the category of the notification, growth or messaging\n    category INTEGER NOT NULL\n)", 0, null);
        ((C19506byj) interfaceC54340yek).c(null, "CREATE TABLE IF NOT EXISTS EnhancedContacts(\n    _id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n    _lastModifiedTimestamp INTEGER,\n\n    userId TEXT NOT NULL UNIQUE,\n    rawPhone TEXT NOT NULL\n)", 0, null);
        ((C19506byj) interfaceC54340yek).c(null, "CREATE TABLE IF NOT EXISTS ExtendedBestFriend(\n    _id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n    friendRowId INTEGER NOT NULL\n)", 0, null);
        ((C19506byj) interfaceC54340yek).c(null, "CREATE TABLE IF NOT EXISTS FeatureBadgeInteractions(\n    _id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n\n    -- unique identifier for placement\n    placementId INTEGER NOT NULL UNIQUE,\n\n    -- timestamp user last visited the placement\n    lastVisitTimestampMs INTEGER,\n\n    -- timestamp data was last synced for the placement\n    lastDataSyncTimestampMs INTEGER\n)", 0, null);
        ((C19506byj) interfaceC54340yek).c(null, "CREATE TABLE IF NOT EXISTS FeatureBadge(\n    _id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n\n    -- unique identifier for badge\n    badgeId INTEGER NOT NULL UNIQUE,\n\n    -- unique identifier for placement\n    placementId INTEGER NOT NULL UNIQUE,\n\n    -- identifier for the badge targeting criteria\n    campaignId INTEGER NOT NULL,\n\n    -- epoch time when badge became eligible on server\n    eligibleTimestampMs INTEGER NOT NULL,\n\n    -- epoch time when badge expires\n    expirationTimestampMs INTEGER NOT NULL,\n\n    UNIQUE(placementId, campaignId, eligibleTimestampMs)\n)", 0, null);
        ((C19506byj) interfaceC54340yek).c(null, "CREATE TABLE IF NOT EXISTS Feed (\n    _id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n    key TEXT NOT NULL UNIQUE, -- ConversationId\n\n    specifiedName TEXT, -- A name chosen by the group (not generated)\n    participantString TEXT, -- Displayable string with a group chat's members\n    fitScreenParticipantString TEXT, -- Shortened version of participantString to fit the screen.\n    participantsSize INTEGER NOT NULL DEFAULT 1,\n    friendRowId INTEGER, -- If this is a one-on-one chat, the friend's id.\n\n    displayTimestamp INTEGER NOT NULL DEFAULT 0,\n    displayInteractionType TEXT, -- the type of the last interaction\n\n    sortingTimestamp INTEGER NOT NULL DEFAULT 0, -- dedicated timestamp used for sorting\n\n    groupCreationTimestamp INTEGER DEFAULT 0,\n    lastInteractionTimestamp INTEGER DEFAULT 0,\n    lastInteractionUserId INTEGER, -- friend row id of the last user that write/read/screenshotted.\n    lastInteractionWriterId INTEGER, -- friend row id of the last writer.\n\n    clearedTimestamp INTEGER DEFAULT 0,\n\n    lastWriter TEXT, -- userId\n\n    -- Used in 1-1 24hr message retention, 0 represents immediate and 1440 is 24hr retention model\n    messageRetentionInMinutes INTEGER DEFAULT NULL,\n\n    -- 0 for 1:1 Coversation, 1 for Group\n    kind INTEGER NOT NULL,\n\n    -- 0 ALL, 1 SILENT, 2 MENTIONS_ONLY\n    notificationPreferences INTEGER DEFAULT 0 NOT NULL,\n\n    -- used for features with a target user, such as bitmoji\n    lastMutatorUserId TEXT,\n\n    -- Stores the timestamp when user pins conversations\n    pinnedTimestamp INTEGER DEFAULT 0,\n\n    -- Stores the locked state of the feed item\n    isLocked INTEGER NOT NULL DEFAULT 0,\n\n    -- Stores the streak restorable state\n    isStreakRestorable INTEGER DEFAULT 0,\n\n    -- Stores Expired Streak Count\n    expiredStreakCount INTEGER DEFAULT 0\n\n)", 0, null);
        ((C19506byj) interfaceC54340yek).c(null, "CREATE TABLE IF NOT EXISTS FriendCaching(\n    _id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n    -- foreign key to the Friend table\n    friendRowId INTEGER NOT NULL UNIQUE,\n    -- timestamp when this entry's cache value expires, if null then it does not expire\n    expiryTimestamp INTEGER,\n    -- set to true if this row has been requested after it expires and needs to be re-fetched\n    -- from the server\n    needsSync INTEGER NOT NULL DEFAULT 0\n)", 0, null);
        ((C19506byj) interfaceC54340yek).c(null, "CREATE TABLE IF NOT EXISTS FriendDeltaForce(\n    _id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n    _lastModifiedTimestamp INTEGER,\n    username TEXT NOT NULL UNIQUE,\n    combinedUsernameRowId INTEGER NOT NULL UNIQUE,\n    userId TEXT,\n\n    displayName TEXT,\n    bitmojiAvatarId TEXT,\n    bitmojiSelfieId TEXT,\n    friendmojis TEXT,\n    friendmojiCategories TEXT, -- comma separated list of friendmoji categories returned by the server.\n    phone TEXT,\n    score INTEGER,\n--      Birthday as a long consisting of two integers representing the month and day.\n    birthday INTEGER,\n    sentToMe INTEGER,\n    receivedFromMe INTEGER,\n    addedTimestamp INTEGER,  -- timestamp WHEN the 'FROM user' added the 'TO user'\n    reverseAddedTimestamp INTEGER,  -- timestamp WHEN the 'TO user' added the 'FROM user'\n\n    lastMessageId INTEGER,\n\n    unreadCount INTEGER,\n    friendmojiString INTEGER,\n    serverDisplayName TEXT,\n\n    streakLength INTEGER,\n    streakExpiration INTEGER,\n    friendLinkType INTEGER,\n\n    storyMuted INTEGER NOT NULL DEFAULT 0,\n\n    isPopular INTEGER NOT NULL DEFAULT 0,\n    isOfficial INTEGER NOT NULL DEFAULT 0,\n\n    isFideliusReady INTEGER NOT NULL DEFAULT 1,\n\n    snapProId TEXT,\n    fideliusKeys BLOB\n)", 0, null);
        ((C19506byj) interfaceC54340yek).c(null, "CREATE TABLE IF NOT EXISTS FriendLinkSyncState(\n    _id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n    userId TEXT NOT NULL UNIQUE,\n    friendLinkType INTEGER\n)", 0, null);
        ((C19506byj) interfaceC54340yek).c(null, "CREATE TABLE IF NOT EXISTS Friend(\n    _id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n    _lastModifiedTimestamp INTEGER,\n    username TEXT NOT NULL,\n    combinedUsernameRowId INTEGER NOT NULL,\n    userId TEXT NOT NULL UNIQUE,\n\n    displayName TEXT,\n    bitmojiAvatarId TEXT,\n    bitmojiSelfieId TEXT,\n    friendmojis TEXT,\n    friendmojiCategories TEXT, -- comma separated list of friendmoji categories returned by the server.\n    phone TEXT,\n    score INTEGER,\n    -- Birthday as a long consisting of two integers representing the month and day.\n    birthday INTEGER,\n    sentToMe INTEGER,\n    receivedFromMe INTEGER,\n    addedTimestamp INTEGER,  -- timestamp WHEN the 'FROM user' added the 'TO user'\n    reverseAddedTimestamp INTEGER,  -- timestamp WHEN the 'TO user' added the 'FROM user'\n\n    lastMessageId INTEGER,\n\n    unreadCount INTEGER,\n    friendmojiString INTEGER,\n    serverDisplayName TEXT,\n\n    streakLength INTEGER,\n    streakExpiration INTEGER,\n    friendLinkType INTEGER,\n\n    storyMuted INTEGER NOT NULL DEFAULT 0,\n\n    isPopular INTEGER NOT NULL DEFAULT 0,\n    isOfficial INTEGER NOT NULL DEFAULT 0,\n\n    isFideliusReady INTEGER NOT NULL DEFAULT 1,\n\n    snapProId TEXT,\n    fideliusKeys BLOB,\n\n    isBrand INTEGER NOT NULL DEFAULT 0,\n    businessCategory INTEGER,\n\n    -- where the data in the Friend table was most recently sourced from, see the FriendSyncSource\n    -- enum for more details.\n    syncSource INTEGER NOT NULL DEFAULT 0,\n\n    isCameosSharingSupported INTEGER NOT NULL DEFAULT 0,\n\n    -- IDs for 3D Bitmoji experiences.\n    -- https://snapchat.quip.com/0yVWA4raudx9\n    bitmojiSceneId TEXT,\n    bitmojiBackgroundId TEXT,\n\n    -- bitmoji friendmoji sharing is enabled by default unless user explicitly ops out\n    isBitmojiFriendmojiSharingSupported INTEGER NOT NULL DEFAULT 1,\n\n    cameosSharingPolicy INTEGER,\n\n    -- nullable 0 indexed best friend ranking (0-7)\n    reverseBestFriendRanking INTEGER,\n    \n    -- whether this friend is pinned\n    isPinnedBestFriend INTEGER NOT NULL DEFAULT 0,\n\n    -- visibility of the plus badge\n    plusBadgeVisibility INTEGER NOT NULL DEFAULT 0,\n\n    -- custom emoji to show after view\n    postViewEmoji TEXT,\n\n    -- Bitmoji Background Url for 3D Bitmoji experiences (eg Generative Background).\n    -- https://snapchat.quip.com/umKyA3xz071f\n    bitmojiBackgroundUrl TEXT,\n    bitmojiBackgroundUrlType TEXT,\n\n    -- Dreams different generation policies.\n    -- https://snapchat.quip.com/YRFjACqCFC6a\n    dreamsGenerationPolicy INTEGER,\n\n    -- Bitmoji metadata proto containing a list of UGC garments the avatar is wearing\n    bitmojiAvatarMetadata BLOB\n)", 0, null);
        ((C19506byj) interfaceC54340yek).c(null, "CREATE TABLE IF NOT EXISTS FriendScore(\n    _id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n    friendRowId INTEGER NOT NULL UNIQUE, -- the friend's id.\n    score INTEGER,\n    lastUpdateTimestamp INTEGER\n)", 0, null);
        ((C19506byj) interfaceC54340yek).c(null, "CREATE TABLE IF NOT EXISTS FriendShortcut(\n    _id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n    shortcutId TEXT NOT NULL UNIQUE,\n    -- emoji, if set, is always displayed, no matter if the shortcut is selected or not\n    emoji TEXT,\n    -- imageSrc is displayed when emoji is not set\n    imageSrc TEXT,\n    -- name is displayed when the shortcut is selected, together with the emoji/imageSrc\n    name TEXT NOT NULL\n)", 0, null);
        ((C19506byj) interfaceC54340yek).c(null, "CREATE TABLE IF NOT EXISTS FriendSyncState (\n    _id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n    token TEXT\n)", 0, null);
        ((C19506byj) interfaceC54340yek).c(null, "CREATE TABLE IF NOT EXISTS FriendWhoAddedMe(\n    _id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n    friendRowId INTEGER NOT NULL UNIQUE,\n    userId TEXT NOT NULL UNIQUE,\n\n    addSource TEXT,\n\n    added INTEGER DEFAULT 0 NOT NULL,\n    ignored INTEGER DEFAULT 0 NOT NULL,\n    hasViewed INTEGER DEFAULT 0 NOT NULL\n)", 0, null);
        ((C19506byj) interfaceC54340yek).c(null, "CREATE TABLE IF NOT EXISTS FriendWithShortcut(\n    _id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n    shortcutRowId INTEGER NOT NULL,\n    friendRowId INTEGER NOT NULL,\n    UNIQUE (shortcutRowId, friendRowId)\n)", 0, null);
        ((C19506byj) interfaceC54340yek).c(null, "CREATE TABLE IF NOT EXISTS Friendmoji (\n    _id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n    category TEXT NOT NULL UNIQUE, -- Friendmoji category, e.g \"snap_streak\" or \"number_one_bf\"\n    emoji TEXT, -- Emoji used for this friendmoji category.\n    rank INTEGER, -- Priority of friendmoji for ordering. Lower number is higher priority.\n    title TEXT, -- Title for displaying what this friendmoji is.\n    description TEXT, -- Description of what this friendmoji means.\n    pickerDescription TEXT, -- Description to show at emoji picker screen\n    friendmojiType INTEGER\n)", 0, null);
        ((C19506byj) interfaceC54340yek).c(null, "CREATE TABLE IF NOT EXISTS FriendsFeedScore(\n    feedRowId INTEGER NOT NULL PRIMARY KEY,\n    score REAL\n)", 0, null);
        ((C19506byj) interfaceC54340yek).c(null, "CREATE TABLE IF NOT EXISTS FriendsFeedServerSignals(\n    _id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n    feedRowId INTEGER NOT NULL UNIQUE,\n    serverSignals TEXT\n)", 0, null);
        ((C19506byj) interfaceC54340yek).c(null, "CREATE TABLE IF NOT EXISTS FriendsFeedSharedSignals(\n    _id INTEGER NOT NULL PRIMARY KEY DEFAULT 0,\n    userSignals TEXT,\n    previousRankingRunTimestamp INTEGER,\n    previousFullRankingRunTimestamp INTEGER,\n    paginationPrevMinScore REAL\n)", 0, null);
        ((C19506byj) interfaceC54340yek).c(null, "CREATE TABLE IF NOT EXISTS GrowthDeltaForceQueryResolver(\n    _id TEXT NOT NULL PRIMARY KEY,\n    stringVal TEXT\n)", 0, null);
        ((C19506byj) interfaceC54340yek).c(null, "CREATE TABLE IF NOT EXISTS IdentityFlags(\n    _id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n    key TEXT NOT NULL UNIQUE,\n    value INTEGER\n)", 0, null);
        ((C19506byj) interfaceC54340yek).c(null, "CREATE TABLE IF NOT EXISTS InAppWarning (\n    _id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n    -- The unique warning id to identify the DF database entry, together with user id.\n    warningId TEXT NOT NULL UNIQUE,\n    -- Enum integer for warning type. See the protobuf defintion for the mapping.\n    -- https://github.sc-corp.net/Snapchat/pb_schema/blob/master/proto/abuse/support/in_app_warning.proto\n    -- Note that we do not add adapter to convert to-and-from integer because we want to allow backward\n    -- compatiblity if we introduce new warning types. But converting with a old protobuf libary will not\n    -- allow us to do so. We will be forwarding this enum integer to ask the backend for warning messages.\n    warningType INTEGER NOT NULL DEFAULT 0,\n    -- The acknowledgement timestamp in ms. It will be 0 for unacknowledged warnings.\n    acknowledgedAtTs INTEGER NOT NULL,\n    -- The warning creation timestamp in ms. It allows sorting of warning records for prompting order.\n    createdAtTs INTEGER NOT NULL,\n    -- Non-negative number corresponding to the DeltaForce data version.\n    lastModifiedVersion INTEGER NOT NULL DEFAULT 0\n)", 0, null);
        ((C19506byj) interfaceC54340yek).c(null, "CREATE TABLE IF NOT EXISTS InvalidFriend(\n    _id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n    friendRowId INTEGER REFERENCES Friend(_id) NOT NULL UNIQUE,\n    originalUsername TEXT NOT NULL,\n    processed INTEGER NOT NULL DEFAULT 0\n)", 0, null);
        ((C19506byj) interfaceC54340yek).c(null, "CREATE TABLE IF NOT EXISTS InvitedFriend(\n    _id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n    -- temp user id till the user registers with their phone number\n    userID TEXT NOT NULL UNIQUE,\n    -- E.164 formatted number\n    formattedPhoneNumber TEXT NOT NULL,\n    -- display name from the invited friend link\n    displayName TEXT\n)", 0, null);
        ((C19506byj) interfaceC54340yek).c(null, "CREATE TABLE IF NOT EXISTS LensPersistentStorage(\n    _id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n    lensId TEXT NOT NULL UNIQUE,\n    data BLOB NOT NULL,\n    updatedAtTimestamp INTEGER NOT NULL DEFAULT 0\n)", 0, null);
        ((C19506byj) interfaceC54340yek).c(null, "CREATE TABLE IF NOT EXISTS LocalConversationInteraction (\n    _id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n    conversationId TEXT NOT NULL,\n\n    interactionType INTEGER NOT NULL,\n    interactionTimestamp INTEGER NOT NULL\n)", 0, null);
        ((C19506byj) interfaceC54340yek).c(null, "CREATE TABLE IF NOT EXISTS MapExploreReadStatus(\n    _id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n    -- ownerId can be either the userId, or 'Map' for map statuses\n    ownerId TEXT NOT NULL UNIQUE,\n    lastReadTimestamp INTEGER NOT NULL\n)", 0, null);
        ((C19506byj) interfaceC54340yek).c(null, "CREATE TABLE IF NOT EXISTS MessageMediaRef(\n    _id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n\n    messageId TEXT NOT NULL,  -- NOT UNIQUE, the same message can have multiple actions performed ON it \n    mediaType INTEGER NOT NULL,\n    uri TEXT NOT NULL\n)", 0, null);
        ((C19506byj) interfaceC54340yek).c(null, "CREATE TABLE IF NOT EXISTS MobStoryMetadata (\n    _id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n    storyRowId INTEGER NOT NULL,\n    creatorFriendRowId INTEGER, -- row id of mob story creator in Friend table\n    creatorUserId TEXT, -- from server response, prefer data from Friend table via creatorFriendRowId if available\n    creatorUsername TEXT, -- DEPRECATED\n    creatorDisplayName TEXT, -- from server response, prefer data from Friend table via creatorFriendRowId if available\n    createTimestamp INTEGER,\n    displayName TEXT,\n    subText TEXT,\n    storyType INTEGER NOT NULL, -- DEPRECATED\n    typeExtraData BLOB NOT NULL, -- DEPRECATED\n    usersWithAbilities BLOB, -- DEPRECATED\n\n    -- This field exists in MobStoryTypeExtraData but is exposed top-level in the schema so it may be accessed in\n    -- the db layer instead of requiring deserialization of typeExtraData blob, which can be an expensive operation.\n    customStorySubtype INTEGER,\n\n    -- This field is used for the SOMA custom story endpoints. This allows us to tell whether or not a story\n    -- is up to date with the backend.\n    groupVersion INTEGER,\n\n    groupStoryType INTEGER,\n    -- List of the member userIds, which are all be synced to the Friend db prior to insertion here.\n    memberUserIds TEXT,\n    -- Boolean for whether current user has auto-save story to memories enabled.\n    autoSaveToMemories INTEGER,\n    -- Timestamp which indicates when the current user joined the story\n    joinedTimestampMs INTEGER,\n    -- List of the exempted blocked member userIds by current user\n    exemptedBlockMemberUserIds TEXT,\n    -- List of the moderator member userIds promoted by the owner of the story\n    moderatorUserIds TEXT,\n    -- Profile Metadata for Verified Community\n    verifiedCommunityProfileMetadata BLOB,\n    -- List of the non-exempted blocked member userNames by current user\n    nonExemptedBlockMemberUserNames TEXT,\n    -- Metadata for special types of private stories (e.g. BFF Story, Shortcut Stories)\n    privateStoryMetadata BLOB,\n    -- Id to identify private shortcut story\n    shortcutId TEXT\n)", 0, null);
        ((C19506byj) interfaceC54340yek).c(null, "CREATE TABLE IF NOT EXISTS MultiRecipientSendingSnap (\n    _id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n\n    -- Concatenation of recipients' user name and group id.\n    recipientsList TEXT NOT NULL,\n    -- Concatenation of recipient's display name.\n    -- Is shown as primary text on feed cell.\n    feedDisplayName TEXT NOT NULL,\n\n    -- LocalMessageAction's messageId.\n    -- @Deprecated: This field is no longer used or needed with Arroyo, and will be set to \"\" for arroyo entries.\n    -- See https://github.sc-corp.net/Snapchat/android/pull/146638#discussion_r1914549 for more details\n    messageId TEXT NOT NULL,\n    clientStatus INTEGER NOT NULL,\n    -- last update timestamp\n    timestamp INTEGER NOT NULL DEFAULT 0,\n\n    -- A group of recipients can have multiple sending messages.\n    UNIQUE(recipientsList, messageId)\n)", 0, null);
        ((C19506byj) interfaceC54340yek).c(null, "CREATE TABLE IF NOT EXISTS MultipartUploadState(\n    _id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n    key TEXT NOT NULL,\n    partNumber INTEGER NOT NULL,\n    partSize INTEGER NOT NULL,\n    eTag TEXT NOT NULL,\n    uploadUrl TEXT,\n\n    UNIQUE(key, partNumber)\n)", 0, null);
        ((C19506byj) interfaceC54340yek).c(null, "CREATE TABLE IF NOT EXISTS MusicRecommendationResponse(\n\n    -- the key for the music recommendation response.\n    key TEXT NOT NULL PRIMARY KEY,\n\n    -- byte array containing the metadata for the music recommendation response\n    musicRecommendationResponse BLOB NOT NULL,\n\n    -- millisecond epoch timestamp for expiring the music recommendation response\n    expirationTimestamp INTEGER NOT NULL\n)", 0, null);
        ((C19506byj) interfaceC54340yek).c(null, "CREATE TABLE IF NOT EXISTS NotificationData(\n    _id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n    userId TEXT NOT NULL UNIQUE,\n    -- optional setting in PND, null if not set\n    enableNotifications INTEGER DEFAULT 0,\n    -- optional setting in PND, null if not set\n    enableSound INTEGER DEFAULT 0,\n    -- optional setting in PND, null if not set\n    enableRinging INTEGER DEFAULT 0,\n    -- should only be PrivacyType.EVERYONE or PrivacyType.FRIENDS or null\n    -- see SendMeNotificationsType enum that performs reverse-lookup\n    notificationPrivacy INTEGER,\n    -- optional setting in PND, null if not set\n    enableBitmoji INTEGER DEFAULT 0\n)", 0, null);
        ((C19506byj) interfaceC54340yek).c(null, "CREATE TABLE IF NOT EXISTS OPSCameraPreviewState(\n    _id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n    uIState TEXT NOT NULL,\n    latestSnapSentTimestamp INTEGER NOT NULL,\n    onPlatformSnapSentCount INTEGER NOT NULL,\n    hasSeenTooltip TEXT NOT NULL,\n    shareSheetSessionStartTimestamp INTEGER NOT NULL,\n    shareSheetSessionImpressionCount INTEGER NOT NULL\n)", 0, null);
        ((C19506byj) interfaceC54340yek).c(null, "CREATE TABLE IF NOT EXISTS PendingSnap(\n    _id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n    feedRowId INTEGER NOT NULL,\n    snapId TEXT NOT NULL UNIQUE,\n    timestamp INTEGER NOT NULL,\n    updateStatus TEXT NOT NULL\n)", 0, null);
        ((C19506byj) interfaceC54340yek).c(null, "CREATE TABLE IF NOT EXISTS PendingStoryGroup(\n    _id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n    groupId TEXT NOT NULL UNIQUE,\n    groupStoryType INTEGER NOT NULL,\n    displayName TEXT NOT NULL,\n    shortDisplayName TEXT,\n    communityMetadata BLOB,\n    expirationTimestampMs INTEGER NOT NULL DEFAULT 0\n)", 0, null);
        ((C19506byj) interfaceC54340yek).c(null, "CREATE TABLE IF NOT EXISTS PostSnapAction(\n    _id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n\n    -- the id for the post snap action's attributed snap.\n    snapId TEXT NOT NULL,\n\n    -- the feed id for the post snap action's attributed snap.\n    conversationId TEXT NOT NULL,\n\n    -- byte array containing the metadata for the PostSnapAction\n    postSnapAction TEXT NOT NULL,\n\n    -- millisecond epoch timestamp for expiring the post snap action\n    expirationTimestamp INTEGER NOT NULL,\n\n    -- sessionId this post snap action was saved from.\n    contextSessionId TEXT,\n\n    -- byte array containing the metadata for the PostSnapAction associated with feed\n    currentFeedAction TEXT\n)", 0, null);
        ((C19506byj) interfaceC54340yek).c(null, "CREATE TABLE IF NOT EXISTS PostableStory (\n    _id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n    storyId TEXT NOT NULL,\n    storyRowId INTEGER, -- as DatabaseKey<Story>\n    subtext TEXT,\n    isSpectaclesStory INTEGER, -- Deprecated\n    geofence TEXT,\n    groupStoryRankType INTEGER,\n    customTitle TEXT,\n    hasActiveStory INTEGER,\n    lastActionTimestamp INTEGER,\n    mostRecentPostTimestamp INTEGER,\n    creationTimestamp INTEGER,\n    thumbnailUrl TEXT,\n    myStoryPrivacyOverride INTEGER,\n    thirdPartyAppStoryTtl INTEGER, -- Deprecated\n    thirdPartyAppStoryEnabled INTEGER, -- Deprecated\n    thirdPartyAppConnect INTEGER -- Deprecated\n)", 0, null);
        ((C19506byj) interfaceC54340yek).c(null, "CREATE TABLE IF NOT EXISTS Preferences (\n    _id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n    key TEXT NOT NULL,\n    type INTEGER NOT NULL,\n    booleanValue INTEGER,\n    intValue INTEGER,\n    longValue INTEGER,\n    floatValue REAL,\n    doubleValue REAL,\n    stringValue TEXT,\n    -- needSync, version added in version 6\n    needSync INTEGER,\n    version INTEGER,\n    UNIQUE(key, type) ON CONFLICT REPLACE\n)", 0, null);
        ((C19506byj) interfaceC54340yek).c(null, "CREATE TABLE IF NOT EXISTS PreviewAttachmentHistory (\n    _id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n    url TEXT NOT NULL UNIQUE,\n    displayedUrl TEXT NOT NULL,\n    faviconPath TEXT NOT NULL,\n    title TEXT NOT NULL\n)", 0, null);
        ((C19506byj) interfaceC54340yek).c(null, "CREATE TABLE IF NOT EXISTS ProfilePreloadConfig(\n    _id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n\n    -- The profile type being opened, this along with ownerId must be unique\n    profileType INTEGER NOT NULL,\n\n    -- This represents the id used to open the profile, it can be userId (when migration is done),\n    --  username (before migration is done), feed id (groups) or anything that we can use to identify\n    --  the unique entity that owns this config\n    ownerID TEXT NOT NULL,\n\n    -- A map of adapter view types to total count needed\n    preloadConfig TEXT NOT NULL,\n\n    -- The time when this entry expires, used to clean up old entries that may be outdated or not be needed any more\n    expirationTimestampMs INTEGER NOT NULL\n)", 0, null);
        ((C19506byj) interfaceC54340yek).c(null, "CREATE TABLE IF NOT EXISTS PublicUserStory (\n    _id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n    profileId TEXT NOT NULL UNIQUE,\n    lastAdTimestamp INTEGER NOT NULL,\n    contentConsumedAfterLastAd INTEGER NOT NULL,\n    snapTimestamps TEXT NOT NULL\n)", 0, null);
        ((C19506byj) interfaceC54340yek).c(null, "CREATE TABLE IF NOT EXISTS SearchV2RecentInteraction (\n    _id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n\n    -- the keyspace that the composite id belongs to (ie: user, group, etc)\n    compositeIdType TEXT NOT NULL,\n\n    -- the unique identifier of the composite id\n    compositeIdKey TEXT NOT NULL,\n\n    -- the timestamp at which the recent interaction was created\n    timestamp INTEGER NOT NULL,\n\n    -- a unique constraint for composite ids\n    UNIQUE(compositeIdType, compositeIdKey) ON CONFLICT REPLACE\n)", 0, null);
        ((C19506byj) interfaceC54340yek).c(null, "CREATE TABLE IF NOT EXISTS RecentlyActiveFriend(\n    _id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n    userId TEXT NOT NULL UNIQUE,\n    active INTEGER NOT NULL,\n    lastUpdatedTimestampMs INTEGER NOT NULL\n)", 0, null);
        ((C19506byj) interfaceC54340yek).c(null, "CREATE TABLE IF NOT EXISTS RetroPersistenceEvents (\n    _id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n    category INTEGER NOT NULL,\n    batchTrackUrl TEXT,\n    singleTrackUrl TEXT NOT NULL,\n    payload BLOB NOT NULL,\n    numberOfAttempts INTEGER NOT NULL DEFAULT 1,\n    expirationTimestampMillis INTEGER NOT NULL,\n    adProduct TEXT NOT NULL,\n    serveTimestamp INTEGER,\n    serveItemId TEXT\n)", 0, null);
        ((C19506byj) interfaceC54340yek).c(null, "CREATE TABLE IF NOT EXISTS Saga(\n    _id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n    flashbackId TEXT NOT NULL,\n    conversationId TEXT NOT NULL,\n\n    startEpochSecondInclusive INTEGER NOT NULL,\n    endEpochSecondExclusive INTEGER NOT NULL,\n    expireEpochSecond INTEGER NOT NULL,\n\n    seen INTEGER NOT NULL,\n    displayOrder INTEGER NOT NULL,\n\n    messages BLOB NOT NULL,\n    flashbackType BLOB NOT NULL,\n    UNIQUE(conversationId, flashbackId)\n)", 0, null);
        ((C19506byj) interfaceC54340yek).c(null, "CREATE TABLE IF NOT EXISTS SagaSyncStatus(\n    _id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n    key INTEGER UNIQUE NOT NULL DEFAULT 0,\n    localTimeZoneOffsetMinutes INTEGER NOT NULL,\n    locale TEXT NOT NULL,\n    token BLOB NOT NULL,\n    nextSyncTimeEpochSecond INTEGER NOT NULL\n)", 0, null);
        ((C19506byj) interfaceC54340yek).c(null, "CREATE TABLE IF NOT EXISTS SeenSuggestedFriend(\n    _id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n    userId TEXT NOT NULL UNIQUE\n)", 0, null);
        ((C19506byj) interfaceC54340yek).c(null, "CREATE TABLE IF NOT EXISTS SendToLastSnapRecipients(\n    _id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n    key TEXT NOT NULL, -- feed id for groups, userId for friends, storyId for stories\n    feedKind INTEGER,\n    selectionTimestamp INTEGER,\n    storyKind INTEGER\n)", 0, null);
        ((C19506byj) interfaceC54340yek).c(null, "CREATE TABLE IF NOT EXISTS SendToList (\n    _id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n    identifier TEXT NOT NULL UNIQUE,\n    name TEXT NOT NULL,\n    creationTime INTEGER NOT NULL DEFAULT 0,\n    rank INTEGER NOT NULL DEFAULT 0\n)", 0, null);
        ((C19506byj) interfaceC54340yek).c(null, "CREATE TABLE IF NOT EXISTS SendToListMember (\n    _id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n    listIdentifier TEXT NOT NULL,\n    recipientId TEXT NOT NULL,\n    recipientType INTEGER NOT NULL\n)", 0, null);
        ((C19506byj) interfaceC54340yek).c(null, "CREATE TABLE IF NOT EXISTS SendToListInteraction (\n    listIdentifier TEXT NOT NULL PRIMARY KEY,\n    lastSendTimestamp INTEGER DEFAULT 0\n)", 0, null);
        ((C19506byj) interfaceC54340yek).c(null, "CREATE TABLE IF NOT EXISTS SmartLensCta(\n    conversationId TEXT NOT NULL,\n    triggerType INTEGER NOT NULL,\n    priority INTEGER NOT NULL,\n    impressionCount INTEGER NOT NULL,\n    lastImpressionSessionId TEXT,\n    creationTimestamp INTEGER NOT NULL,\n    expirationTimestamp INTEGER NOT NULL,\n    isObsolete INTEGER NOT NULL DEFAULT 0,\n\n    PRIMARY KEY (conversationId, triggerType)\n)", 0, null);
        ((C19506byj) interfaceC54340yek).c(null, "CREATE TABLE IF NOT EXISTS Snap (\n    _id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n\n    -- for 1-1 snaps, received snap id ends with 'r', sent snap id should end with 's' --\n    -- for group snaps, received/sent snap ids are UUID --\n    snapId TEXT NOT NULL UNIQUE,\n    timestamp INTEGER NOT NULL,\n\n    mediaId TEXT,\n    mediaIv TEXT,\n    mediaKey TEXT,\n    snapType INTEGER NOT NULL,\n    mediaUrl TEXT,\n    durationInMs INTEGER NOT NULL,\n    attachmentUrl TEXT,\n    cognacAttachmentUri TEXT,\n\n    zipped INTEGER,\n\n    -- @Deprecated: this field is not stable, use StorySnap.storyRowId instead\n    -- There can be more than one linked storyRowId, as there exists a 1:N relationship between Snap and Story records\n    storyRowId INTEGER,\n    isInfiniteDuration INTEGER NOT NULL DEFAULT 0,\n    groupType TEXT,\n    contextClientInfo TEXT\n)", 0, null);
        ((C19506byj) interfaceC54340yek).c(null, "CREATE TABLE IF NOT EXISTS SnapToken(\n    _id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n    userId TEXT NOT NULL UNIQUE,\n    accessTokens TEXT NOT NULL,\n    refreshToken TEXT NOT NULL,\n    accessTokensPb BLOB\n)", 0, null);
        ((C19506byj) interfaceC54340yek).c(null, "CREATE TABLE IF NOT EXISTS SnapshotSnaps(\n    _id INTEGER NOT NULL PRIMARY KEY,\n\n    -- A user id associated with the snapshot\n    ownerId TEXT NOT NULL,\n\n    -- The source of this snapshot (friend sync, friend suggestion sync, etc)\n    sourceId INTEGER NOT NULL,\n\n    -- The actual snapshot snaps blob (proto)\n    snapshotSnaps BLOB NOT NULL\n)", 0, null);
        ((C19506byj) interfaceC54340yek).c(null, "CREATE TABLE IF NOT EXISTS StoryNote (\n    _id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n    snapId TEXT NOT NULL,\n    storySnapRowId INTEGER NOT NULL, --- DEPRECATED\n    timestamp INTEGER,\n    viewer TEXT NOT NULL, -- DEPRECATED\n    isFriendViewPublic INTEGER, --- DEPRECATED\n    isScreenShotted INTEGER NOT NULL,\n    noteType INTEGER,\n    isSaved INTEGER DEFAULT 0 NOT NULL,\n    -- Note: We use empty strings to denote absent field as we migrate from using the \"viewer\"\n    -- field (username) as a key to using \"viewerUserId\" as the key. \"viewer\" field will eventually\n    -- be removed once fully migrated to viewerUserId\n    viewerUserId TEXT NOT NULL DEFAULT(''),\n    viewerUsername TEXT -- DEPRECATED\n)", 0, null);
        ((C19506byj) interfaceC54340yek).c(null, "CREATE TABLE IF NOT EXISTS StoryReferences (\n    _id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n\n    storyRowId INTEGER NOT NULL REFERENCES Story(_id) ON DELETE CASCADE,\n    friendRowId INTEGER REFERENCES Friend(_id) ON DELETE CASCADE,\n    mobStoryMetadataRowId INTEGER REFERENCES MobStoryMetadata(_id) ON DELETE CASCADE,\n\n    UNIQUE(storyRowId, friendRowId),\n    UNIQUE(storyRowId, mobStoryMetadataRowId)\n)", 0, null);
        ((C19506byj) interfaceC54340yek).c(null, "CREATE TABLE IF NOT EXISTS Story (\n    _id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n    storyId TEXT NOT NULL,\n    userName TEXT, -- Deprecated. Use userId column instead.\n    displayName TEXT,\n    isLocal INTEGER,\n    profileDescription TEXT,\n    sharedId TEXT,\n    latestTimeStamp INTEGER, -- DEPRECATED. Use field in StoryViewActiveSnap.\n    latestExpirationTimestamp INTEGER, -- DEPRECATED. Use field in StoryViewActiveSnap.\n    viewed INTEGER, -- DEPRECATED. Use field in StoryViewActiveSnap.\n    kind INTEGER NOT NULL,\n    groupStoryType INTEGER,\n    isPostable INTEGER,\n    rankingId INTEGER, -- Ranking number returned from server for priority of this story. Lower is higher priority.\n    lastSyncRequestId TEXT, -- requestId of the last friend stories sync which updates this story (including ranking order updates).\n\n    -- story's sequence numbers used in delta fetch.\n    -- See https://docs.google.com/document/d/1uqIHEo8HX7UbOQtrMWHJIO9XcbPnKJznIctlNL1d0aA\n    minSequence INTEGER, -- the story's min sequence number on the server\n    maxSequence INTEGER, -- the story's max sequence number on the server\n    lastSyncMaxSequence INTEGER, -- the story's max sequence number (inclusive) synced to client,\n    userId TEXT, -- is friend's userId for StoryKind.FRIEND stories and is NULL for other story kinds\n    adOrganicSignals BLOB, -- realtime organic engagement signals used for ad requesting\n    hpoData TEXT, -- hpoData of the last friend stories sync which updates this story (including ranking order updates).\n    isFriendOfFriend INTEGER, -- if content is populated from friend of friends\n\n    UNIQUE(storyId, kind)\n)", 0, null);
        ((C19506byj) interfaceC54340yek).c(null, "CREATE TABLE IF NOT EXISTS StorySnap (\n    _id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n    snapRowId INTEGER NOT NULL,\n    username TEXT,\n    clientId TEXT NOT NULL,\n    storyRowId INTEGER NOT NULL,\n\n    captionTextDisplay TEXT,\n    filterId TEXT,\n    thumbnailUrl TEXT,\n    largeThumbnailUrl TEXT,\n    viewed INTEGER, -- true if the snap has been viewed\n    isPublic INTEGER,\n    mediaD2sUrl TEXT,\n    needAuth INTEGER NOT NULL,\n    storyFilterId TEXT,\n    thumbnailIv TEXT,\n    canonicalDisplayTime INTEGER,\n    expirationTimestamp INTEGER,\n    venueId TEXT,\n    flushableId TEXT, -- used to report read, screenshot, save states to servers\n    -- DEPRECATED(In mixer we join from username to get the displayName of the user)\n    -- Mixer will not populate this field and rely on the Friend table displayName for the info.\n    displayName TEXT, -- used for showing the display name of the snap's attributed user.\n    snapAttachmentUrl TEXT, -- used for URL attachments\n    contextHint TEXT, -- used for Context Cards\n    animatedSnapType TEXT, -- whether the snap contained animations, for analytics\n    lensMetadata TEXT, -- metadata for lenses analytics\n    filterLensId TEXT, -- metadata for lenses analytics\n    lensRankingId TEXT DEFAULT NULL, -- metadata for lenses analytics\n    unlockablesSnapInfo TEXT, -- metadata for unlockables analytics\n    encryptedGeoLoggingData TEXT, -- encrypted metadata about geo logging, for analytics\n    ruleFileParams TEXT, -- serialized map for controlling media quality for direct-to-storage downloads\n    brandFriendliness INTEGER, -- Brand friendliness from server story snap\n    clientStatus INTEGER,\n\n    friendScreenCaptureRecordingCount INTEGER,\n    friendScreenCaptureShotCount INTEGER,\n    friendScreenshotCount INTEGER,\n    friendSnapSaveCount INTEGER,\n    friendViewCount INTEGER,\n    otherScreenCaptureRecordingCount INTEGER,\n    otherScreenCaptureShotCount INTEGER,\n    otherScreenshotCount INTEGER,\n    otherSnapSaveCount INTEGER,\n    otherViewCount INTEGER,\n\n    pendingServerConfirmation INTEGER, -- whether posts are waiting to be confirmed by StoriesResponse\n    postedTimestamp INTEGER, -- used for posting timeout logic for detecting async posting failures\n\n    creationTimestamp INTEGER, -- used to display original creation time when posting from memories / camera roll\n    snapSource INTEGER, -- used to determine source when posting from memories / camera roll\n\n    creativeKitSourceAppName TEXT, -- used to display source app name when posting from Snap Kit Creative Kit\n    creativeKitSourceAppOAuthClientId TEXT, -- used to identify source app when posting from Snap Kit Creative Kit\n\n    serverRankingId TEXT, -- used for story story view blizzard event\n    -- story snap's sequence number used in delta fetch.\n    -- See https://docs.google.com/document/d/1uqIHEo8HX7UbOQtrMWHJIO9XcbPnKJznIctlNL1d0aA\n    sequence INTEGER,\n    -- ID used for fetching view count information for Our Story snaps\n    ourStoriesSnapId TEXT,\n\n    -- serialized SnapDocPersistenceWrapper client proto for fetching story snap media content via Bolt\n    boltInfo BLOB DEFAULT NULL,\n\n    -- userId of the poster. Custom stories have multiple posters so\n    -- we need to use poster's userId in StorySnap instead of Story.\n    userId TEXT,\n\n    -- Bolt CO thumbnail fields.\n    thumbnailContentObject BLOB DEFAULT NULL,\n    thumbnailCoKey TEXT,\n    thumbnailCoIv TEXT,\n\n    -- Spotlight counts\n    boostCount INTEGER,\n    shareCount INTEGER,\n\n   -- MultiSnap metadata\n   multiSnapBundleId TEXT,\n   multiSnapSegmentCount INTEGER,\n   multiSnapSegmentId INTEGER,\n\n   -- Set if snap was posted to Spotlight and/or Our Story\n   -- [ourStoryDestination] is deprecated, please use [ourStoryDestinations]\n   -- https://jira.sc-corp.net/browse/STORIES-23298\n   ourStoryDestination INTEGER, -- deprecated\n   ourStoryDestinations BLOB,\n\n   -- Set if snap was posted to Spotlight\n   spotlightSnapStatus INTEGER,\n\n   isTimeline INTEGER,\n\n    -- Used for arroyo story posting to identify snaps when retrying failed story snap sending.\n    taskQueueId TEXT,\n\n    -- Optionally added to story snap at posting time.\n    description TEXT DEFAULT NULL,\n\n    -- Spotlight subscription count\n    subscribeCount INTEGER,\n\n    -- Cameos specific params\n    bloopsGenders TEXT DEFAULT NULL,\n\n    -- Information about the sponsor of the story\n    sponsorProfileId TEXT DEFAULT NULL,\n    sponsorDisplayName TEXT DEFAULT NULL,\n\n    -- Spotlight replies counts\n    liveRepliesCount INTEGER,\n    pendingRepliesCount INTEGER,\n    newPendingRepliesCount INTEGER,\n\n    -- Rewatch counts\n    rewatchCount INTEGER,\n\n    -- If this Snap (My Story only) has been reposted to Spotlight an id will be stored here\n    spotlightRepostId TEXT DEFAULT NULL,\n\n    -- Set if snap was rejected on Spotlight\n    spotlightRejectionReason INTEGER,\n\n    -- How many times this snap has been remixed\n    remixCount INTEGER,\n\n    -- Status of the sponsor tagging\n    -- It should use values of https://github.sc-corp.net/Snapchat/pb_schema/blob/5171d124e77f5e4d2c572147ec5a5d558e68bd44/proto/snapdoc/sponsor.proto#L31\n    sponsorStatus INTEGER DEFAULT 0,\n\n    -- Moderation data for the snap, stored as a ByteArray (encoded ContentModerationStatus proto)\n    encodedContentModerationStatus BLOB DEFAULT NULL,\n\n    -- (storyRowId, clientId) should be unique and consistent across local and server synced snaps\n    UNIQUE(storyRowId, clientId),\n\n    -- should have unique snapRowId for each story\n    UNIQUE(storyRowId, snapRowId)\n)", 0, null);
        ((C19506byj) interfaceC54340yek).c(null, "CREATE TABLE IF NOT EXISTS StorySyncState (\n    _id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n    checksum TEXT,\n    metadata TEXT\n)", 0, null);
        ((C19506byj) interfaceC54340yek).c(null, "CREATE TABLE IF NOT EXISTS SuggestedFriendDeltaForce(\n    _id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n    friendRowId INTEGER NOT NULL UNIQUE,\n    userId TEXT NOT NULL UNIQUE,\n\n    suggestionReason TEXT,\n\n    deltaForceKey INTEGER DEFAULT 0 NOT NULL\n)", 0, null);
        ((C19506byj) interfaceC54340yek).c(null, "CREATE TABLE IF NOT EXISTS SuggestedFriendPlacementDeltaForce(\n    _id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n    suggestionPlacement INTEGER,\n    friendRowId INTEGER NOT NULL,\n    rank INTEGER\n)", 0, null);
        ((C19506byj) interfaceC54340yek).c(null, "CREATE TABLE IF NOT EXISTS SuggestedFriendPlacement(\n    _id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n    suggestionPlacement INTEGER,\n    friendRowId INTEGER NOT NULL,\n    rank INTEGER\n)", 0, null);
        ((C19506byj) interfaceC54340yek).c(null, "CREATE TABLE IF NOT EXISTS SuggestedFriend(\n    _id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n    friendRowId INTEGER NOT NULL UNIQUE,\n    userId TEXT NOT NULL UNIQUE,\n\n    suggestionReason TEXT,\n    suggestionToken TEXT,\n\n    added INTEGER DEFAULT 0 NOT NULL,\n    hidden INTEGER DEFAULT 0 NOT NULL,\n    seen INTEGER DEFAULT 0 NOT NULL,\n\n    deltaForceKey INTEGER DEFAULT 0 NOT NULL,\n    hiddenTimestamp INTEGER NOT NULL DEFAULT 0,\n\n    score REAL,\n    rankingProfileId TEXT,\n    suggestionReasonForToken INTEGER\n)", 0, null);
        ((C19506byj) interfaceC54340yek).c(null, "CREATE TABLE IF NOT EXISTS TopSuggestedFriend(\n    _id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n    userId TEXT NOT NULL UNIQUE,\n    suggestionPlacement INTEGER,\n    priority INTEGER NOT NULL\n)", 0, null);
        ((C19506byj) interfaceC54340yek).c(null, "CREATE TABLE IF NOT EXISTS TopSuggestedFriendV2 (\n    -- IDs\n    _id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n    friendId INTEGER NOT NULL UNIQUE,\n    userId TEXT NOT NULL,\n\n    -- Suggestion-related info\n    -- Corresponding display info (bitmoji, etc.) is stored on Friend table\n    suggestionReason TEXT,\n    suggestionToken TEXT,\n    suggestionPlacement INTEGER NOT NULL,\n    seen INTEGER DEFAULT 0 NOT NULL,\n    hidden INTEGER DEFAULT 0 NOT NULL,\n\n    -- Pinned suggestion related info\n    isIMC INTEGER DEFAULT 0 NOT NULL, -- Suggestion is In My Contacts (or not)\n    suggestionArrivalTimestamp INTEGER, -- Arrival time of notification containing suggestion\n    impressionCount INTEGER DEFAULT 0   -- Num of times that suggestion was seen by user\n)", 0, null);
        ((C19506byj) interfaceC54340yek).c(null, "CREATE TABLE IF NOT EXISTS UploadAssetResult(\n    _id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n\n    requestId TEXT NOT NULL,\n    mediaContextType TEXT NOT NULL,\n    assetType TEXT NOT NULL,\n    mediaType TEXT NOT NULL,\n    uploadUrl TEXT NOT NULL,\n    boltLocation BLOB,\n    uploadUrlType INTEGER NOT NULL,\n    expiryInSeconds INTEGER NOT NULL,\n    assetSize INTEGER NOT NULL,\n    encryptionKey TEXT,\n    encryptionIv TEXT,\n    assetId TEXT NOT NULL,\n    reachability TEXT\n)", 0, null);
        ((C19506byj) interfaceC54340yek).c(null, "CREATE TABLE IF NOT EXISTS UploadLocation(\n    _id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n\n    uploadUrl TEXT NOT NULL UNIQUE,\n    expiryInSeconds INTEGER NOT NULL,\n    type TEXT NOT NULL ,\n    boltLocation BLOB,\n    cacheKey BLOB\n)", 0, null);
        ((C19506byj) interfaceC54340yek).c(null, "CREATE TABLE IF NOT EXISTS UploadRequestQueue(\n    _id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n    requestId TEXT NOT NULL UNIQUE,\n    request TEXT NOT NULL UNIQUE,\n    result TEXT,\n    resultEnum TEXT,\n    expirationTimestamp INTEGER\n)", 0, null);
        ((C19506byj) interfaceC54340yek).c(null, "CREATE TABLE IF NOT EXISTS UploadState(\n    _id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n    key TEXT NOT NULL UNIQUE,\n    uploadUrl TEXT NOT NULL,\n    expiryInSeconds INTEGER NOT NULL,\n    type TEXT NOT NULL,\n    boltLocation BLOB,\n    encyptionKey TEXT,\n    encryptionIv TEXT,\n    resumableSessionUrl TEXT,\n    multipartMinChunkSizeBytes INTEGER NOT NULL,\n    uploadLocationConfig TEXT\n)", 0, null);
        ((C19506byj) interfaceC54340yek).c(null, "CREATE VIEW IF NOT EXISTS FriendWithUsername\nAS SELECT\n    Friend._id,\n    Friend._lastModifiedTimestamp,\n     -- Regarding nullability: CombinedUsername.encodedUsername is nullable to allow inserts to\n     -- work (an insert trigger adds encodedUsername, but SQLite does not allow it to be null in\n     -- the interim if it has the NOT NULL constraint). However, encodedUsername will never be null\n     -- in practice. There is a WHERE CombinedUsername.encodedUsername IS NOT NULL clause added to\n     -- this query just to eliminate even that outside chance.\n     -- When this was written, we were using SqlDelight 1.4, which does not infer from the IS NOT\n     -- NULL clause that username cannot be null, and emits the username model as nullable. It is\n     -- safe to cast these to non-nullable references using !!. SqlDelight 1.5 adds additional\n     -- non-nullable inferencing and fixes this particular case.\n    CombinedUsername.encodedUsername AS username,\n    Friend.userId,\n    Friend.displayName,\n    Friend.bitmojiAvatarId,\n    Friend.bitmojiSelfieId,\n    Friend.bitmojiSceneId,\n    Friend.bitmojiBackgroundId,\n    Friend.friendmojis,\n    Friend.friendmojiCategories,\n    Friend.phone,\n    Friend.score,\n    Friend.birthday,\n    Friend.sentToMe,\n    Friend.receivedFromMe,\n    Friend.addedTimestamp,\n    Friend.reverseAddedTimestamp,\n    Friend.lastMessageId,\n    Friend.unreadCount,\n    Friend.friendmojiString,\n    Friend.serverDisplayName,\n    Friend.streakLength,\n    Friend.streakExpiration,\n    Friend.friendLinkType,\n    Friend.storyMuted,\n    Friend.isPopular,\n    Friend.isOfficial,\n    Friend.isFideliusReady,\n    Friend.snapProId,\n    Friend.fideliusKeys,\n    Friend.isBrand,\n    Friend.businessCategory,\n    Friend.syncSource,\n    Friend.isCameosSharingSupported,\n    Friend.isBitmojiFriendmojiSharingSupported,\n    Friend.cameosSharingPolicy,\n    Friend.reverseBestFriendRanking,\n    Friend.isPinnedBestFriend,\n    Friend.plusBadgeVisibility,\n    Friend.postViewEmoji,\n    Friend.bitmojiBackgroundUrl,\n    Friend.bitmojiBackgroundUrlType,\n    Friend.dreamsGenerationPolicy,\n    Friend.bitmojiAvatarMetadata,\n    COALESCE(CombinedUsername.mutableUsername, CombinedUsername.originalUsername) AS usernameForSorting\nFROM Friend\nINNER JOIN CombinedUsername ON Friend.combinedUsernameRowId=CombinedUsername._id\nWHERE CombinedUsername.encodedUsername IS NOT NULL", 0, null);
        ((C19506byj) interfaceC54340yek).c(null, "CREATE VIEW IF NOT EXISTS StoryViewActiveSnaps AS\nSELECT\n    Story._id,\n    Story.storyId,\n    Story.userId AS friendStoryPosterUserId,\n    Story.displayName,\n    Story.kind,\n    Story.groupStoryType,\n    Story.rankingId,\n    Story.lastSyncRequestId,\n    Story.hpoData,\n    Story.isFriendOfFriend,\n    StorySnaps.isViewed AS viewed,\n    StorySnaps.latestSnapTimestamp AS latestTimeStamp,\n    StorySnaps.latestSnapExpirationTimestamp AS latestExpirationTimestamp,\n    StorySnaps.totalMediaDurationMs\nFROM Story\nLEFT OUTER JOIN (\n    SELECT\n        StorySnap.storyRowId,\n        MAX(Snap.timestamp) AS latestSnapTimestamp,\n        MAX(StorySnap.expirationTimestamp) AS latestSnapExpirationTimestamp,\n        MIN(StorySnap.viewed) = 1 AS isViewed,\n        SUM(Snap.durationInMs) AS totalMediaDurationMs\n    FROM StorySnap\n    JOIN Snap ON StorySnap.snapRowId = Snap._id\n    GROUP BY StorySnap.storyRowId\n) AS StorySnaps ON Story._id = StorySnaps.storyRowId\nWHERE Story._id IN (SELECT DISTINCT StorySnap.storyRowId FROM StorySnap)", 0, null);
        ((C19506byj) interfaceC54340yek).c(null, "CREATE VIEW IF NOT EXISTS StoryViewPlayableFriendStoriesMapping AS\nSELECT\n    -- For Friend Stories, there is no linked MobStoryMetadata and Story.storyId resolves to username\n    Story.storyId AS storyId,\n    Story.userId AS userId,\n    Story._id AS storyRowId\nFROM Story\nLEFT OUTER JOIN MobStoryMetadata ON Story._id = MobStoryMetadata.storyRowId\nWHERE (\n    -- Include Friend Stories\n    Story.kind = 0 OR\n    -- Include Private Stories\n    (Story.kind = 1 AND MobStoryMetadata.groupStoryType = 1)\n)", 0, null);
        ((C19506byj) interfaceC54340yek).c(null, "CREATE VIEW IF NOT EXISTS StoryViewFriendStoriesActiveSnaps AS\nSELECT\n    FriendStories.storyId AS storyId,\n    FriendStories.userId AS userId,\n    FriendStories.isViewed AS isViewed,\n    FriendStories.numPrivateStories AS numPrivateStories,\n    FriendStories.latestSnapTimestamp AS latestSnapTimestamp,\n    FriendStories.latestSnapExpirationTimestamp AS latestSnapExpirationTimestamp,\n    COALESCE(FirstUnviewedSnap.snapId, '') AS firstUnviewedSnapId\nFROM (\n    SELECT\n        StoryViewPlayableFriendStoriesMapping.storyId AS storyId,\n        StoryViewPlayableFriendStoriesMapping.userId AS userId,\n        SUM(CASE WHEN Story.groupStoryType = 1 THEN 1 ELSE 0 END) AS numPrivateStories,\n        MAX(Snap.timestamp) AS latestSnapTimestamp,\n        MAX(StorySnap.expirationTimestamp) AS latestSnapExpirationTimestamp,\n        MIN(CAST(StorySnap.viewed AS INTEGER)) AS isViewed\n    FROM StorySnap\n    JOIN Snap ON StorySnap.snapRowId = Snap._id\n    JOIN Story ON StorySnap.storyRowId = Story._id\n    JOIN StoryViewPlayableFriendStoriesMapping ON StorySnap.storyRowId = StoryViewPlayableFriendStoriesMapping.storyRowId\n    GROUP BY StoryViewPlayableFriendStoriesMapping.userId\n) AS FriendStories\nLEFT OUTER JOIN (\n    SELECT * FROM (\n        SELECT StoryViewPlayableFriendStoriesMapping.storyId AS storyId,\n        StoryViewPlayableFriendStoriesMapping.userId AS userId,\n        Snap.snapId\n        FROM StorySnap\n        JOIN Snap ON StorySnap.snapRowId = Snap._id\n        JOIN StoryViewPlayableFriendStoriesMapping ON StorySnap.storyRowId = StoryViewPlayableFriendStoriesMapping.storyRowId\n        WHERE StorySnap.viewed = 0\n        ORDER BY Snap.timestamp DESC\n    ) GROUP BY userId\n) AS FirstUnviewedSnap ON (FriendStories.isViewed = 0 AND FirstUnviewedSnap.userId = FriendStories.userId)", 0, null);
        ((C19506byj) interfaceC54340yek).c(null, "CREATE VIEW IF NOT EXISTS DiscoverFeedFriendStoriesViewV2\nAS SELECT\n    Story._id,\n    Story.storyId AS storyId,\n    FirstUnviewedSnap.snapId AS firstUnviewedSnapId,\n    Friend.userId AS friendUserId,\n    Friend.displayName AS friendDisplayName,\n    Friend.friendLinkType AS friendLinkType,\n    Friend.username AS friendUsername,\n    Friend.isOfficial AS friendIsOfficialUser,\n    Story.friendStoryPosterUserId AS friendStoryPosterUserId,\n    Story.displayName AS storyDisplayName,\n    Feed.specifiedName AS feedSpecifiedName,\n    Feed.participantString AS feedParticipantString,\n    Feed._id AS feedId,\n    Friend.bitmojiAvatarId,\n    Friend.bitmojiSelfieId,\n    COALESCE(Friend.storyMuted, 0) AS storyMuted,\n    Story.groupStoryType,\n    Story.viewed AS storyViewed,\n    latestTimeStamp AS storyLatestTimestamp,\n    latestExpirationTimestamp AS storyLatestExpirationTimestamp,\n    rankingId AS storyRankingId,\n    Story.lastSyncRequestId AS lastSyncRequestId,\n    Story.hpoData AS hpoData,\n    Story.isFriendOfFriend AS isFriendOfFriend,\n    Story.totalMediaDurationMs\nFROM\nStoryViewActiveSnaps AS Story\nLEFT OUTER JOIN MobStoryMetadata ON (Story.kind = 1 AND MobStoryMetadata.storyRowId = Story._id)\nLEFT OUTER JOIN FriendWithUsername AS Friend ON Friend.userId = Story.friendStoryPosterUserId\nLEFT OUTER JOIN Feed ON Feed.friendRowId = Friend._id\nLEFT OUTER JOIN (\n    SELECT\n    StorySnap.storyRowId,\n    Snap.snapId,\n    min(Snap.timestamp)\n    FROM StorySnap\n    LEFT OUTER JOIN Snap ON Snap._id = StorySnap.snapRowId\n    WHERE StorySnap.viewed = 0\n    GROUP BY StorySnap.storyRowId\n) AS FirstUnviewedSnap ON Story._id = FirstUnviewedSnap.storyRowId\nWHERE (\n        Story.kind = 0 -- StoryKind.FRIEND\n        AND (\n            -- StoryKind.FRIEND could include OUTGOING|FOLLOWING friends. Only show MUTUAL friends.\n            -- If Friend table is not yet populated, use rankingId as a signal for mutual friends.\n            friendLinkType = 0 OR (friendLinkType IS NULL AND rankingId NOT NULL)\n        )\n    ) OR (\n        Story.kind = 1 -- StoryKind.GROUP\n        -- CUSTOM(0) / PRIVATE(1) / SHARED(4) / COMMUNITIES(6) Group Stories only\n        AND MobStoryMetadata.groupStoryType IN (0, 1, 4, 6)\n        AND COALESCE(MobStoryMetadata.customStorySubtype, -1) != 1 -- filter out snap reply custom stories\n    ) OR (\n        Story.kind = 6 -- StoryKind.BUSINESS\n    )", 0, null);
        ((C19506byj) interfaceC54340yek).c(null, "CREATE VIEW IF NOT EXISTS FriendsFeedView\nAS SELECT\n    Feed._id,\n    coalesce(Feed.specifiedName, Feed.fitScreenParticipantString, Feed.participantString) AS feedDisplayName,\n    participantsSize,\n    Feed.lastInteractionTimestamp,\n    Feed.displayTimestamp,\n    Feed.displayInteractionType,\n    Feed.lastInteractionUserId,\n    Feed.clearedTimestamp,\n    Feed.pinnedTimestamp,\n    Feed.isLocked,\n    Feed.isStreakRestorable,\n    Feed.expiredStreakCount,\n    Feed.kind,\n    Feed.key,\n    Feed.notificationPreferences,\n    Friend._id AS friendRowId,\n    Friend.userId AS friendUserId,\n    Friend.friendmojiCategories,\n    Friend.displayName AS friendDisplayName,\n    Friend.username AS friendDisplayUsername,\n    Friend.friendmojiString,\n    Friend.streakLength,\n    Friend.streakExpiration,\n    Friend.bitmojiAvatarId,\n    Friend.bitmojiSelfieId,\n    Friend.bitmojiBackgroundId,\n    Friend.bitmojiBackgroundUrl,\n    Friend.birthday,\n    Friend.addedTimestamp,\n    Friend.reverseAddedTimestamp,\n    Friend.isOfficial,\n    Friend.isBrand,\n    Friend.businessCategory,\n    Friend.friendLinkType,\n    Friend.snapProId,\n    FriendStory.storyId AS friendStoryId,\n    FriendStory.numPrivateStories AS numPrivateStories,\n    FriendStory.isViewed AS friendStoryIsViewed,\n    FriendStory.latestSnapTimestamp AS friendStoryLatestTimestamp,\n    FriendStory.latestSnapExpirationTimestamp AS friendStoryLatestExpirationTimestamp,\n    FriendStory.firstUnviewedSnapId AS friendStoryFirstUnviewedSnapId,\n    Friend.storyMuted AS friendStoryMuted,\n    lastInteractionUser.userId AS displayInteractionUserId,\n    lastInteractionUser.displayName AS displayInteractionUserDisplayName,\n    lastInteractionUser.username AS displayInteractionUserUsername,\n    lastWriterUser.userId AS lastWriterUserId,\n    Feed.lastMutatorUserId AS mutatorUserId,\n    FriendsFeedScore.score AS score,\n    FeedPostSnapAction.currentFeedAction AS currentFeedAction,\n    FeedPostSnapAction.expirationTimestamp AS postSnapActionExpirationTimestamp,\n    FeedPostSnapAction.contextSessionId AS postSnapActionContextSessionId,\n    FeedPostSnapAction.snapId AS postSnapActionLastViewedSnapId,\n    MobStoryMetadata.privateStoryMetadata\nFROM\nFeed\nLEFT OUTER JOIN FriendWithUsername AS Friend ON Feed.friendRowId = Friend._id\nLEFT OUTER JOIN FriendWithUsername AS lastInteractionUser ON Feed.lastInteractionUserId = lastInteractionUser._id\nLEFT OUTER JOIN FriendWithUsername AS lastWriterUser ON Feed.lastInteractionWriterId = lastWriterUser._id\nLEFT OUTER JOIN StoryViewFriendStoriesActiveSnaps AS FriendStory ON (Feed.kind = 0 AND Friend.userId = FriendStory.userId)\nLEFT OUTER JOIN FriendsFeedScore ON Feed._id = FriendsFeedScore.feedRowId\nLEFT OUTER JOIN (SELECT conversationId, currentFeedAction, max(expirationTimestamp) AS expirationTimestamp, contextSessionId, snapId FROM PostSnapAction GROUP BY conversationId) AS FeedPostSnapAction\nON (\n    Feed.key = FeedPostSnapAction.conversationId\n)\nLEFT OUTER JOIN StoryViewPlayableFriendStoriesMapping AS FriendStory2 ON FriendStory2.userId = Friend.userId AND FriendStory.storyId = FriendStory2.storyId\nLEFT OUTER JOIN MobStoryMetadata ON FriendStory2.storyRowId = MobStoryMetadata.storyRowId\nWHERE (Feed.lastInteractionTimestamp IS NOT NULL AND\n Feed.clearedTimestamp <= Feed.sortingTimestamp)", 0, null);
        ((C19506byj) interfaceC54340yek).c(null, "CREATE VIEW IF NOT EXISTS FriendsFeedViewV2\nAS SELECT\n    Feed._id,\n    coalesce(Feed.specifiedName, Feed.fitScreenParticipantString, Feed.participantString) AS feedDisplayName,\n    participantsSize,\n    Feed.lastInteractionTimestamp,\n    Feed.displayTimestamp,\n    Feed.displayInteractionType,\n    Feed.lastInteractionUserId,\n    Feed.clearedTimestamp,\n    Feed.pinnedTimestamp,\n    Feed.isLocked,\n    Feed.isStreakRestorable,\n    Feed.expiredStreakCount,\n    Feed.kind,\n    Feed.key,\n    Feed.notificationPreferences,\n    Friend._id AS friendRowId,\n    Friend.userId AS friendUserId,\n    Friend.friendmojiCategories,\n    Friend.displayName AS friendDisplayName,\n    Friend.username AS friendDisplayUsername,\n    Friend.friendmojiString,\n    Friend.streakLength,\n    Friend.streakExpiration,\n    Friend.bitmojiAvatarId,\n    Friend.bitmojiSelfieId,\n    Friend.bitmojiBackgroundId,\n    Friend.bitmojiBackgroundUrl,\n    Friend.birthday,\n    Friend.addedTimestamp,\n    Friend.reverseAddedTimestamp,\n    Friend.isOfficial,\n    Friend.isBrand,\n    Friend.businessCategory,\n    Friend.friendLinkType,\n    Friend.snapProId,\n    Friend.storyMuted AS friendStoryMuted,\n    lastInteractionUser.userId AS displayInteractionUserId,\n    lastInteractionUser.displayName AS displayInteractionUserDisplayName,\n    lastInteractionUser.username AS displayInteractionUserUsername,\n    lastWriterUser.userId AS lastWriterUserId,\n    Feed.lastMutatorUserId AS mutatorUserId,\n    FriendsFeedScore.score AS score,\n    FeedPostSnapAction.currentFeedAction AS currentFeedAction,\n    FeedPostSnapAction.expirationTimestamp AS postSnapActionExpirationTimestamp,\n    FeedPostSnapAction.contextSessionId AS postSnapActionContextSessionId,\n    FeedPostSnapAction.snapId AS postSnapActionLastViewedSnapId,\n    MobStoryMetadata.privateStoryMetadata\nFROM\nFeed\nINNER JOIN FriendsFeedScore ON Feed._id = FriendsFeedScore.feedRowId\nLEFT OUTER JOIN Friend AS Friend ON Feed.friendRowId = Friend._id\nLEFT OUTER JOIN CombinedUsername AS friendCombined ON Friend.combinedUsernameRowId = friendCombined._id\nLEFT OUTER JOIN Friend AS lastInteractionUser ON Feed.lastInteractionUserId = lastInteractionUser._id\nLEFT OUTER JOIN CombinedUsername AS lastInteractionUserCombined ON lastInteractionUser.combinedUsernameRowId = lastInteractionUserCombined._id\nLEFT OUTER JOIN Friend AS lastWriterUser ON Feed.lastInteractionWriterId = lastWriterUser._id\nLEFT OUTER JOIN (SELECT conversationId, currentFeedAction, max(expirationTimestamp) AS expirationTimestamp, contextSessionId, snapId FROM PostSnapAction GROUP BY conversationId) AS FeedPostSnapAction\nON (\n    Feed.key = FeedPostSnapAction.conversationId\n)\nLEFT OUTER JOIN StoryViewFriendStoriesActiveSnaps AS FriendStory ON (Feed.kind = 0 AND Friend.userId = FriendStory.userId)\nLEFT OUTER JOIN StoryViewPlayableFriendStoriesMapping AS FriendStory2 ON FriendStory2.userId = Friend.userId AND FriendStory.storyId = FriendStory2.storyId\nLEFT OUTER JOIN MobStoryMetadata ON FriendStory2.storyRowId = MobStoryMetadata.storyRowId\nWHERE (Feed.lastInteractionTimestamp IS NOT NULL AND Feed.clearedTimestamp <= Feed.sortingTimestamp)", 0, null);
        ((C19506byj) interfaceC54340yek).c(null, "CREATE INDEX IF NOT EXISTS billboardStrings_key_locale ON BillboardStrings(stringKey, locale)", 0, null);
        ((C19506byj) interfaceC54340yek).c(null, "CREATE UNIQUE INDEX IF NOT EXISTS charms_unique_index_owner_id_charm_id_is_template ON Charms(ownerId, charmId, isTemplate)", 0, null);
        ((C19506byj) interfaceC54340yek).c(null, "CREATE INDEX IF NOT EXISTS combinedUsername_idx_usernameSearch ON CombinedUsername(mutableUsername)", 0, null);
        ((C19506byj) interfaceC54340yek).c(null, "CREATE TRIGGER IF NOT EXISTS CombinedUsernameUpdateTrigger\nAFTER UPDATE OF originalUsername, mutableUsername ON CombinedUsername\nFOR EACH ROW\nBEGIN\n    UPDATE CombinedUsername SET encodedUsername=new.originalUsername || '|' || COALESCE(new.mutableUsername,'')\n        WHERE _id = new._id;\nEND", 0, null);
        ((C19506byj) interfaceC54340yek).c(null, "CREATE TRIGGER IF NOT EXISTS CombinedUsernameInsertTrigger\nAFTER INSERT ON CombinedUsername\nFOR EACH ROW\nBEGIN\n    UPDATE CombinedUsername SET encodedUsername=new.originalUsername || '|' || COALESCE(new.mutableUsername,'')\n        WHERE _id = new._id;\nEND", 0, null);
        ((C19506byj) interfaceC54340yek).c(null, "CREATE UNIQUE INDEX IF NOT EXISTS connected_app_scopes_app_id_plus_name ON ConnectedAppScopes(appId, name)", 0, null);
        ((C19506byj) interfaceC54340yek).c(null, "CREATE INDEX IF NOT EXISTS contact_idx_rankScore ON Contact(rankScore)", 0, null);
        ((C19506byj) interfaceC54340yek).c(null, "CREATE INDEX IF NOT EXISTS feed_timestamp ON Feed(lastInteractionTimestamp DESC)", 0, null);
        ((C19506byj) interfaceC54340yek).c(null, "CREATE INDEX IF NOT EXISTS feed_friendRowId ON Feed(friendRowId)", 0, null);
        ((C19506byj) interfaceC54340yek).c(null, "CREATE INDEX IF NOT EXISTS feed_conversationId ON Feed(key)", 0, null);
        ((C19506byj) interfaceC54340yek).c(null, "CREATE INDEX IF NOT EXISTS friend_link_type ON Friend(friendLinkType)", 0, null);
        ((C19506byj) interfaceC54340yek).c(null, "CREATE INDEX IF NOT EXISTS friendsFeedScore_score ON FriendsFeedScore(score, feedRowId)", 0, null);
        ((C19506byj) interfaceC54340yek).c(null, "CREATE INDEX IF NOT EXISTS inAppWarning_warningId ON InAppWarning(warningId)", 0, null);
        ((C19506byj) interfaceC54340yek).c(null, "CREATE INDEX IF NOT EXISTS inAppWarning_acknowledgedAtTs ON InAppWarning(acknowledgedAtTs)", 0, null);
        ((C19506byj) interfaceC54340yek).c(null, "CREATE INDEX IF NOT EXISTS message_media_ref_idx_messageId ON MessageMediaRef(messageId)", 0, null);
        ((C19506byj) interfaceC54340yek).c(null, "CREATE UNIQUE INDEX IF NOT EXISTS mob_story_metadata_story_row_id ON MobStoryMetadata(storyRowId)", 0, null);
        ((C19506byj) interfaceC54340yek).c(null, "CREATE INDEX IF NOT EXISTS pending_snap_feed ON PendingSnap(feedRowId)", 0, null);
        ((C19506byj) interfaceC54340yek).c(null, "CREATE UNIQUE INDEX IF NOT EXISTS group_id ON PendingStoryGroup(groupId)", 0, null);
        ((C19506byj) interfaceC54340yek).c(null, "CREATE INDEX IF NOT EXISTS post_snap_action_conversation_id ON PostSnapAction(conversationId)", 0, null);
        ((C19506byj) interfaceC54340yek).c(null, "CREATE INDEX IF NOT EXISTS post_snap_action_expiration_timestamp ON PostSnapAction(expirationTimestamp)", 0, null);
        ((C19506byj) interfaceC54340yek).c(null, "CREATE UNIQUE INDEX IF NOT EXISTS postable_story_story_row_id ON PostableStory(storyRowId)", 0, null);
        ((C19506byj) interfaceC54340yek).c(null, "CREATE UNIQUE INDEX IF NOT EXISTS profile_preload_config_unique_index_owner_id_profile_type ON ProfilePreloadConfig(ownerID, profileType)", 0, null);
        ((C19506byj) interfaceC54340yek).c(null, "CREATE UNIQUE INDEX IF NOT EXISTS profile_preload_config_index_expiration_timestamp_ms ON ProfilePreloadConfig(expirationTimestampMs)", 0, null);
        ((C19506byj) interfaceC54340yek).c(null, "CREATE UNIQUE INDEX IF NOT EXISTS SnapshotSnapsUnique ON SnapshotSnaps(ownerId)", 0, null);
        ((C19506byj) interfaceC54340yek).c(null, "CREATE INDEX IF NOT EXISTS SnapshotSnapsSourceId ON SnapshotSnaps(sourceId)", 0, null);
        ((C19506byj) interfaceC54340yek).c(null, "CREATE UNIQUE INDEX IF NOT EXISTS story_notes_snap_id_viewer ON StoryNote(snapId, viewer, viewerUserId)", 0, null);
        ((C19506byj) interfaceC54340yek).c(null, "CREATE INDEX IF NOT EXISTS story_notes_snap_id ON StoryNote(snapId)", 0, null);
        ((C19506byj) interfaceC54340yek).c(null, "CREATE INDEX IF NOT EXISTS story_username ON Story(userName)", 0, null);
        ((C19506byj) interfaceC54340yek).c(null, "CREATE INDEX IF NOT EXISTS story_userId ON Story(userId)", 0, null);
        ((C19506byj) interfaceC54340yek).c(null, "CREATE INDEX IF NOT EXISTS story_snap_story_row_id ON StorySnap(storyRowId)", 0, null);
        ((C19506byj) interfaceC54340yek).c(null, "CREATE INDEX IF NOT EXISTS story_snap_username ON StorySnap(username)", 0, null);
        ((C19506byj) interfaceC54340yek).c(null, "CREATE INDEX IF NOT EXISTS story_snap_userId ON StorySnap(userId)", 0, null);
        ((C19506byj) interfaceC54340yek).c(null, "CREATE INDEX IF NOT EXISTS story_snap_snap_row_id ON StorySnap(snapRowId)", 0, null);
        ((C19506byj) interfaceC54340yek).c(null, "CREATE INDEX IF NOT EXISTS suggestion_placement_row_id ON SuggestedFriendPlacement(suggestionPlacement)", 0, null);
        ((C19506byj) interfaceC54340yek).c(null, "CREATE INDEX IF NOT EXISTS suggestion_placement_friend_row_id ON SuggestedFriendPlacement(friendRowId)", 0, null);
        ((C19506byj) interfaceC54340yek).c(null, "CREATE INDEX IF NOT EXISTS request_id_index ON UploadAssetResult(requestId, mediaContextType)", 0, null);
        ((C19506byj) interfaceC54340yek).c(null, "CREATE INDEX IF NOT EXISTS expiration_index ON UploadAssetResult(expiryInSeconds)", 0, null);
        ((C19506byj) interfaceC54340yek).c(null, "CREATE INDEX IF NOT EXISTS upload_location_cache_key ON UploadLocation(cacheKey)", 0, null);
        ((C19506byj) interfaceC54340yek).c(null, "CREATE INDEX IF NOT EXISTS upload_location_type ON UploadLocation(type)", 0, null);
        ((C19506byj) interfaceC54340yek).c(null, "CREATE INDEX IF NOT EXISTS request_id ON UploadRequestQueue(resultEnum)", 0, null);
        ((C19506byj) interfaceC54340yek).c(null, "CREATE INDEX IF NOT EXISTS result_enum ON UploadRequestQueue(requestId)", 0, null);
        ((C19506byj) interfaceC54340yek).c(null, "CREATE INDEX IF NOT EXISTS expiration_timestamp ON UploadRequestQueue(expirationTimestamp)", 0, null);
        ((C19506byj) interfaceC54340yek).c(null, "INSERT INTO OPSCameraPreviewState (uIState,\nlatestSnapSentTimestamp,\nonPlatformSnapSentCount,\nhasSeenTooltip,\nshareSheetSessionStartTimestamp,\nshareSheetSessionImpressionCount)\nVALUES (\"Disabled\", 0, 0, \"false\", 0, 0)", 0, null);
    }

    @Override // defpackage.InterfaceC0149Aek
    public int getVersion() {
        return 498;
    }
}
